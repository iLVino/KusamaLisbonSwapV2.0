{
  "id": "8992c9af8ed83105a40178948ed2bfc5",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/MockERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract MockERC20 {\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) {\n        name = _name;\n        symbol = _symbol;\n        totalSupply = _initialSupply;\n        balanceOf[msg.sender] = _initialSupply;\n        emit Transfer(address(0), msg.sender, _initialSupply);\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(balanceOf[msg.sender] >= value, \"Insufficient balance\");\n        balanceOf[msg.sender] -= value;\n        balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(balanceOf[from] >= value, \"Insufficient balance\");\n        require(allowance[from][msg.sender] >= value, \"Insufficient allowance\");\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n}"
      },
      "contracts/UniswapV2Pair.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ninterface IERC20 {\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\ncontract UniswapV2Pair {\n    address public token0; // KSM\n    address public token1; // USDT\n    uint112 private reserve0;\n    uint112 private reserve1;\n\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    uint256 private constant MINIMUM_LIQUIDITY = 10**3;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n\n    constructor(address _token0, address _token1) {\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n    }\n\n    function mint(address to) public returns (uint256 liquidity) {\n        (uint112 _reserve0, uint112 _reserve1) = getReserves();\n        uint256 balance0 = IERC20(token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(token1).balanceOf(address(this));\n        uint256 amount0 = balance0 - _reserve0;\n        uint256 amount1 = balance1 - _reserve1;\n\n        if (totalSupply == 0) {\n            uint256 product = amount0 * amount1;\n            uint256 z = product;\n            if (product > 3) {\n                uint256 x = product / 2 + 1;\n                while (x < z) {\n                    z = x;\n                    x = (product / x + x) / 2;\n                }\n            } else if (product != 0) {\n                z = 1;\n            }\n            liquidity = z - MINIMUM_LIQUIDITY;\n            balanceOf[address(0)] = MINIMUM_LIQUIDITY;\n        } else {\n            uint256 liquidity0 = (amount0 * totalSupply) / _reserve0;\n            uint256 liquidity1 = (amount1 * totalSupply) / _reserve1;\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        }\n        require(liquidity > 0, \"INSUFFICIENT_LIQUIDITY\");\n        balanceOf[to] += liquidity;\n        totalSupply += liquidity;\n\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        emit Mint(msg.sender, amount0, amount1);\n    }\n    event Swap(\n    address indexed sender,\n    uint256 amount0In,\n    uint256 amount1In,\n    uint256 amount0Out,\n    uint256 amount1Out,\n    address indexed to\n);\n\nfunction swap(uint256 amount0Out, uint256 amount1Out, address to) public {\n    require(amount0Out > 0 || amount1Out > 0, \"INSUFFICIENT_OUTPUT_AMOUNT\");\n    (uint112 _reserve0, uint112 _reserve1) = getReserves();\n    require(amount0Out < _reserve0 && amount1Out < _reserve1, \"INSUFFICIENT_LIQUIDITY\");\n\n    require(to != token0 && to != token1, \"INVALID_TO\");\n    if (amount0Out > 0) {\n        (bool success,) = token0.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out));\n        require(success, \"TRANSFER_FAILED_TOKEN0\");\n    }\n    if (amount1Out > 0) {\n        (bool success,) = token1.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount1Out));\n        require(success, \"TRANSFER_FAILED_TOKEN1\");\n    }\n\n    uint256 balance0 = IERC20(token0).balanceOf(address(this));\n    uint256 balance1 = IERC20(token1).balanceOf(address(this));\n    uint256 amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n    uint256 amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n    require(amount0In > 0 || amount1In > 0, \"INSUFFICIENT_INPUT_AMOUNT\");\n\n    require(\n        (balance0 * 1000) * (balance1 * 1000) >= uint256(_reserve0) * uint256(_reserve1) * (1000**2),\n        \"K\"\n    );\n\n    reserve0 = uint112(balance0);\n    reserve1 = uint112(balance1);\n    emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n}\n}"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "parameters": "z"
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.28",
    "long_version": "0.8.28+commit.7893614a.Emscripten.clang",
    "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
    "sources": {
      "contracts/MockERC20.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "contracts/MockERC20.sol",
          "exportedSymbols": {
            "MockERC20": [
              208
            ]
          },
          "id": 209,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".20"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "MockERC20",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 208,
              "linearizedBaseContracts": [
                208
              ],
              "name": "MockERC20",
              "nameLocation": "67:9:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "06fdde03",
                  "id": 3,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "97:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 208,
                  "src": "83:18:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 2,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "83:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "95d89b41",
                  "id": 5,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nameLocation": "121:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 208,
                  "src": "107:20:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 4,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "107:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "313ce567",
                  "id": 8,
                  "mutability": "mutable",
                  "name": "decimals",
                  "nameLocation": "146:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 208,
                  "src": "133:26:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 6,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "133:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": {
                    "hexValue": "3138",
                    "id": 7,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "157:2:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_18_by_1",
                      "typeString": "int_const 18"
                    },
                    "value": "18"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "18160ddd",
                  "id": 10,
                  "mutability": "mutable",
                  "name": "totalSupply",
                  "nameLocation": "180:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 208,
                  "src": "165:26:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 9,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "165:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "70a08231",
                  "id": 14,
                  "mutability": "mutable",
                  "name": "balanceOf",
                  "nameLocation": "232:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 208,
                  "src": "197:44:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 13,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 11,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "205:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "197:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 12,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "216:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "dd62ed3e",
                  "id": 20,
                  "mutability": "mutable",
                  "name": "allowance",
                  "nameLocation": "302:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 208,
                  "src": "247:64:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "typeName": {
                    "id": 19,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 15,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "255:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "247:47:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(address => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 18,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 16,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "274:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "266:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 17,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "285:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                  "id": 28,
                  "name": "Transfer",
                  "nameLocation": "324:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 27,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 22,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "349:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 28,
                        "src": "333:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 21,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "333:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 24,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "371:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 28,
                        "src": "355:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 23,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "355:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 26,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "383:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 28,
                        "src": "375:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 25,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "375:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "332:57:0"
                  },
                  "src": "318:72:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                  "id": 36,
                  "name": "Approval",
                  "nameLocation": "401:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 35,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 30,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "426:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 36,
                        "src": "410:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 29,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "410:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 32,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "449:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 36,
                        "src": "433:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 31,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "433:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 34,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "466:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 36,
                        "src": "458:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 33,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "458:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "409:63:0"
                  },
                  "src": "395:78:0"
                },
                {
                  "body": {
                    "id": 74,
                    "nodeType": "Block",
                    "src": "559:204:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 47,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 45,
                            "name": "name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "569:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 46,
                            "name": "_name",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 38,
                            "src": "576:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "569:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 48,
                        "nodeType": "ExpressionStatement",
                        "src": "569:12:0"
                      },
                      {
                        "expression": {
                          "id": 51,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 49,
                            "name": "symbol",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "591:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 50,
                            "name": "_symbol",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40,
                            "src": "600:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "591:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 52,
                        "nodeType": "ExpressionStatement",
                        "src": "591:16:0"
                      },
                      {
                        "expression": {
                          "id": 55,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 53,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10,
                            "src": "617:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 54,
                            "name": "_initialSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 42,
                            "src": "631:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "617:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 56,
                        "nodeType": "ExpressionStatement",
                        "src": "617:28:0"
                      },
                      {
                        "expression": {
                          "id": 62,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 57,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14,
                              "src": "655:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 60,
                            "indexExpression": {
                              "expression": {
                                "id": 58,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "665:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 59,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "669:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "665:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "655:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 61,
                            "name": "_initialSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 42,
                            "src": "679:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "655:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 63,
                        "nodeType": "ExpressionStatement",
                        "src": "655:38:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 67,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "725:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 66,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "717:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 65,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "717:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 68,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "717:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 69,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "729:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 70,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "733:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "729:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 71,
                              "name": "_initialSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 42,
                              "src": "741:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 64,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28,
                            "src": "708:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 72,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "708:48:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 73,
                        "nodeType": "EmitStatement",
                        "src": "703:53:0"
                      }
                    ]
                  },
                  "id": 75,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 43,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 38,
                        "mutability": "mutable",
                        "name": "_name",
                        "nameLocation": "505:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 75,
                        "src": "491:19:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 37,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "491:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 40,
                        "mutability": "mutable",
                        "name": "_symbol",
                        "nameLocation": "526:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 75,
                        "src": "512:21:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 39,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "512:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 42,
                        "mutability": "mutable",
                        "name": "_initialSupply",
                        "nameLocation": "543:14:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 75,
                        "src": "535:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 41,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "535:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "490:68:0"
                  },
                  "returnParameters": {
                    "id": 44,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "559:0:0"
                  },
                  "scope": 208,
                  "src": "479:284:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 116,
                    "nodeType": "Block",
                    "src": "836:219:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 90,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 85,
                                  "name": "balanceOf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 14,
                                  "src": "854:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 88,
                                "indexExpression": {
                                  "expression": {
                                    "id": 86,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "864:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 87,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "868:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "864:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "854:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 89,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 79,
                                "src": "879:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "854:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e742062616c616e6365",
                              "id": 91,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "886:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                                "typeString": "literal_string \"Insufficient balance\""
                              },
                              "value": "Insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                                "typeString": "literal_string \"Insufficient balance\""
                              }
                            ],
                            "id": 84,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "846:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 92,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "846:63:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 93,
                        "nodeType": "ExpressionStatement",
                        "src": "846:63:0"
                      },
                      {
                        "expression": {
                          "id": 99,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 94,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14,
                              "src": "919:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 97,
                            "indexExpression": {
                              "expression": {
                                "id": 95,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "929:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 96,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "933:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "929:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "919:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 98,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79,
                            "src": "944:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "919:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 100,
                        "nodeType": "ExpressionStatement",
                        "src": "919:30:0"
                      },
                      {
                        "expression": {
                          "id": 105,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 101,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14,
                              "src": "959:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 103,
                            "indexExpression": {
                              "id": 102,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 77,
                              "src": "969:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "959:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 104,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 79,
                            "src": "976:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "959:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 106,
                        "nodeType": "ExpressionStatement",
                        "src": "959:22:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 108,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1005:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 109,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1009:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1005:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 110,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 77,
                              "src": "1017:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 111,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 79,
                              "src": "1021:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 107,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28,
                            "src": "996:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 112,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "996:31:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 113,
                        "nodeType": "EmitStatement",
                        "src": "991:36:0"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1044:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 83,
                        "id": 115,
                        "nodeType": "Return",
                        "src": "1037:11:0"
                      }
                    ]
                  },
                  "functionSelector": "a9059cbb",
                  "id": 117,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "778:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 80,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 77,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "795:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 117,
                        "src": "787:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 76,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "787:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 79,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "807:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 117,
                        "src": "799:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 78,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "799:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "786:27:0"
                  },
                  "returnParameters": {
                    "id": 83,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 82,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 117,
                        "src": "830:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 81,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "830:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "829:6:0"
                  },
                  "scope": 208,
                  "src": "769:286:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 144,
                    "nodeType": "Block",
                    "src": "1132:127:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 133,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 126,
                                "name": "allowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 20,
                                "src": "1142:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 130,
                              "indexExpression": {
                                "expression": {
                                  "id": 127,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "1152:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 128,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1156:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "1152:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1142:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 131,
                            "indexExpression": {
                              "id": 129,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 119,
                              "src": "1164:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1142:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 132,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 121,
                            "src": "1175:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1142:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 134,
                        "nodeType": "ExpressionStatement",
                        "src": "1142:38:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 136,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1204:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 137,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1208:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1204:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 138,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 119,
                              "src": "1216:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 139,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 121,
                              "src": "1225:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 135,
                            "name": "Approval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 36,
                            "src": "1195:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 140,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1195:36:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 141,
                        "nodeType": "EmitStatement",
                        "src": "1190:41:0"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 142,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1248:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 125,
                        "id": 143,
                        "nodeType": "Return",
                        "src": "1241:11:0"
                      }
                    ]
                  },
                  "functionSelector": "095ea7b3",
                  "id": 145,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "1070:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 122,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 119,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "1086:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 145,
                        "src": "1078:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 118,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1078:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 121,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1103:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 145,
                        "src": "1095:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 120,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1095:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1077:32:0"
                  },
                  "returnParameters": {
                    "id": 125,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 124,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 145,
                        "src": "1126:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 123,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1126:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1125:6:0"
                  },
                  "scope": 208,
                  "src": "1061:198:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 206,
                    "nodeType": "Block",
                    "src": "1350:328:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 161,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 157,
                                  "name": "balanceOf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 14,
                                  "src": "1368:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 159,
                                "indexExpression": {
                                  "id": 158,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 147,
                                  "src": "1378:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1368:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 160,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 151,
                                "src": "1387:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1368:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e742062616c616e6365",
                              "id": 162,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1394:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                                "typeString": "literal_string \"Insufficient balance\""
                              },
                              "value": "Insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                                "typeString": "literal_string \"Insufficient balance\""
                              }
                            ],
                            "id": 156,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1360:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 163,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1360:57:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 164,
                        "nodeType": "ExpressionStatement",
                        "src": "1360:57:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 173,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 166,
                                    "name": "allowance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 20,
                                    "src": "1435:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 168,
                                  "indexExpression": {
                                    "id": 167,
                                    "name": "from",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 147,
                                    "src": "1445:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1435:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 171,
                                "indexExpression": {
                                  "expression": {
                                    "id": 169,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "1451:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 170,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1455:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "1451:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1435:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 172,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 151,
                                "src": "1466:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1435:36:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e7420616c6c6f77616e6365",
                              "id": 174,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1473:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_45e3d26e36c3151c7f92a1eee9add9658cbb8e14605ee2452ec007389b9744bc",
                                "typeString": "literal_string \"Insufficient allowance\""
                              },
                              "value": "Insufficient allowance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_45e3d26e36c3151c7f92a1eee9add9658cbb8e14605ee2452ec007389b9744bc",
                                "typeString": "literal_string \"Insufficient allowance\""
                              }
                            ],
                            "id": 165,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1427:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 175,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1427:71:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 176,
                        "nodeType": "ExpressionStatement",
                        "src": "1427:71:0"
                      },
                      {
                        "expression": {
                          "id": 181,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 177,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14,
                              "src": "1508:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 179,
                            "indexExpression": {
                              "id": 178,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 147,
                              "src": "1518:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1508:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 180,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 151,
                            "src": "1527:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1508:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 182,
                        "nodeType": "ExpressionStatement",
                        "src": "1508:24:0"
                      },
                      {
                        "expression": {
                          "id": 187,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 183,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 14,
                              "src": "1542:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 185,
                            "indexExpression": {
                              "id": 184,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 149,
                              "src": "1552:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1542:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 186,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 151,
                            "src": "1559:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1542:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 188,
                        "nodeType": "ExpressionStatement",
                        "src": "1542:22:0"
                      },
                      {
                        "expression": {
                          "id": 196,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 189,
                                "name": "allowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 20,
                                "src": "1574:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 193,
                              "indexExpression": {
                                "id": 190,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 147,
                                "src": "1584:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1574:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 194,
                            "indexExpression": {
                              "expression": {
                                "id": 191,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1590:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 192,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1594:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1590:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1574:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 195,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 151,
                            "src": "1605:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1574:36:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 197,
                        "nodeType": "ExpressionStatement",
                        "src": "1574:36:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 199,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 147,
                              "src": "1634:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 200,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 149,
                              "src": "1640:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 201,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 151,
                              "src": "1644:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 198,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 28,
                            "src": "1625:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 202,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1625:25:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 203,
                        "nodeType": "EmitStatement",
                        "src": "1620:30:0"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 204,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1667:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 155,
                        "id": 205,
                        "nodeType": "Return",
                        "src": "1660:11:0"
                      }
                    ]
                  },
                  "functionSelector": "23b872dd",
                  "id": 207,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "1274:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 152,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 147,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "1295:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 207,
                        "src": "1287:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 146,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1287:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 149,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1309:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 207,
                        "src": "1301:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 148,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1301:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 151,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "1321:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 207,
                        "src": "1313:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 150,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1313:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1286:41:0"
                  },
                  "returnParameters": {
                    "id": 155,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 154,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 207,
                        "src": "1344:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 153,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1344:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1343:6:0"
                  },
                  "scope": 208,
                  "src": "1265:413:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 209,
              "src": "58:1622:0",
              "usedErrors": [],
              "usedEvents": [
                28,
                36
              ]
            }
          ],
          "src": "32:1648:0"
        }
      },
      "contracts/UniswapV2Pair.sol": {
        "id": 1,
        "ast": {
          "absolutePath": "contracts/UniswapV2Pair.sol",
          "exportedSymbols": {
            "IERC20": [
              238
            ],
            "UniswapV2Pair": [
              718
            ]
          },
          "id": 719,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 210,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:1"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20",
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 238,
              "linearizedBaseContracts": [
                238
              ],
              "name": "IERC20",
              "nameLocation": "68:6:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "70a08231",
                  "id": 217,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "90:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 213,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 212,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "108:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 217,
                        "src": "100:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 211,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "100:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "99:17:1"
                  },
                  "returnParameters": {
                    "id": 216,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 215,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 217,
                        "src": "140:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 214,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "140:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "139:9:1"
                  },
                  "scope": 238,
                  "src": "81:68:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "a9059cbb",
                  "id": 226,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "163:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 222,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 219,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "180:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 226,
                        "src": "172:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 218,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "172:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 221,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "199:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 226,
                        "src": "191:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 220,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "191:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "171:35:1"
                  },
                  "returnParameters": {
                    "id": 225,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 224,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 226,
                        "src": "225:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 223,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "225:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "224:6:1"
                  },
                  "scope": 238,
                  "src": "154:77:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "23b872dd",
                  "id": 237,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "245:12:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 233,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 228,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "266:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "258:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 227,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "258:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 230,
                        "mutability": "mutable",
                        "name": "recipient",
                        "nameLocation": "282:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "274:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 229,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "274:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 232,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "301:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "293:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 231,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "293:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "257:51:1"
                  },
                  "returnParameters": {
                    "id": 236,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 235,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 237,
                        "src": "327:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 234,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "327:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "326:6:1"
                  },
                  "scope": 238,
                  "src": "236:97:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 719,
              "src": "58:277:1",
              "usedErrors": [],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "UniswapV2Pair",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 718,
              "linearizedBaseContracts": [
                718
              ],
              "name": "UniswapV2Pair",
              "nameLocation": "346:13:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "0dfe1681",
                  "id": 240,
                  "mutability": "mutable",
                  "name": "token0",
                  "nameLocation": "381:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 718,
                  "src": "366:21:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 239,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "366:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "d21220a7",
                  "id": 242,
                  "mutability": "mutable",
                  "name": "token1",
                  "nameLocation": "415:6:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 718,
                  "src": "400:21:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 241,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "400:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 244,
                  "mutability": "mutable",
                  "name": "reserve0",
                  "nameLocation": "451:8:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 718,
                  "src": "435:24:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint112",
                    "typeString": "uint112"
                  },
                  "typeName": {
                    "id": 243,
                    "name": "uint112",
                    "nodeType": "ElementaryTypeName",
                    "src": "435:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint112",
                      "typeString": "uint112"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 246,
                  "mutability": "mutable",
                  "name": "reserve1",
                  "nameLocation": "481:8:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 718,
                  "src": "465:24:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint112",
                    "typeString": "uint112"
                  },
                  "typeName": {
                    "id": 245,
                    "name": "uint112",
                    "nodeType": "ElementaryTypeName",
                    "src": "465:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint112",
                      "typeString": "uint112"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "18160ddd",
                  "id": 248,
                  "mutability": "mutable",
                  "name": "totalSupply",
                  "nameLocation": "511:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 718,
                  "src": "496:26:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 247,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "496:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "70a08231",
                  "id": 252,
                  "mutability": "mutable",
                  "name": "balanceOf",
                  "nameLocation": "563:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 718,
                  "src": "528:44:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 251,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 249,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "536:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "528:27:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 250,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "547:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": true,
                  "id": 257,
                  "mutability": "constant",
                  "name": "MINIMUM_LIQUIDITY",
                  "nameLocation": "603:17:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 718,
                  "src": "578:50:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 253,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "578:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": {
                    "commonType": {
                      "typeIdentifier": "t_rational_1000_by_1",
                      "typeString": "int_const 1000"
                    },
                    "id": 256,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "leftExpression": {
                      "hexValue": "3130",
                      "id": 254,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "623:2:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_10_by_1",
                        "typeString": "int_const 10"
                      },
                      "value": "10"
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "**",
                    "rightExpression": {
                      "hexValue": "33",
                      "id": 255,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "627:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_3_by_1",
                        "typeString": "int_const 3"
                      },
                      "value": "3"
                    },
                    "src": "623:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1000_by_1",
                      "typeString": "int_const 1000"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "eventSelector": "4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f",
                  "id": 265,
                  "name": "Mint",
                  "nameLocation": "641:4:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 264,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 259,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "662:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 265,
                        "src": "646:22:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 258,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "646:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 261,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount0",
                        "nameLocation": "678:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 265,
                        "src": "670:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 260,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "670:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 263,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount1",
                        "nameLocation": "695:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 265,
                        "src": "687:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 262,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "687:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "645:58:1"
                  },
                  "src": "635:69:1"
                },
                {
                  "body": {
                    "id": 280,
                    "nodeType": "Block",
                    "src": "756:59:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 274,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 272,
                            "name": "token0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 240,
                            "src": "766:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 273,
                            "name": "_token0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 267,
                            "src": "775:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "766:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 275,
                        "nodeType": "ExpressionStatement",
                        "src": "766:16:1"
                      },
                      {
                        "expression": {
                          "id": 278,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 276,
                            "name": "token1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 242,
                            "src": "792:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 277,
                            "name": "_token1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 269,
                            "src": "801:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "792:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 279,
                        "nodeType": "ExpressionStatement",
                        "src": "792:16:1"
                      }
                    ]
                  },
                  "id": 281,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 270,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 267,
                        "mutability": "mutable",
                        "name": "_token0",
                        "nameLocation": "730:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 281,
                        "src": "722:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 266,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "722:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 269,
                        "mutability": "mutable",
                        "name": "_token1",
                        "nameLocation": "747:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 281,
                        "src": "739:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 268,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "739:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "721:34:1"
                  },
                  "returnParameters": {
                    "id": 271,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "756:0:1"
                  },
                  "scope": 718,
                  "src": "710:105:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 296,
                    "nodeType": "Block",
                    "src": "903:67:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 290,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 288,
                            "name": "_reserve0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 284,
                            "src": "913:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 289,
                            "name": "reserve0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 244,
                            "src": "925:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "src": "913:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint112",
                            "typeString": "uint112"
                          }
                        },
                        "id": 291,
                        "nodeType": "ExpressionStatement",
                        "src": "913:20:1"
                      },
                      {
                        "expression": {
                          "id": 294,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 292,
                            "name": "_reserve1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 286,
                            "src": "943:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 293,
                            "name": "reserve1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 246,
                            "src": "955:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "src": "943:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint112",
                            "typeString": "uint112"
                          }
                        },
                        "id": 295,
                        "nodeType": "ExpressionStatement",
                        "src": "943:20:1"
                      }
                    ]
                  },
                  "functionSelector": "0902f1ac",
                  "id": 297,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getReserves",
                  "nameLocation": "830:11:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 282,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "841:2:1"
                  },
                  "returnParameters": {
                    "id": 287,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 284,
                        "mutability": "mutable",
                        "name": "_reserve0",
                        "nameLocation": "873:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 297,
                        "src": "865:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint112",
                          "typeString": "uint112"
                        },
                        "typeName": {
                          "id": 283,
                          "name": "uint112",
                          "nodeType": "ElementaryTypeName",
                          "src": "865:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint112",
                            "typeString": "uint112"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 286,
                        "mutability": "mutable",
                        "name": "_reserve1",
                        "nameLocation": "892:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 297,
                        "src": "884:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint112",
                          "typeString": "uint112"
                        },
                        "typeName": {
                          "id": 285,
                          "name": "uint112",
                          "nodeType": "ElementaryTypeName",
                          "src": "884:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint112",
                            "typeString": "uint112"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "864:38:1"
                  },
                  "scope": 718,
                  "src": "821:149:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 485,
                    "nodeType": "Block",
                    "src": "1037:1292:1",
                    "statements": [
                      {
                        "assignments": [
                          305,
                          307
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 305,
                            "mutability": "mutable",
                            "name": "_reserve0",
                            "nameLocation": "1056:9:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 485,
                            "src": "1048:17:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            },
                            "typeName": {
                              "id": 304,
                              "name": "uint112",
                              "nodeType": "ElementaryTypeName",
                              "src": "1048:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint112",
                                "typeString": "uint112"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 307,
                            "mutability": "mutable",
                            "name": "_reserve1",
                            "nameLocation": "1075:9:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 485,
                            "src": "1067:17:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            },
                            "typeName": {
                              "id": 306,
                              "name": "uint112",
                              "nodeType": "ElementaryTypeName",
                              "src": "1067:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint112",
                                "typeString": "uint112"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 310,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 308,
                            "name": "getReserves",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 297,
                            "src": "1088:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint112_$_t_uint112_$",
                              "typeString": "function () view returns (uint112,uint112)"
                            }
                          },
                          "id": 309,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1088:13:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint112_$_t_uint112_$",
                            "typeString": "tuple(uint112,uint112)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1047:54:1"
                      },
                      {
                        "assignments": [
                          312
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 312,
                            "mutability": "mutable",
                            "name": "balance0",
                            "nameLocation": "1119:8:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 485,
                            "src": "1111:16:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 311,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1111:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 322,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 319,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967268,
                                  "src": "1163:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_UniswapV2Pair_$718",
                                    "typeString": "contract UniswapV2Pair"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_UniswapV2Pair_$718",
                                    "typeString": "contract UniswapV2Pair"
                                  }
                                ],
                                "id": 318,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1155:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 317,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1155:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 320,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1155:13:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 314,
                                  "name": "token0",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 240,
                                  "src": "1137:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 313,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 238,
                                "src": "1130:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$238_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 315,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1130:14:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$238",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 316,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1145:9:1",
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 217,
                            "src": "1130:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 321,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1130:39:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1111:58:1"
                      },
                      {
                        "assignments": [
                          324
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 324,
                            "mutability": "mutable",
                            "name": "balance1",
                            "nameLocation": "1187:8:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 485,
                            "src": "1179:16:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 323,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1179:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 334,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 331,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967268,
                                  "src": "1231:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_UniswapV2Pair_$718",
                                    "typeString": "contract UniswapV2Pair"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_UniswapV2Pair_$718",
                                    "typeString": "contract UniswapV2Pair"
                                  }
                                ],
                                "id": 330,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1223:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 329,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1223:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 332,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1223:13:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 326,
                                  "name": "token1",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 242,
                                  "src": "1205:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 325,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 238,
                                "src": "1198:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$238_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 327,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1198:14:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$238",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 328,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1213:9:1",
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 217,
                            "src": "1198:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 333,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1198:39:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1179:58:1"
                      },
                      {
                        "assignments": [
                          336
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 336,
                            "mutability": "mutable",
                            "name": "amount0",
                            "nameLocation": "1255:7:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 485,
                            "src": "1247:15:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 335,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1247:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 340,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 339,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 337,
                            "name": "balance0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 312,
                            "src": "1265:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 338,
                            "name": "_reserve0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 305,
                            "src": "1276:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "src": "1265:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1247:38:1"
                      },
                      {
                        "assignments": [
                          342
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 342,
                            "mutability": "mutable",
                            "name": "amount1",
                            "nameLocation": "1303:7:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 485,
                            "src": "1295:15:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 341,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "1295:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 346,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 345,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 343,
                            "name": "balance1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 324,
                            "src": "1313:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "-",
                          "rightExpression": {
                            "id": 344,
                            "name": "_reserve1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 307,
                            "src": "1324:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "src": "1313:20:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "1295:38:1"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 349,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 347,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 248,
                            "src": "1348:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1363:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "1348:16:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 445,
                          "nodeType": "Block",
                          "src": "1843:226:1",
                          "statements": [
                            {
                              "assignments": [
                                419
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 419,
                                  "mutability": "mutable",
                                  "name": "liquidity0",
                                  "nameLocation": "1865:10:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 445,
                                  "src": "1857:18:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 418,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1857:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 426,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 425,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 422,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 420,
                                        "name": "amount0",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 336,
                                        "src": "1879:7:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "id": 421,
                                        "name": "totalSupply",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 248,
                                        "src": "1889:11:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "1879:21:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 423,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "1878:23:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "id": 424,
                                  "name": "_reserve0",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 305,
                                  "src": "1904:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint112",
                                    "typeString": "uint112"
                                  }
                                },
                                "src": "1878:35:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "1857:56:1"
                            },
                            {
                              "assignments": [
                                428
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 428,
                                  "mutability": "mutable",
                                  "name": "liquidity1",
                                  "nameLocation": "1935:10:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 445,
                                  "src": "1927:18:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 427,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1927:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 435,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 434,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 431,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 429,
                                        "name": "amount1",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 342,
                                        "src": "1949:7:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "id": 430,
                                        "name": "totalSupply",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 248,
                                        "src": "1959:11:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "1949:21:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 432,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "1948:23:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "id": 433,
                                  "name": "_reserve1",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 307,
                                  "src": "1974:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint112",
                                    "typeString": "uint112"
                                  }
                                },
                                "src": "1948:35:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "1927:56:1"
                            },
                            {
                              "expression": {
                                "id": 443,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 436,
                                  "name": "liquidity",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 302,
                                  "src": "1997:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "condition": {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 439,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 437,
                                      "name": "liquidity0",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 419,
                                      "src": "2009:10:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "id": 438,
                                      "name": "liquidity1",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 428,
                                      "src": "2022:10:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "2009:23:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "falseExpression": {
                                    "id": 441,
                                    "name": "liquidity1",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 428,
                                    "src": "2048:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 442,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "Conditional",
                                  "src": "2009:49:1",
                                  "trueExpression": {
                                    "id": 440,
                                    "name": "liquidity0",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 419,
                                    "src": "2035:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1997:61:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 444,
                              "nodeType": "ExpressionStatement",
                              "src": "1997:61:1"
                            }
                          ]
                        },
                        "id": 446,
                        "nodeType": "IfStatement",
                        "src": "1344:725:1",
                        "trueBody": {
                          "id": 417,
                          "nodeType": "Block",
                          "src": "1366:471:1",
                          "statements": [
                            {
                              "assignments": [
                                351
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 351,
                                  "mutability": "mutable",
                                  "name": "product",
                                  "nameLocation": "1388:7:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 417,
                                  "src": "1380:15:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 350,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1380:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 355,
                              "initialValue": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 354,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 352,
                                  "name": "amount0",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 336,
                                  "src": "1398:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "id": 353,
                                  "name": "amount1",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 342,
                                  "src": "1408:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1398:17:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "1380:35:1"
                            },
                            {
                              "assignments": [
                                357
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 357,
                                  "mutability": "mutable",
                                  "name": "z",
                                  "nameLocation": "1437:1:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 417,
                                  "src": "1429:9:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 356,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1429:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 359,
                              "initialValue": {
                                "id": 358,
                                "name": "product",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 351,
                                "src": "1441:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "1429:19:1"
                            },
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 362,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 360,
                                  "name": "product",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 351,
                                  "src": "1466:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "33",
                                  "id": 361,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1476:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_3_by_1",
                                    "typeString": "int_const 3"
                                  },
                                  "value": "3"
                                },
                                "src": "1466:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "condition": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 394,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 392,
                                    "name": "product",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 351,
                                    "src": "1673:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "!=",
                                  "rightExpression": {
                                    "hexValue": "30",
                                    "id": 393,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1684:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  },
                                  "src": "1673:12:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 400,
                                "nodeType": "IfStatement",
                                "src": "1669:56:1",
                                "trueBody": {
                                  "id": 399,
                                  "nodeType": "Block",
                                  "src": "1687:38:1",
                                  "statements": [
                                    {
                                      "expression": {
                                        "id": 397,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftHandSide": {
                                          "id": 395,
                                          "name": "z",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 357,
                                          "src": "1705:1:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "Assignment",
                                        "operator": "=",
                                        "rightHandSide": {
                                          "hexValue": "31",
                                          "id": 396,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "1709:1:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_1_by_1",
                                            "typeString": "int_const 1"
                                          },
                                          "value": "1"
                                        },
                                        "src": "1705:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 398,
                                      "nodeType": "ExpressionStatement",
                                      "src": "1705:5:1"
                                    }
                                  ]
                                }
                              },
                              "id": 401,
                              "nodeType": "IfStatement",
                              "src": "1462:263:1",
                              "trueBody": {
                                "id": 391,
                                "nodeType": "Block",
                                "src": "1479:184:1",
                                "statements": [
                                  {
                                    "assignments": [
                                      364
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 364,
                                        "mutability": "mutable",
                                        "name": "x",
                                        "nameLocation": "1505:1:1",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 391,
                                        "src": "1497:9:1",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "typeName": {
                                          "id": 363,
                                          "name": "uint256",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "1497:7:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "visibility": "internal"
                                      }
                                    ],
                                    "id": 370,
                                    "initialValue": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 369,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "commonType": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        },
                                        "id": 367,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "id": 365,
                                          "name": "product",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 351,
                                          "src": "1509:7:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "/",
                                        "rightExpression": {
                                          "hexValue": "32",
                                          "id": 366,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "1519:1:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_2_by_1",
                                            "typeString": "int_const 2"
                                          },
                                          "value": "2"
                                        },
                                        "src": "1509:11:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "+",
                                      "rightExpression": {
                                        "hexValue": "31",
                                        "id": 368,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1523:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1_by_1",
                                          "typeString": "int_const 1"
                                        },
                                        "value": "1"
                                      },
                                      "src": "1509:15:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "1497:27:1"
                                  },
                                  {
                                    "body": {
                                      "id": 389,
                                      "nodeType": "Block",
                                      "src": "1556:93:1",
                                      "statements": [
                                        {
                                          "expression": {
                                            "id": 376,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "id": 374,
                                              "name": "z",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 357,
                                              "src": "1578:1:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "id": 375,
                                              "name": "x",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 364,
                                              "src": "1582:1:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "1578:5:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 377,
                                          "nodeType": "ExpressionStatement",
                                          "src": "1578:5:1"
                                        },
                                        {
                                          "expression": {
                                            "id": 387,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "id": 378,
                                              "name": "x",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 364,
                                              "src": "1605:1:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "commonType": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              },
                                              "id": 386,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "leftExpression": {
                                                "components": [
                                                  {
                                                    "commonType": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    },
                                                    "id": 383,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "leftExpression": {
                                                      "commonType": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      },
                                                      "id": 381,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "lValueRequested": false,
                                                      "leftExpression": {
                                                        "id": 379,
                                                        "name": "product",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 351,
                                                        "src": "1610:7:1",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "nodeType": "BinaryOperation",
                                                      "operator": "/",
                                                      "rightExpression": {
                                                        "id": 380,
                                                        "name": "x",
                                                        "nodeType": "Identifier",
                                                        "overloadedDeclarations": [],
                                                        "referencedDeclaration": 364,
                                                        "src": "1620:1:1",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_uint256",
                                                          "typeString": "uint256"
                                                        }
                                                      },
                                                      "src": "1610:11:1",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "nodeType": "BinaryOperation",
                                                    "operator": "+",
                                                    "rightExpression": {
                                                      "id": 382,
                                                      "name": "x",
                                                      "nodeType": "Identifier",
                                                      "overloadedDeclarations": [],
                                                      "referencedDeclaration": 364,
                                                      "src": "1624:1:1",
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_uint256",
                                                        "typeString": "uint256"
                                                      }
                                                    },
                                                    "src": "1610:15:1",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  }
                                                ],
                                                "id": 384,
                                                "isConstant": false,
                                                "isInlineArray": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "nodeType": "TupleExpression",
                                                "src": "1609:17:1",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "nodeType": "BinaryOperation",
                                              "operator": "/",
                                              "rightExpression": {
                                                "hexValue": "32",
                                                "id": 385,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "number",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "1629:1:1",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_rational_2_by_1",
                                                  "typeString": "int_const 2"
                                                },
                                                "value": "2"
                                              },
                                              "src": "1609:21:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "1605:25:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "id": 388,
                                          "nodeType": "ExpressionStatement",
                                          "src": "1605:25:1"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 373,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 371,
                                        "name": "x",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 364,
                                        "src": "1549:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "<",
                                      "rightExpression": {
                                        "id": 372,
                                        "name": "z",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 357,
                                        "src": "1553:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "1549:5:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 390,
                                    "nodeType": "WhileStatement",
                                    "src": "1542:107:1"
                                  }
                                ]
                              }
                            },
                            {
                              "expression": {
                                "id": 406,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 402,
                                  "name": "liquidity",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 302,
                                  "src": "1738:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 405,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 403,
                                    "name": "z",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 357,
                                    "src": "1750:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 404,
                                    "name": "MINIMUM_LIQUIDITY",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 257,
                                    "src": "1754:17:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "1750:21:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1738:33:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 407,
                              "nodeType": "ExpressionStatement",
                              "src": "1738:33:1"
                            },
                            {
                              "expression": {
                                "id": 415,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 408,
                                    "name": "balanceOf",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 252,
                                    "src": "1785:9:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 413,
                                  "indexExpression": {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 411,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "1803:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 410,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "1795:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 409,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "1795:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 412,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "1795:10:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "1785:21:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 414,
                                  "name": "MINIMUM_LIQUIDITY",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 257,
                                  "src": "1809:17:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1785:41:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 416,
                              "nodeType": "ExpressionStatement",
                              "src": "1785:41:1"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 450,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 448,
                                "name": "liquidity",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 302,
                                "src": "2086:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 449,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2098:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "2086:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "494e53554646494349454e545f4c4951554944495459",
                              "id": 451,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2101:24:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e8d3230d72418d9aed77f45ee412f45396c3f3cd599a1a457d8130d57af1a83e",
                                "typeString": "literal_string \"INSUFFICIENT_LIQUIDITY\""
                              },
                              "value": "INSUFFICIENT_LIQUIDITY"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e8d3230d72418d9aed77f45ee412f45396c3f3cd599a1a457d8130d57af1a83e",
                                "typeString": "literal_string \"INSUFFICIENT_LIQUIDITY\""
                              }
                            ],
                            "id": 447,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2078:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 452,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2078:48:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 453,
                        "nodeType": "ExpressionStatement",
                        "src": "2078:48:1"
                      },
                      {
                        "expression": {
                          "id": 458,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 454,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 252,
                              "src": "2136:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 456,
                            "indexExpression": {
                              "id": 455,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 299,
                              "src": "2146:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2136:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 457,
                            "name": "liquidity",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 302,
                            "src": "2153:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2136:26:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 459,
                        "nodeType": "ExpressionStatement",
                        "src": "2136:26:1"
                      },
                      {
                        "expression": {
                          "id": 462,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 460,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 248,
                            "src": "2172:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 461,
                            "name": "liquidity",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 302,
                            "src": "2187:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2172:24:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 463,
                        "nodeType": "ExpressionStatement",
                        "src": "2172:24:1"
                      },
                      {
                        "expression": {
                          "id": 469,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 464,
                            "name": "reserve0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 244,
                            "src": "2207:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 467,
                                "name": "balance0",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 312,
                                "src": "2226:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 466,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2218:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint112_$",
                                "typeString": "type(uint112)"
                              },
                              "typeName": {
                                "id": 465,
                                "name": "uint112",
                                "nodeType": "ElementaryTypeName",
                                "src": "2218:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 468,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2218:17:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "src": "2207:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint112",
                            "typeString": "uint112"
                          }
                        },
                        "id": 470,
                        "nodeType": "ExpressionStatement",
                        "src": "2207:28:1"
                      },
                      {
                        "expression": {
                          "id": 476,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 471,
                            "name": "reserve1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 246,
                            "src": "2245:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 474,
                                "name": "balance1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 324,
                                "src": "2264:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 473,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "2256:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint112_$",
                                "typeString": "type(uint112)"
                              },
                              "typeName": {
                                "id": 472,
                                "name": "uint112",
                                "nodeType": "ElementaryTypeName",
                                "src": "2256:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 475,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2256:17:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "src": "2245:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint112",
                            "typeString": "uint112"
                          }
                        },
                        "id": 477,
                        "nodeType": "ExpressionStatement",
                        "src": "2245:28:1"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 479,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2293:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 480,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2297:6:1",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2293:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 481,
                              "name": "amount0",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 336,
                              "src": "2305:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 482,
                              "name": "amount1",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 342,
                              "src": "2314:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 478,
                            "name": "Mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 265,
                            "src": "2288:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256,uint256)"
                            }
                          },
                          "id": 483,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2288:34:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 484,
                        "nodeType": "EmitStatement",
                        "src": "2283:39:1"
                      }
                    ]
                  },
                  "functionSelector": "6a627842",
                  "id": 486,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "mint",
                  "nameLocation": "985:4:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 300,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 299,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "998:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 486,
                        "src": "990:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 298,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "990:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "989:12:1"
                  },
                  "returnParameters": {
                    "id": 303,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 302,
                        "mutability": "mutable",
                        "name": "liquidity",
                        "nameLocation": "1026:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 486,
                        "src": "1018:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 301,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1018:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1017:19:1"
                  },
                  "scope": 718,
                  "src": "976:1353:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "eventSelector": "d78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822",
                  "id": 500,
                  "name": "Swap",
                  "nameLocation": "2340:4:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 499,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 488,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "sender",
                        "nameLocation": "2366:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 500,
                        "src": "2350:22:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 487,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2350:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 490,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount0In",
                        "nameLocation": "2386:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 500,
                        "src": "2378:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 489,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2378:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 492,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount1In",
                        "nameLocation": "2409:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 500,
                        "src": "2401:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 491,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2401:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 494,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount0Out",
                        "nameLocation": "2432:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 500,
                        "src": "2424:18:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 493,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2424:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 496,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount1Out",
                        "nameLocation": "2456:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 500,
                        "src": "2448:18:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 495,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2448:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 498,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2488:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 500,
                        "src": "2472:18:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 497,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2472:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2344:148:1"
                  },
                  "src": "2334:159:1"
                },
                {
                  "body": {
                    "id": 716,
                    "nodeType": "Block",
                    "src": "2568:1351:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 516,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 512,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 510,
                                  "name": "amount0Out",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 502,
                                  "src": "2582:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 511,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2595:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "2582:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 515,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 513,
                                  "name": "amount1Out",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 504,
                                  "src": "2600:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 514,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2613:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "2600:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "2582:32:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "494e53554646494349454e545f4f55545055545f414d4f554e54",
                              "id": 517,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2616:28:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_bbbb4868217c0daeb6721d77d471da8aa8a80672b4258dd2de9d7ccde9bf2146",
                                "typeString": "literal_string \"INSUFFICIENT_OUTPUT_AMOUNT\""
                              },
                              "value": "INSUFFICIENT_OUTPUT_AMOUNT"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_bbbb4868217c0daeb6721d77d471da8aa8a80672b4258dd2de9d7ccde9bf2146",
                                "typeString": "literal_string \"INSUFFICIENT_OUTPUT_AMOUNT\""
                              }
                            ],
                            "id": 509,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2574:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 518,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2574:71:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 519,
                        "nodeType": "ExpressionStatement",
                        "src": "2574:71:1"
                      },
                      {
                        "assignments": [
                          521,
                          523
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 521,
                            "mutability": "mutable",
                            "name": "_reserve0",
                            "nameLocation": "2660:9:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 716,
                            "src": "2652:17:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            },
                            "typeName": {
                              "id": 520,
                              "name": "uint112",
                              "nodeType": "ElementaryTypeName",
                              "src": "2652:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint112",
                                "typeString": "uint112"
                              }
                            },
                            "visibility": "internal"
                          },
                          {
                            "constant": false,
                            "id": 523,
                            "mutability": "mutable",
                            "name": "_reserve1",
                            "nameLocation": "2679:9:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 716,
                            "src": "2671:17:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            },
                            "typeName": {
                              "id": 522,
                              "name": "uint112",
                              "nodeType": "ElementaryTypeName",
                              "src": "2671:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint112",
                                "typeString": "uint112"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 526,
                        "initialValue": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 524,
                            "name": "getReserves",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 297,
                            "src": "2692:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint112_$_t_uint112_$",
                              "typeString": "function () view returns (uint112,uint112)"
                            }
                          },
                          "id": 525,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2692:13:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint112_$_t_uint112_$",
                            "typeString": "tuple(uint112,uint112)"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2651:54:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 534,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 530,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 528,
                                  "name": "amount0Out",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 502,
                                  "src": "2719:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 529,
                                  "name": "_reserve0",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 521,
                                  "src": "2732:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint112",
                                    "typeString": "uint112"
                                  }
                                },
                                "src": "2719:22:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 533,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 531,
                                  "name": "amount1Out",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 504,
                                  "src": "2745:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "id": 532,
                                  "name": "_reserve1",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 523,
                                  "src": "2758:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint112",
                                    "typeString": "uint112"
                                  }
                                },
                                "src": "2745:22:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "2719:48:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "494e53554646494349454e545f4c4951554944495459",
                              "id": 535,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2769:24:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e8d3230d72418d9aed77f45ee412f45396c3f3cd599a1a457d8130d57af1a83e",
                                "typeString": "literal_string \"INSUFFICIENT_LIQUIDITY\""
                              },
                              "value": "INSUFFICIENT_LIQUIDITY"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e8d3230d72418d9aed77f45ee412f45396c3f3cd599a1a457d8130d57af1a83e",
                                "typeString": "literal_string \"INSUFFICIENT_LIQUIDITY\""
                              }
                            ],
                            "id": 527,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2711:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 536,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2711:83:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 537,
                        "nodeType": "ExpressionStatement",
                        "src": "2711:83:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 545,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 541,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 539,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 506,
                                  "src": "2809:2:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "id": 540,
                                  "name": "token0",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 240,
                                  "src": "2815:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "2809:12:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 544,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 542,
                                  "name": "to",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 506,
                                  "src": "2825:2:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "!=",
                                "rightExpression": {
                                  "id": 543,
                                  "name": "token1",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 242,
                                  "src": "2831:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "2825:12:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "2809:28:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "494e56414c49445f544f",
                              "id": 546,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2839:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_75e8b38167806e66c7ac03ef7d9ba732d816e42ebb914717b20fba66d02e9528",
                                "typeString": "literal_string \"INVALID_TO\""
                              },
                              "value": "INVALID_TO"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_75e8b38167806e66c7ac03ef7d9ba732d816e42ebb914717b20fba66d02e9528",
                                "typeString": "literal_string \"INVALID_TO\""
                              }
                            ],
                            "id": 538,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2801:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 547,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2801:51:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 548,
                        "nodeType": "ExpressionStatement",
                        "src": "2801:51:1"
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 551,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 549,
                            "name": "amount0Out",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 502,
                            "src": "2862:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 550,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2875:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2862:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 572,
                        "nodeType": "IfStatement",
                        "src": "2858:184:1",
                        "trueBody": {
                          "id": 571,
                          "nodeType": "Block",
                          "src": "2878:164:1",
                          "statements": [
                            {
                              "assignments": [
                                553,
                                null
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 553,
                                  "mutability": "mutable",
                                  "name": "success",
                                  "nameLocation": "2894:7:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 571,
                                  "src": "2889:12:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "typeName": {
                                    "id": 552,
                                    "name": "bool",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2889:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "visibility": "internal"
                                },
                                null
                              ],
                              "id": 565,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "expression": {
                                          "expression": {
                                            "id": 558,
                                            "name": "IERC20",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 238,
                                            "src": "2941:6:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_contract$_IERC20_$238_$",
                                              "typeString": "type(contract IERC20)"
                                            }
                                          },
                                          "id": 559,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "memberLocation": "2948:8:1",
                                          "memberName": "transfer",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 226,
                                          "src": "2941:15:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                            "typeString": "function IERC20.transfer(address,uint256) returns (bool)"
                                          }
                                        },
                                        "id": 560,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberLocation": "2957:8:1",
                                        "memberName": "selector",
                                        "nodeType": "MemberAccess",
                                        "src": "2941:24:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes4",
                                          "typeString": "bytes4"
                                        }
                                      },
                                      {
                                        "id": 561,
                                        "name": "to",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 506,
                                        "src": "2967:2:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 562,
                                        "name": "amount0Out",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 502,
                                        "src": "2971:10:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes4",
                                          "typeString": "bytes4"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "id": 556,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967295,
                                        "src": "2918:3:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 557,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberLocation": "2922:18:1",
                                      "memberName": "encodeWithSelector",
                                      "nodeType": "MemberAccess",
                                      "src": "2918:22:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                        "typeString": "function (bytes4) pure returns (bytes memory)"
                                      }
                                    },
                                    "id": 563,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "2918:64:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "expression": {
                                    "id": 554,
                                    "name": "token0",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 240,
                                    "src": "2906:6:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "id": 555,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2913:4:1",
                                  "memberName": "call",
                                  "nodeType": "MemberAccess",
                                  "src": "2906:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                    "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                  }
                                },
                                "id": 564,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2906:77:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "tuple(bool,bytes memory)"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "2888:95:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 567,
                                    "name": "success",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 553,
                                    "src": "3001:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "5452414e534645525f4641494c45445f544f4b454e30",
                                    "id": 568,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3010:24:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_73e6db6de61d4a800dc6ca9226d80c9fb609861fe24544127cfcbb5aaca17982",
                                      "typeString": "literal_string \"TRANSFER_FAILED_TOKEN0\""
                                    },
                                    "value": "TRANSFER_FAILED_TOKEN0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_73e6db6de61d4a800dc6ca9226d80c9fb609861fe24544127cfcbb5aaca17982",
                                      "typeString": "literal_string \"TRANSFER_FAILED_TOKEN0\""
                                    }
                                  ],
                                  "id": 566,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    4294967278,
                                    4294967278,
                                    4294967278
                                  ],
                                  "referencedDeclaration": 4294967278,
                                  "src": "2993:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 569,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2993:42:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 570,
                              "nodeType": "ExpressionStatement",
                              "src": "2993:42:1"
                            }
                          ]
                        }
                      },
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 575,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 573,
                            "name": "amount1Out",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 504,
                            "src": "3051:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 574,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3064:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3051:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 596,
                        "nodeType": "IfStatement",
                        "src": "3047:184:1",
                        "trueBody": {
                          "id": 595,
                          "nodeType": "Block",
                          "src": "3067:164:1",
                          "statements": [
                            {
                              "assignments": [
                                577,
                                null
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 577,
                                  "mutability": "mutable",
                                  "name": "success",
                                  "nameLocation": "3083:7:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 595,
                                  "src": "3078:12:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "typeName": {
                                    "id": 576,
                                    "name": "bool",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3078:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "visibility": "internal"
                                },
                                null
                              ],
                              "id": 589,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "expression": {
                                          "expression": {
                                            "id": 582,
                                            "name": "IERC20",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 238,
                                            "src": "3130:6:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_contract$_IERC20_$238_$",
                                              "typeString": "type(contract IERC20)"
                                            }
                                          },
                                          "id": 583,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "memberLocation": "3137:8:1",
                                          "memberName": "transfer",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 226,
                                          "src": "3130:15:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                                            "typeString": "function IERC20.transfer(address,uint256) returns (bool)"
                                          }
                                        },
                                        "id": 584,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberLocation": "3146:8:1",
                                        "memberName": "selector",
                                        "nodeType": "MemberAccess",
                                        "src": "3130:24:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bytes4",
                                          "typeString": "bytes4"
                                        }
                                      },
                                      {
                                        "id": 585,
                                        "name": "to",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 506,
                                        "src": "3156:2:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      },
                                      {
                                        "id": 586,
                                        "name": "amount1Out",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 504,
                                        "src": "3160:10:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_bytes4",
                                          "typeString": "bytes4"
                                        },
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        },
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "id": 580,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967295,
                                        "src": "3107:3:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 581,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberLocation": "3111:18:1",
                                      "memberName": "encodeWithSelector",
                                      "nodeType": "MemberAccess",
                                      "src": "3107:22:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                                        "typeString": "function (bytes4) pure returns (bytes memory)"
                                      }
                                    },
                                    "id": 587,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3107:64:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "expression": {
                                    "id": 578,
                                    "name": "token1",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 242,
                                    "src": "3095:6:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "id": 579,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3102:4:1",
                                  "memberName": "call",
                                  "nodeType": "MemberAccess",
                                  "src": "3095:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                    "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                  }
                                },
                                "id": 588,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3095:77:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "tuple(bool,bytes memory)"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "3077:95:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 591,
                                    "name": "success",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 577,
                                    "src": "3190:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "5452414e534645525f4641494c45445f544f4b454e31",
                                    "id": 592,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3199:24:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_cc0482a2bcaea7f72a596d360da3c0b23353d3d0405462b3510936118c6b8408",
                                      "typeString": "literal_string \"TRANSFER_FAILED_TOKEN1\""
                                    },
                                    "value": "TRANSFER_FAILED_TOKEN1"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_cc0482a2bcaea7f72a596d360da3c0b23353d3d0405462b3510936118c6b8408",
                                      "typeString": "literal_string \"TRANSFER_FAILED_TOKEN1\""
                                    }
                                  ],
                                  "id": 590,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    4294967278,
                                    4294967278,
                                    4294967278
                                  ],
                                  "referencedDeclaration": 4294967278,
                                  "src": "3182:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 593,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3182:42:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 594,
                              "nodeType": "ExpressionStatement",
                              "src": "3182:42:1"
                            }
                          ]
                        }
                      },
                      {
                        "assignments": [
                          598
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 598,
                            "mutability": "mutable",
                            "name": "balance0",
                            "nameLocation": "3245:8:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 716,
                            "src": "3237:16:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 597,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3237:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 608,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 605,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967268,
                                  "src": "3289:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_UniswapV2Pair_$718",
                                    "typeString": "contract UniswapV2Pair"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_UniswapV2Pair_$718",
                                    "typeString": "contract UniswapV2Pair"
                                  }
                                ],
                                "id": 604,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3281:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 603,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3281:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 606,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3281:13:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 600,
                                  "name": "token0",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 240,
                                  "src": "3263:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 599,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 238,
                                "src": "3256:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$238_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 601,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3256:14:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$238",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 602,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3271:9:1",
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 217,
                            "src": "3256:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 607,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3256:39:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3237:58:1"
                      },
                      {
                        "assignments": [
                          610
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 610,
                            "mutability": "mutable",
                            "name": "balance1",
                            "nameLocation": "3309:8:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 716,
                            "src": "3301:16:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 609,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3301:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 620,
                        "initialValue": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "id": 617,
                                  "name": "this",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967268,
                                  "src": "3353:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_UniswapV2Pair_$718",
                                    "typeString": "contract UniswapV2Pair"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_contract$_UniswapV2Pair_$718",
                                    "typeString": "contract UniswapV2Pair"
                                  }
                                ],
                                "id": 616,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3345:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 615,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3345:7:1",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 618,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3345:13:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "expression": {
                              "arguments": [
                                {
                                  "id": 612,
                                  "name": "token1",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 242,
                                  "src": "3327:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "id": 611,
                                "name": "IERC20",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 238,
                                "src": "3320:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_IERC20_$238_$",
                                  "typeString": "type(contract IERC20)"
                                }
                              },
                              "id": 613,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3320:14:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_IERC20_$238",
                                "typeString": "contract IERC20"
                              }
                            },
                            "id": 614,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3335:9:1",
                            "memberName": "balanceOf",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 217,
                            "src": "3320:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                              "typeString": "function (address) view external returns (uint256)"
                            }
                          },
                          "id": 619,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3320:39:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3301:58:1"
                      },
                      {
                        "assignments": [
                          622
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 622,
                            "mutability": "mutable",
                            "name": "amount0In",
                            "nameLocation": "3373:9:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 716,
                            "src": "3365:17:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 621,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3365:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 636,
                        "initialValue": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 627,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 623,
                              "name": "balance0",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 598,
                              "src": "3385:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 626,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 624,
                                "name": "_reserve0",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 521,
                                "src": "3396:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint112",
                                  "typeString": "uint112"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 625,
                                "name": "amount0Out",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 502,
                                "src": "3408:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3396:22:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3385:33:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "30",
                            "id": 634,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3459:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "id": 635,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "3385:75:1",
                          "trueExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 633,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 628,
                              "name": "balance0",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 598,
                              "src": "3421:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 631,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 629,
                                    "name": "_reserve0",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 521,
                                    "src": "3433:9:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint112",
                                      "typeString": "uint112"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 630,
                                    "name": "amount0Out",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 502,
                                    "src": "3445:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "3433:22:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 632,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "3432:24:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3421:35:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3365:95:1"
                      },
                      {
                        "assignments": [
                          638
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 638,
                            "mutability": "mutable",
                            "name": "amount1In",
                            "nameLocation": "3474:9:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 716,
                            "src": "3466:17:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 637,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3466:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 652,
                        "initialValue": {
                          "condition": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 643,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 639,
                              "name": "balance1",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 610,
                              "src": "3486:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 642,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 640,
                                "name": "_reserve1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 523,
                                "src": "3497:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint112",
                                  "typeString": "uint112"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "id": 641,
                                "name": "amount1Out",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 504,
                                "src": "3509:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3497:22:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3486:33:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseExpression": {
                            "hexValue": "30",
                            "id": 650,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3560:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "id": 651,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "Conditional",
                          "src": "3486:75:1",
                          "trueExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 649,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 644,
                              "name": "balance1",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 610,
                              "src": "3522:8:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 647,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 645,
                                    "name": "_reserve1",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 523,
                                    "src": "3534:9:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint112",
                                      "typeString": "uint112"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "id": 646,
                                    "name": "amount1Out",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 504,
                                    "src": "3546:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "3534:22:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "id": 648,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "3533:24:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3522:35:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3466:95:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 660,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 656,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 654,
                                  "name": "amount0In",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 622,
                                  "src": "3575:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 655,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3587:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "3575:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 659,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 657,
                                  "name": "amount1In",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 638,
                                  "src": "3592:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": ">",
                                "rightExpression": {
                                  "hexValue": "30",
                                  "id": 658,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3604:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                },
                                "src": "3592:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "3575:30:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "494e53554646494349454e545f494e5055545f414d4f554e54",
                              "id": 661,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3607:27:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_9d0db5a8336d3a6beda7b5366eec56090619c00ecb7cb918d965197949f0508c",
                                "typeString": "literal_string \"INSUFFICIENT_INPUT_AMOUNT\""
                              },
                              "value": "INSUFFICIENT_INPUT_AMOUNT"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_9d0db5a8336d3a6beda7b5366eec56090619c00ecb7cb918d965197949f0508c",
                                "typeString": "literal_string \"INSUFFICIENT_INPUT_AMOUNT\""
                              }
                            ],
                            "id": 653,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "3567:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 662,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3567:68:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 663,
                        "nodeType": "ExpressionStatement",
                        "src": "3567:68:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 688,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 673,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 667,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 665,
                                        "name": "balance0",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 598,
                                        "src": "3660:8:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "hexValue": "31303030",
                                        "id": 666,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "3671:4:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1000_by_1",
                                          "typeString": "int_const 1000"
                                        },
                                        "value": "1000"
                                      },
                                      "src": "3660:15:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 668,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "3659:17:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 671,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 669,
                                        "name": "balance1",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 610,
                                        "src": "3680:8:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "*",
                                      "rightExpression": {
                                        "hexValue": "31303030",
                                        "id": 670,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "3691:4:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1000_by_1",
                                          "typeString": "int_const 1000"
                                        },
                                        "value": "1000"
                                      },
                                      "src": "3680:15:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "id": 672,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "3679:17:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "3659:37:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 687,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 682,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "arguments": [
                                      {
                                        "id": 676,
                                        "name": "_reserve0",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 521,
                                        "src": "3708:9:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint112",
                                          "typeString": "uint112"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint112",
                                          "typeString": "uint112"
                                        }
                                      ],
                                      "id": 675,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "3700:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_uint256_$",
                                        "typeString": "type(uint256)"
                                      },
                                      "typeName": {
                                        "id": 674,
                                        "name": "uint256",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "3700:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 677,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3700:18:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "*",
                                  "rightExpression": {
                                    "arguments": [
                                      {
                                        "id": 680,
                                        "name": "_reserve1",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 523,
                                        "src": "3729:9:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint112",
                                          "typeString": "uint112"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint112",
                                          "typeString": "uint112"
                                        }
                                      ],
                                      "id": 679,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "3721:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_uint256_$",
                                        "typeString": "type(uint256)"
                                      },
                                      "typeName": {
                                        "id": 678,
                                        "name": "uint256",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "3721:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 681,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "3721:18:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "3700:39:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "components": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      },
                                      "id": 685,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "hexValue": "31303030",
                                        "id": 683,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "3743:4:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_1000_by_1",
                                          "typeString": "int_const 1000"
                                        },
                                        "value": "1000"
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "**",
                                      "rightExpression": {
                                        "hexValue": "32",
                                        "id": 684,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "3749:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_2_by_1",
                                          "typeString": "int_const 2"
                                        },
                                        "value": "2"
                                      },
                                      "src": "3743:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_rational_1000000_by_1",
                                        "typeString": "int_const 1000000"
                                      }
                                    }
                                  ],
                                  "id": 686,
                                  "isConstant": false,
                                  "isInlineArray": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "TupleExpression",
                                  "src": "3742:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1000000_by_1",
                                    "typeString": "int_const 1000000"
                                  }
                                },
                                "src": "3700:51:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3659:92:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4b",
                              "id": 689,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3761:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_91cb023ee03dcff3e185aa303e77c329b6b62e0a68a590039a476bc8cb48d055",
                                "typeString": "literal_string \"K\""
                              },
                              "value": "K"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_91cb023ee03dcff3e185aa303e77c329b6b62e0a68a590039a476bc8cb48d055",
                                "typeString": "literal_string \"K\""
                              }
                            ],
                            "id": 664,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "3642:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 690,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3642:128:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 691,
                        "nodeType": "ExpressionStatement",
                        "src": "3642:128:1"
                      },
                      {
                        "expression": {
                          "id": 697,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 692,
                            "name": "reserve0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 244,
                            "src": "3777:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 695,
                                "name": "balance0",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 598,
                                "src": "3796:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 694,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3788:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint112_$",
                                "typeString": "type(uint112)"
                              },
                              "typeName": {
                                "id": 693,
                                "name": "uint112",
                                "nodeType": "ElementaryTypeName",
                                "src": "3788:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 696,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3788:17:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "src": "3777:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint112",
                            "typeString": "uint112"
                          }
                        },
                        "id": 698,
                        "nodeType": "ExpressionStatement",
                        "src": "3777:28:1"
                      },
                      {
                        "expression": {
                          "id": 704,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 699,
                            "name": "reserve1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 246,
                            "src": "3811:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 702,
                                "name": "balance1",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 610,
                                "src": "3830:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 701,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "3822:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_uint112_$",
                                "typeString": "type(uint112)"
                              },
                              "typeName": {
                                "id": 700,
                                "name": "uint112",
                                "nodeType": "ElementaryTypeName",
                                "src": "3822:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 703,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3822:17:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint112",
                              "typeString": "uint112"
                            }
                          },
                          "src": "3811:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint112",
                            "typeString": "uint112"
                          }
                        },
                        "id": 705,
                        "nodeType": "ExpressionStatement",
                        "src": "3811:28:1"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 707,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3855:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 708,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3859:6:1",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3855:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 709,
                              "name": "amount0In",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 622,
                              "src": "3867:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 710,
                              "name": "amount1In",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 638,
                              "src": "3878:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 711,
                              "name": "amount0Out",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 502,
                              "src": "3889:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 712,
                              "name": "amount1Out",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 504,
                              "src": "3901:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 713,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 506,
                              "src": "3913:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 706,
                            "name": "Swap",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 500,
                            "src": "3850:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_address_$returns$__$",
                              "typeString": "function (address,uint256,uint256,uint256,uint256,address)"
                            }
                          },
                          "id": 714,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3850:66:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 715,
                        "nodeType": "EmitStatement",
                        "src": "3845:71:1"
                      }
                    ]
                  },
                  "functionSelector": "6d9a640a",
                  "id": 717,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "swap",
                  "nameLocation": "2504:4:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 507,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 502,
                        "mutability": "mutable",
                        "name": "amount0Out",
                        "nameLocation": "2517:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 717,
                        "src": "2509:18:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 501,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2509:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 504,
                        "mutability": "mutable",
                        "name": "amount1Out",
                        "nameLocation": "2537:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 717,
                        "src": "2529:18:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 503,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2529:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 506,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "2557:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 717,
                        "src": "2549:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 505,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2549:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2508:52:1"
                  },
                  "returnParameters": {
                    "id": 508,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2568:0:1"
                  },
                  "scope": 718,
                  "src": "2495:1424:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 719,
              "src": "337:3584:1",
              "usedErrors": [],
              "usedEvents": [
                265,
                500
              ]
            }
          ],
          "src": "32:3889:1"
        }
      }
    },
    "contracts": {
      "contracts/MockERC20.sol": {
        "MockERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "_name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "_symbol",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "_initialSupply",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockERC20.sol\":\"MockERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MockERC20.sol\":{\"keccak256\":\"0xd422592b16b8ff2c67d223001544ac4940b0dcc1cbba3e3363b9b1ec53e1f0ff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8762d5b713bf636f44ec33dbe9188c31b0ac01af569edaa501f659b08556ccc\",\"dweb:/ipfs/QmW7ynPnsRJigXp3JQBEUM8wgN19qthNyrYz2LK5sqL3gd\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 136/65728 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 6341\n// Code size = 21862 bytes\n\n      : @0 (gas: 1)\n     0: jump @14 if a0 == a1\n      : @1 (gas: 9)\n     3: a3 = a1 << 0x20\n     6: a3 = a3 >> 0x20\n     9: a4 = a0 << 0x20\n    12: a4 = a4 >> 0x20\n    15: a4 = a4 + a2\n    18: a3 = a3 - a4\n    21: a4 = a2 << 0x1\n    24: a4 = -a4\n    26: jump @7 if a4 >=u a3\n      : @2 (gas: 1)\n    29: jump @11 if a0 >=u a1\n      : @3 (gas: 1)\n    32: jump @14 if a2 == 0\n      : @4 (gas: 3)\n    35: a2 = a2 + a0\n    38: a3 = a0\n    40: fallthrough\n      : @5 (gas: 6)\n    41: a4 = u8 [a1]\n    43: a1 = a1 + 0x1\n    46: a5 = a3 + 0x1\n    49: u8 [a3] = a4\n    51: a3 = a5\n    53: jump @5 if a5 != a2\n      : @6 (gas: 1)\n    56: jump @14\n      : @7 (gas: 1)\n    58: jump @14 if a2 == 0\n      : @8 (gas: 3)\n    61: a2 = a2 + a0\n    64: a3 = a0\n    66: fallthrough\n      : @9 (gas: 6)\n    67: a4 = u8 [a1]\n    69: a1 = a1 + 0x1\n    72: a5 = a3 + 0x1\n    75: u8 [a3] = a4\n    77: a3 = a5\n    79: jump @9 if a5 != a2\n      : @10 (gas: 1)\n    82: jump @14\n      : @11 (gas: 1)\n    84: jump @14 if a2 == 0\n      : @12 (gas: 2)\n    87: i32 a3 = a2 + 0xffffffffffffffff\n    90: fallthrough\n      : @13 (gas: 7)\n    91: a4 = a1 + a3\n    94: a4 = u8 [a4]\n    96: a2 = a2 + 0xffffffffffffffff\n    99: a5 = a0 + a3\n   102: u8 [a5] = a4\n   104: i32 a3 = a3 + 0xffffffffffffffff\n   107: jump @13 if a2 != 0\n      : @14 (gas: 1)\n   110: ret\n      : @15 (gas: 2)\n   112: a1 = i32 [0x20090]\n   117: jump @216 if a1 == 0\n      : @16 (gas: 4)\n   121: a0 = 0x300c0\n   126: i32 a0 = a0 + 0\n   128: ecalli 8 // 'set_immutable_data'\n   130: jump @216\n      : @17 (gas: 8)\n   133: sp = sp + 0xfffffffffffffff0\n   136: u64 [sp + 0x8] = ra\n   139: u64 [sp] = s0\n   141: a2 = a1\n   143: s0 = a0\n   145: a1 = 0x20\n   148: a0 = a2\n   150: ra = 2, jump @26\n      : @18 [@dyn 1] (gas: 100)\n   155: a1 = u8 [a0 + 0x1]\n   158: a2 = u8 [a0]\n   160: a3 = u8 [a0 + 0x2]\n   163: a4 = u8 [a0 + 0x3]\n   166: a1 = a1 << 0x8\n   169: a1 = a1 | a2\n   172: a3 = a3 << 0x10\n   175: a4 = a4 << 0x18\n   178: a3 = a3 | a4\n   181: a1 = a1 | a3\n   184: a2 = u8 [a0 + 0x5]\n   187: a3 = u8 [a0 + 0x4]\n   190: a4 = u8 [a0 + 0x6]\n   193: a5 = u8 [a0 + 0x7]\n   196: a2 = a2 << 0x8\n   199: a2 = a2 | a3\n   202: a4 = a4 << 0x10\n   205: a5 = a5 << 0x18\n   208: a4 = a4 | a5\n   211: a2 = a2 | a4\n   214: a2 = a2 << 0x20\n   217: t0 = a2 | a1\n   220: a2 = u8 [a0 + 0x9]\n   223: a3 = u8 [a0 + 0x8]\n   226: a4 = u8 [a0 + 0xa]\n   229: a5 = u8 [a0 + 0xb]\n   232: a2 = a2 << 0x8\n   235: a2 = a2 | a3\n   238: a4 = a4 << 0x10\n   241: a5 = a5 << 0x18\n   244: a4 = a4 | a5\n   247: a2 = a2 | a4\n   250: a3 = u8 [a0 + 0xd]\n   253: a4 = u8 [a0 + 0xc]\n   256: a5 = u8 [a0 + 0xe]\n   259: a1 = u8 [a0 + 0xf]\n   262: a3 = a3 << 0x8\n   265: a3 = a3 | a4\n   268: a5 = a5 << 0x10\n   271: a1 = a1 << 0x18\n   274: a1 = a1 | a5\n   277: a1 = a1 | a3\n   280: a1 = a1 << 0x20\n   283: t1 = a1 | a2\n   286: a1 = u8 [a0 + 0x11]\n   289: a3 = u8 [a0 + 0x10]\n   292: a4 = u8 [a0 + 0x12]\n   295: a5 = u8 [a0 + 0x13]\n   298: a1 = a1 << 0x8\n   301: a1 = a1 | a3\n   304: a4 = a4 << 0x10\n   307: a5 = a5 << 0x18\n   310: a4 = a4 | a5\n   313: a1 = a1 | a4\n   316: a3 = u8 [a0 + 0x15]\n   319: a4 = u8 [a0 + 0x14]\n   322: a5 = u8 [a0 + 0x16]\n   325: a2 = u8 [a0 + 0x17]\n   328: a3 = a3 << 0x8\n   331: a3 = a3 | a4\n   334: a5 = a5 << 0x10\n   337: a2 = a2 << 0x18\n   340: a2 = a2 | a5\n   343: a2 = a2 | a3\n   346: a2 = a2 << 0x20\n   349: a3 = a2 | a1\n   352: a1 = u8 [a0 + 0x19]\n   355: a2 = u8 [a0 + 0x18]\n   358: a4 = u8 [a0 + 0x1a]\n   361: a5 = u8 [a0 + 0x1b]\n   364: a1 = a1 << 0x8\n   367: a1 = a1 | a2\n   370: a4 = a4 << 0x10\n   373: a5 = a5 << 0x18\n   376: a4 = a4 | a5\n   379: a1 = a1 | a4\n   382: a2 = u8 [a0 + 0x1d]\n   385: a4 = u8 [a0 + 0x1c]\n   388: a5 = u8 [a0 + 0x1e]\n   391: a0 = u8 [a0 + 0x1f]\n   394: a2 = a2 << 0x8\n   397: a2 = a2 | a4\n   400: a5 = a5 << 0x10\n   403: a0 = a0 << 0x18\n   406: a0 = a0 | a5\n   409: a0 = a0 | a2\n   412: a0 = a0 << 0x20\n   415: a0 = a0 | a1\n   418: a0 = reverse a0\n   420: a1 = reverse a3\n   422: a2 = reverse t1\n   424: a3 = reverse t0\n   426: u64 [s0 + 0x18] = a3\n   429: u64 [s0 + 0x10] = a2\n   432: u64 [s0 + 0x8] = a1\n   435: u64 [s0] = a0\n   437: ra = u64 [sp + 0x8]\n   440: s0 = u64 [sp]\n   442: sp = sp + 0x10\n   445: ret\n      : @19 (gas: 12)\n   447: sp = sp + 0xffffffffffffffd8\n   450: u64 [sp + 0x20] = ra\n   453: u64 [sp + 0x18] = s0\n   456: u64 [sp + 0x10] = s1\n   459: a2 = u64 [a1]\n   461: u64 [sp + 0x8] = a2\n   464: a2 = u64 [a1 + 0x8]\n   467: u64 [sp] = a2\n   469: s0 = u64 [a1 + 0x10]\n   472: s1 = u64 [a1 + 0x18]\n   475: a1 = 0x20\n   478: ra = 4, jump @26\n      : @20 [@dyn 2] (gas: 71)\n   483: a1 = reverse s1\n   485: a2 = reverse s0\n   487: a3 = u64 [sp]\n   489: a3 = reverse a3\n   491: a4 = u64 [sp + 0x8]\n   494: a4 = reverse a4\n   496: u8 [a0 + 0x18] = a4\n   499: u8 [a0 + 0x10] = a3\n   502: u8 [a0 + 0x8] = a2\n   505: u8 [a0] = a1\n   507: a5 = a4 >> 0x38\n   510: u8 [a0 + 0x1f] = a5\n   513: a5 = a4 >> 0x30\n   516: u8 [a0 + 0x1e] = a5\n   519: a5 = a4 >> 0x28\n   522: u8 [a0 + 0x1d] = a5\n   525: a5 = a4 >> 0x20\n   528: u8 [a0 + 0x1c] = a5\n   531: a5 = a4 >> 0x18\n   534: u8 [a0 + 0x1b] = a5\n   537: a5 = a4 >> 0x10\n   540: u8 [a0 + 0x1a] = a5\n   543: a4 = a4 >> 0x8\n   546: u8 [a0 + 0x19] = a4\n   549: a4 = a3 >> 0x38\n   552: u8 [a0 + 0x17] = a4\n   555: a4 = a3 >> 0x30\n   558: u8 [a0 + 0x16] = a4\n   561: a4 = a3 >> 0x28\n   564: u8 [a0 + 0x15] = a4\n   567: a4 = a3 >> 0x20\n   570: u8 [a0 + 0x14] = a4\n   573: a4 = a3 >> 0x18\n   576: u8 [a0 + 0x13] = a4\n   579: a4 = a3 >> 0x10\n   582: u8 [a0 + 0x12] = a4\n   585: a3 = a3 >> 0x8\n   588: u8 [a0 + 0x11] = a3\n   591: a3 = a2 >> 0x38\n   594: u8 [a0 + 0xf] = a3\n   597: a3 = a2 >> 0x30\n   600: u8 [a0 + 0xe] = a3\n   603: a3 = a2 >> 0x28\n   606: u8 [a0 + 0xd] = a3\n   609: a3 = a2 >> 0x20\n   612: u8 [a0 + 0xc] = a3\n   615: a3 = a2 >> 0x18\n   618: u8 [a0 + 0xb] = a3\n   621: a3 = a2 >> 0x10\n   624: u8 [a0 + 0xa] = a3\n   627: a2 = a2 >> 0x8\n   630: u8 [a0 + 0x9] = a2\n   633: a2 = a1 >> 0x38\n   636: u8 [a0 + 0x7] = a2\n   639: a2 = a1 >> 0x30\n   642: u8 [a0 + 0x6] = a2\n   645: a2 = a1 >> 0x28\n   648: u8 [a0 + 0x5] = a2\n   651: a2 = a1 >> 0x20\n   654: u8 [a0 + 0x4] = a2\n   657: a2 = a1 >> 0x18\n   660: u8 [a0 + 0x3] = a2\n   663: a2 = a1 >> 0x10\n   666: u8 [a0 + 0x2] = a2\n   669: a1 = a1 >> 0x8\n   672: u8 [a0 + 0x1] = a1\n   675: ra = u64 [sp + 0x20]\n   678: s0 = u64 [sp + 0x18]\n   681: s1 = u64 [sp + 0x10]\n   684: sp = sp + 0x28\n   687: ret\n      : @21 (gas: 48)\n   689: sp = sp + 0xffffffffffffffa0\n   692: u64 [sp + 0x58] = ra\n   695: u64 [sp + 0x50] = s0\n   698: u64 [sp + 0x48] = s1\n   701: s0 = sp + 0x60\n   704: sp = sp & 0xffffffffffffffe0\n   707: s1 = a0\n   709: a0 = u64 [a1 + 0x18]\n   712: a2 = u64 [a1 + 0x10]\n   715: a3 = u64 [a1 + 0x8]\n   718: a1 = u64 [a1]\n   720: a0 = reverse a0\n   722: a2 = reverse a2\n   724: a3 = reverse a3\n   726: a1 = reverse a1\n   728: u64 [sp + 0x18] = a1\n   731: u64 [sp + 0x10] = a3\n   734: u64 [sp + 0x8] = a2\n   737: u64 [sp] = a0\n   739: u64 [sp + 56] = 0\n   742: u64 [sp + 48] = 0\n   745: u64 [sp + 40] = 0\n   748: u64 [sp + 32] = 0\n   751: u32 [sp + 64] = 0x20\n   755: i32 a1 = sp + 0\n   757: i32 a3 = sp + 0x20\n   760: i32 a4 = sp + 0x40\n   763: a2 = 0xffffffffffffffff\n   766: a0 = 0\n   768: ecalli 5 // 'get_storage'\n   770: a0 = u64 [sp + 0x38]\n   773: a1 = u64 [sp + 0x30]\n   776: a2 = u64 [sp + 0x28]\n   779: a3 = u64 [sp + 0x20]\n   782: a0 = reverse a0\n   784: a1 = reverse a1\n   786: a2 = reverse a2\n   788: a3 = reverse a3\n   790: u64 [s1 + 0x18] = a3\n   793: u64 [s1 + 0x10] = a2\n   796: u64 [s1 + 0x8] = a1\n   799: u64 [s1] = a0\n   801: sp = s0 + 0xffffffffffffffa0\n   804: ra = u64 [sp + 0x58]\n   807: s0 = u64 [sp + 0x50]\n   810: s1 = u64 [sp + 0x48]\n   813: sp = sp + 0x60\n   816: ret\n      : @22 (gas: 40)\n   818: sp = sp + 0xffffffffffffffa0\n   821: u64 [sp + 0x58] = ra\n   824: u64 [sp + 0x50] = s0\n   827: s0 = sp + 0x60\n   830: sp = sp & 0xffffffffffffffe0\n   833: t0 = u64 [a0]\n   835: a3 = u64 [a0 + 0x8]\n   838: a4 = u64 [a0 + 0x10]\n   841: a0 = u64 [a0 + 0x18]\n   844: t1 = u64 [a1]\n   846: a2 = u64 [a1 + 0x8]\n   849: a5 = u64 [a1 + 0x10]\n   852: a1 = u64 [a1 + 0x18]\n   855: t2 = reverse a0\n   857: a4 = reverse a4\n   859: a3 = reverse a3\n   861: a0 = reverse t0\n   863: t0 = reverse a1\n   865: a5 = reverse a5\n   867: a2 = reverse a2\n   869: a1 = reverse t1\n   871: u64 [sp + 0x18] = a0\n   874: u64 [sp + 0x10] = a3\n   877: u64 [sp + 0x8] = a4\n   880: u64 [sp] = t2\n   882: u64 [sp + 0x38] = a1\n   885: u64 [sp + 0x30] = a2\n   888: u64 [sp + 0x28] = a5\n   891: u64 [sp + 0x20] = t0\n   894: i32 a1 = sp + 0\n   896: i32 a3 = sp + 0x20\n   899: a2 = 0xffffffffffffffff\n   902: a4 = 0x20\n   905: a0 = 0\n   907: ecalli 9 // 'set_storage'\n   909: sp = s0 + 0xffffffffffffffa0\n   912: ra = u64 [sp + 0x58]\n   915: s0 = u64 [sp + 0x50]\n   918: sp = sp + 0x60\n   921: ret\n      : @23 (gas: 33)\n   923: sp = sp + 0xffffffffffffff20\n   927: u64 [sp + 0xd8] = ra\n   931: u64 [sp + 0xd0] = s0\n   935: u64 [sp + 0xc8] = s1\n   939: s0 = sp + 0xe0\n   943: sp = sp & 0xffffffffffffffe0\n   946: a5 = u64 [a4]\n   948: u64 [sp + 0x40] = a5\n   951: a5 = u64 [a4 + 0x8]\n   954: u64 [sp + 0x48] = a5\n   957: a5 = u64 [a4 + 0x10]\n   960: u64 [sp + 0x50] = a5\n   963: a4 = u64 [a4 + 0x18]\n   966: u64 [sp + 0x58] = a4\n   969: t0 = 0x6\n   972: a4 = u64 [a3]\n   974: u64 [sp + 0x18] = a4\n   977: a4 = u64 [a3 + 0x8]\n   980: u64 [sp + 0x20] = a4\n   983: a4 = u64 [a3 + 0x10]\n   986: u64 [sp + 0x28] = a4\n   989: a3 = u64 [a3 + 0x18]\n   992: u64 [sp + 0x30] = a3\n   995: s1 = u64 [a2]\n   997: a3 = u64 [a2 + 0x8]\n  1000: u64 [sp] = a3\n  1002: a3 = u64 [a2 + 0x10]\n  1005: u64 [sp + 0x8] = a3\n  1008: a2 = u64 [a2 + 0x18]\n  1011: u64 [sp + 0x10] = a2\n  1014: u64 [sp + 56] = 0x20\n  1018: ra = 0x8\n  1021: jump @26\n      : @24 [@dyn 3] (gas: 2)\n  1024: u64 [sp + 0x38] = a1\n  1027: ra = 8, jump @26\n      : @25 [@dyn 4] (gas: 46)\n  1032: a1 = reverse s1\n  1034: u64 [sp + 0x78] = a1\n  1037: a1 = u64 [sp]\n  1039: a1 = reverse a1\n  1041: u64 [sp + 0x70] = a1\n  1044: a1 = u64 [sp + 0x8]\n  1047: a1 = reverse a1\n  1049: u64 [sp + 0x68] = a1\n  1052: a1 = u64 [sp + 0x10]\n  1055: a1 = reverse a1\n  1057: u64 [sp + 0x60] = a1\n  1060: a1 = u64 [sp + 0x18]\n  1063: a1 = reverse a1\n  1065: u64 [sp + 0x98] = a1\n  1069: a1 = u64 [sp + 0x20]\n  1072: a1 = reverse a1\n  1074: u64 [sp + 0x90] = a1\n  1078: a1 = u64 [sp + 0x28]\n  1081: a1 = reverse a1\n  1083: u64 [sp + 0x88] = a1\n  1087: a1 = u64 [sp + 0x30]\n  1090: a1 = reverse a1\n  1092: u64 [sp + 0x80] = a1\n  1096: a1 = u64 [sp + 0x40]\n  1099: a1 = reverse a1\n  1101: u64 [sp + 0xb8] = a1\n  1105: a1 = u64 [sp + 0x48]\n  1108: a1 = reverse a1\n  1110: u64 [sp + 0xb0] = a1\n  1114: a1 = u64 [sp + 0x50]\n  1117: a1 = reverse a1\n  1119: u64 [sp + 0xa8] = a1\n  1123: a1 = u64 [sp + 0x58]\n  1126: a1 = reverse a1\n  1128: u64 [sp + 0xa0] = a1\n  1132: i32 a2 = a0 + 0\n  1134: a3 = i32 [sp + 0x38]\n  1137: i32 a0 = sp + 0x60\n  1140: a1 = 0x3\n  1143: ecalli 4 // 'deposit_event'\n  1145: sp = s0 + 0xffffffffffffff20\n  1149: ra = u64 [sp + 0xd8]\n  1153: s0 = u64 [sp + 0xd0]\n  1157: s1 = u64 [sp + 0xc8]\n  1161: sp = sp + 0xe0\n  1165: ret\n      : @26 (gas: 2)\n  1167: i32 a2 = a0 >> 0x10\n  1170: jump @31 if a2 != 0\n      : @27 (gas: 4)\n  1173: a1 = a1 + a0\n  1176: i32 a1 = a1 + 0x1f\n  1179: a1 = a1 & 0xffffffffffffffe0\n  1182: jump @31 if a1 >u 65536\n      : @28 (gas: 3)\n  1188: a2 = 0x2008c\n  1193: a3 = i32 [0x2008c]\n  1198: jump @30 if a3 >=u a1\n      : @29 (gas: 2)\n  1201: u32 [0x2008c] = a1\n  1206: fallthrough\n      : @30 (gas: 4)\n  1207: a1 = 0x200a0\n  1212: i32 a0 = a0 + 0\n  1214: a0 = a0 + a1\n  1217: ret\n      : @31 (gas: 1)\n  1219: trap\n      : @32 (gas: 6)\n  1220: sp = sp + 0xfffffffffffffff0\n  1223: u64 [sp + 0x8] = ra\n  1226: u64 [sp] = s0\n  1228: s0 = a0 & 0x1\n  1231: ecalli 2 // 'call_data_size'\n  1233: fallthrough\n      : @33 (gas: 2)\n  1234: u32 [0x20088] = a0\n  1239: jump @35 if s0 == 0\n      : @34 (gas: 1)\n  1242: ra = 10, jump @36\n      : @35 [@dyn 5] (gas: 20)\n  1246: ra = 0xc\n  1249: sp = sp + 0xfffffffffffff808\n  1253: a0 = sp + 0x700\n  1257: u64 [a0 + 0xf0] = ra\n  1261: u64 [a0 + 0xe8] = s0\n  1265: u64 [a0 + 0xe0] = s1\n  1269: s0 = sp + 0x7f8\n  1273: sp = sp + 0xfffffffffffff800\n  1277: sp = sp + 0xfffffffffffffb58\n  1281: sp = sp & 0xffffffffffffffe0\n  1284: s1 = sp\n  1286: a2 = s1 + 0x1030\n  1290: u64 [a2 + 296] = 0\n  1294: u64 [a2 + 288] = 0\n  1298: u64 [a2 + 272] = 0x80\n  1304: a0 = 0x40\n  1307: a1 = s1 + 0x1140\n  1311: u64 [a2 + 280] = 0\n  1315: ra = 0xca\n  1319: jump @19\n      : @36 [@dyn 6] (gas: 15)\n  1322: sp = sp + 0xfffffffffffffe10\n  1326: u64 [sp + 0x1e8] = ra\n  1330: u64 [sp + 0x1e0] = s0\n  1334: u64 [sp + 0x1d8] = s1\n  1338: s0 = sp + 0x1f0\n  1342: sp = sp + 0xfffffffffffff870\n  1346: sp = sp & 0xffffffffffffffe0\n  1349: s1 = sp\n  1351: u64 [s1 + 1688] = 0\n  1355: u64 [s1 + 1680] = 0\n  1359: u64 [s1 + 1664] = 0x80\n  1365: a0 = 0x40\n  1368: a1 = s1 + 0x680\n  1372: u64 [s1 + 1672] = 0\n  1376: ra = 14, jump @19\n      : @37 [@dyn 7] (gas: 7)\n  1381: u64 [s1 + 1720] = 0\n  1385: u64 [s1 + 1712] = 0\n  1389: u64 [s1 + 1704] = 0\n  1393: u64 [s1 + 1696] = 0\n  1397: i32 a0 = s1 + 0x6a0\n  1401: ecalli 10 // 'value_transferred'\n  1403: fallthrough\n      : @38 (gas: 9)\n  1404: a4 = s1 + 0x600\n  1408: a0 = u64 [a4 + 0xb0]\n  1412: a1 = u64 [a4 + 0xb8]\n  1416: a2 = u64 [a4 + 0xa8]\n  1420: a3 = u64 [a4 + 0xa0]\n  1424: a1 = a1 | a2\n  1427: a0 = a0 | a3\n  1430: a0 = a0 | a1\n  1433: jump @40 if a0 == 0\n      : @39 (gas: 1)\n  1436: jump @185\n      : @40 (gas: 9)\n  1439: a2 = u32 [0x20088]\n  1444: u64 [s1 + 1624] = 0\n  1448: u64 [s1 + 1616] = 0\n  1452: u64 [s1 + 1608] = 0\n  1456: a0 = s1 + 0x660\n  1460: a1 = s1 + 0x640\n  1464: u64 [s1 + 0x130] = a2\n  1468: u64 [s1 + 0x640] = a2\n  1472: ra = 16, jump @596\n      : @41 [@dyn 8] (gas: 18)\n  1477: a4 = s1 + 0x600\n  1481: a3 = u64 [a4 + 0x78]\n  1484: a2 = u64 [a4 + 0x70]\n  1487: a0 = u64 [a4 + 0x68]\n  1490: a1 = u64 [a4 + 0x60]\n  1493: a4 = s1 + 0x100\n  1497: u64 [a4 + 0x28] = a0\n  1500: u64 [a4 + 0x18] = a3\n  1503: a0 = a0 | a3\n  1506: u64 [a4 + 0x38] = a1\n  1509: a1 = a1 | a2\n  1512: a1 = a1 | a0\n  1515: a1 = a1 >> 0x20\n  1518: u64 [a4 + 0x20] = a2\n  1521: a0 = a0 | a2\n  1524: a0 = a0 << 0x20\n  1527: a0 = a0 | a1\n  1530: jump @43 if a0 == 0\n      : @42 (gas: 1)\n  1533: jump @184\n      : @43 (gas: 3)\n  1536: a0 = u64 [s1 + 0x138]\n  1540: a1 = u64 [s1 + 0x130]\n  1544: ra = 18, jump @26\n      : @44 [@dyn 9] (gas: 5)\n  1549: i32 a0 = a0 + 0\n  1551: a1 = i32 [s1 + 0x130]\n  1555: a2 = 0\n  1557: ecalli 0 // 'call_data_copy'\n  1558: fallthrough\n      : @45 (gas: 2)\n  1559: a1 = u64 [s1 + 0x130]\n  1563: jump @47 if a1 >u 95\n      : @46 (gas: 1)\n  1567: jump @186\n      : @47 (gas: 3)\n  1570: a0 = s1 + 0x620\n  1574: a1 = u64 [s1 + 0x138]\n  1578: ra = 20, jump @17\n      : @48 [@dyn 10] (gas: 8)\n  1583: a0 = u64 [s1 + 0x638]\n  1587: t0 = u64 [s1 + 0x630]\n  1591: a4 = u64 [s1 + 0x628]\n  1595: u64 [s1 + 0x110] = a0\n  1599: a2 = t0 | a0\n  1602: a3 = a4 <u 0x1\n  1605: a3 = 0 if a2 != 0\n  1607: jump @50 if a3 != 0\n      : @49 (gas: 1)\n  1610: jump @187\n      : @50 (gas: 50)\n  1613: a3 = u64 [s1 + 0x620]\n  1617: t1 = u64 [s1 + 0x138]\n  1621: t2 = u64 [s1 + 0x130]\n  1625: t2 = t2 + t1\n  1628: a1 = t2 <u t1\n  1631: t1 = t1 + a3\n  1634: u64 [s1 + 0x130] = t1\n  1638: a3 = t1 <u a3\n  1641: a2 = u64 [s1 + 0x128]\n  1645: a0 = a4 + a2\n  1648: a5 = a2\n  1650: t1 = a0 + a3\n  1653: a2 = t1 ^ a4\n  1656: a4 = t1 <u a4\n  1659: a4 = a3 if a2 == 0\n  1662: a2 = a5\n  1664: a5 = a5 + a1\n  1667: a2 = a5 <u a2\n  1670: a2 = a1 if a1 == 0\n  1673: a1 = u64 [s1 + 0x120]\n  1677: a3 = t0 + a1\n  1680: ra = a3 <u t0\n  1683: a0 = u64 [s1 + 0x118]\n  1687: t0 = u64 [s1 + 0x110]\n  1691: t0 = t0 + a0\n  1694: ra = ra + t0\n  1697: t0 = a1 + a2\n  1700: a4 = a4 + a3\n  1703: a2 = a4 <u a3\n  1706: a3 = ra + a2\n  1709: a1 = t0 <u a1\n  1712: a1 = a1 + a0\n  1715: u64 [s1 + 0x110] = t2\n  1719: u64 [s1 + 0x5c0] = t2\n  1723: u64 [s1 + 0x108] = a5\n  1727: u64 [s1 + 0x5c8] = a5\n  1731: a0 = u64 [s1 + 0x130]\n  1735: a5 = s1 + 0x500\n  1739: u64 [a5 + 0xe0] = a0\n  1743: u64 [s1 + 0x130] = t0\n  1747: u64 [s1 + 0x5d0] = t0\n  1751: u64 [s1 + 0x100] = a1\n  1755: u64 [a5 + 0xd8] = a1\n  1759: u64 [s1 + 0x5e8] = t1\n  1763: u64 [a5 + 0xf0] = a4\n  1767: a0 = s1 + 0x600\n  1771: a1 = s1 + 0x5e0\n  1775: a2 = s1 + 0x5c0\n  1779: u64 [a5 + 0xf8] = a3\n  1783: ra = 22, jump @607\n      : @51 [@dyn 11] (gas: 11)\n  1788: a3 = s1 + 0x100\n  1792: a0 = u64 [a3 + 0x20]\n  1795: a1 = u64 [a3 + 0x18]\n  1798: a1 = a1 | a0\n  1801: a0 = 0xffffffe0\n  1811: a2 = u64 [a3 + 0x38]\n  1814: a0 = a2 <u a0\n  1817: a2 = u64 [a3 + 0x28]\n  1820: a0 = 0 if a2 != 0\n  1822: a0 = 0 if a1 != 0\n  1824: jump @53 if a0 != 0\n      : @52 (gas: 1)\n  1827: jump @184\n      : @53 (gas: 14)\n  1830: u64 [s1 + 0xf8] = a1\n  1834: a1 = s1 + 0x600\n  1838: a0 = u64 [a1 + 0x18]\n  1841: u64 [s1 + 0xc0] = a0\n  1845: a0 = u64 [a1 + 0x10]\n  1848: u64 [s1 + 0xb8] = a0\n  1852: a0 = u64 [a1 + 0x8]\n  1855: u64 [s1 + 0xc8] = a0\n  1859: a0 = u64 [a1]\n  1861: u64 [s1 + 0xd0] = a0\n  1865: a0 = u64 [s1 + 0x138]\n  1869: i32 a1 = a0 + 0x20\n  1872: a0 = s1 + 0x5a0\n  1876: ra = 24, jump @17\n      : @54 [@dyn 12] (gas: 7)\n  1881: t0 = u64 [s1 + 0x5b8]\n  1885: a0 = u64 [s1 + 0x5b0]\n  1889: a4 = u64 [s1 + 0x5a8]\n  1893: a2 = a0 | t0\n  1896: a3 = a4 <u 0x1\n  1899: a3 = 0 if a2 != 0\n  1901: jump @56 if a3 != 0\n      : @55 (gas: 1)\n  1904: jump @188\n      : @56 (gas: 35)\n  1907: a3 = u64 [s1 + 0x5a0]\n  1911: a2 = u64 [s1 + 0x138]\n  1915: a2 = a2 + a3\n  1918: a5 = a2 <u a3\n  1921: a3 = u64 [s1 + 0x128]\n  1925: a3 = a3 + a4\n  1928: a3 = a3 + a5\n  1931: a1 = a3 ^ a4\n  1934: a4 = a3 <u a4\n  1937: a4 = a5 if a1 == 0\n  1940: a1 = u64 [s1 + 0x118]\n  1944: t0 = t0 + a1\n  1947: a1 = u64 [s1 + 0x120]\n  1951: a1 = a1 + a0\n  1954: a0 = a1 <u a0\n  1957: a0 = a0 + t0\n  1960: a4 = a4 + a1\n  1963: a1 = a4 <u a1\n  1966: a5 = a0 + a1\n  1969: a0 = u64 [s1 + 0x110]\n  1973: u64 [s1 + 0x540] = a0\n  1977: a0 = u64 [s1 + 0x108]\n  1981: u64 [s1 + 0x548] = a0\n  1985: u64 [s1 + 0x560] = a2\n  1989: a0 = u64 [s1 + 0x130]\n  1993: u64 [s1 + 0x550] = a0\n  1997: a0 = u64 [s1 + 0x100]\n  2001: u64 [s1 + 0x558] = a0\n  2005: u64 [s1 + 0x568] = a3\n  2009: u64 [s1 + 0x570] = a4\n  2013: a0 = s1 + 0x580\n  2017: a1 = s1 + 0x560\n  2021: a2 = s1 + 0x540\n  2025: u64 [s1 + 0x578] = a5\n  2029: ra = 26, jump @607\n      : @57 [@dyn 13] (gas: 11)\n  2034: a0 = sp + 0xffffffffffffffe0\n  2037: a1 = a0 & 0xffffffffffffffe0\n  2040: sp = a1\n  2042: a0 = 0xffffffc0\n  2052: a2 = u64 [s1 + 0x138]\n  2056: a0 = a2 <u a0\n  2059: a2 = u64 [s1 + 0x128]\n  2063: a0 = 0 if a2 != 0\n  2065: a2 = u64 [s1 + 0xf8]\n  2069: a0 = 0 if a2 != 0\n  2071: jump @59 if a0 != 0\n      : @58 (gas: 1)\n  2074: jump @184\n      : @59 (gas: 13)\n  2077: a0 = u64 [s1 + 0x598]\n  2081: u64 [s1 + 0x90] = a0\n  2085: a0 = u64 [s1 + 0x590]\n  2089: u64 [s1 + 0x98] = a0\n  2093: a0 = u64 [s1 + 0x588]\n  2097: u64 [s1 + 0xa0] = a0\n  2101: a0 = u64 [s1 + 0x580]\n  2105: u64 [s1 + 0xa8] = a0\n  2109: u64 [s1 + 0x88] = a1\n  2113: a0 = u64 [s1 + 0x138]\n  2117: i32 a1 = a0 + 0x40\n  2120: a0 = s1 + 0x520\n  2124: ra = 28, jump @17\n      : @60 [@dyn 14] (gas: 20)\n  2129: a1 = u64 [s1 + 0x530]\n  2133: a0 = u64 [s1 + 0x538]\n  2137: a2 = u64 [s1 + 0x520]\n  2141: a3 = u64 [s1 + 0x528]\n  2145: u64 [s1 + 0x68] = a1\n  2148: a4 = u64 [s1 + 0x88]\n  2152: u64 [a4 + 0x10] = a1\n  2155: u64 [s1 + 0x70] = a0\n  2158: u64 [a4 + 0x18] = a0\n  2161: u64 [s1 + 0x60] = a2\n  2164: u64 [a4] = a2\n  2166: u64 [s1 + 0x58] = a3\n  2169: u64 [a4 + 0x8] = a3\n  2172: u64 [s1 + 1752] = 0\n  2176: u64 [s1 + 1744] = 0\n  2180: u64 [s1 + 1736] = 0\n  2184: u64 [s1 + 1728] = 0x2\n  2189: a0 = s1 + 0x500\n  2193: a1 = s1 + 0x6c0\n  2197: ra = 30, jump @21\n      : @61 [@dyn 15] (gas: 19)\n  2202: a4 = s1 + 0x500\n  2206: a0 = u64 [a4]\n  2208: a1 = u64 [a4 + 0x8]\n  2211: a2 = u64 [a4 + 0x10]\n  2214: a3 = u64 [a4 + 0x18]\n  2217: a0 = a0 & 0xffffffffffffff00\n  2221: a0 = a0 | 0x12\n  2224: u64 [s1 + 1784] = 0\n  2228: u64 [s1 + 1776] = 0\n  2232: u64 [s1 + 1768] = 0\n  2236: u64 [s1 + 1760] = 0x2\n  2241: a4 = s1 + 0x700\n  2245: u64 [a4 + 0x18] = a3\n  2248: u64 [a4 + 0x10] = a2\n  2251: u64 [a4 + 0x8] = a1\n  2254: u64 [a4] = a0\n  2256: a0 = s1 + 0x6e0\n  2260: a1 = s1 + 0x700\n  2264: ra = 32, jump @22\n      : @62 [@dyn 16] (gas: 12)\n  2269: a1 = u64 [s1 + 0xd0]\n  2273: a4 = u64 [s1 + 0xb8]\n  2277: a0 = a1 | a4\n  2280: a2 = u64 [s1 + 0xc8]\n  2284: a3 = u64 [s1 + 0xc0]\n  2288: a2 = a2 | a3\n  2291: a0 = a0 | a2\n  2294: a0 = a0 >> 0x20\n  2297: a2 = a2 | a4\n  2300: a2 = a2 << 0x20\n  2303: a0 = a0 | a2\n  2306: jump @64 if a0 == 0\n      : @63 (gas: 1)\n  2309: jump @184\n      : @64 (gas: 2)\n  2312: a0 = s1 + 0x4e0\n  2316: ra = 34, jump @17\n      : @65 [@dyn 17] (gas: 17)\n  2321: a0 = s1 + 0x400\n  2325: a3 = u64 [a0 + 0xf8]\n  2329: a1 = u64 [a0 + 0xf0]\n  2333: a2 = u64 [a0 + 0xe8]\n  2337: a0 = a3 >u 0\n  2339: a4 = a1 >u 0\n  2341: a4 = a0 if a3 != 0\n  2344: u64 [s1 + 0xf0] = a2\n  2348: a0 = a2 >u 0\n  2350: u64 [s1 + 0x78] = a1\n  2353: u64 [s1 + 0xe8] = a3\n  2357: a1 = a1 | a3\n  2360: u64 [s1 + 0x50] = a0\n  2363: u64 [s1 + 0xb0] = a4\n  2367: u64 [s1 + 0xe0] = a1\n  2371: a0 = a4 if a1 != 0\n  2374: jump @67 if a0 == 0\n      : @66 (gas: 1)\n  2377: jump @189\n      : @67 (gas: 9)\n  2380: a0 = u64 [s1 + 0x4e0]\n  2384: u64 [s1 + 0x80] = a0\n  2388: u64 [s1 + 1848] = 0\n  2392: u64 [s1 + 1840] = 0\n  2396: u64 [s1 + 1832] = 0\n  2400: u64 [s1 + 1824] = 0\n  2404: a0 = s1 + 0x4c0\n  2408: a1 = s1 + 0x720\n  2412: ra = 36, jump @21\n      : @68 [@dyn 18] (gas: 6)\n  2417: a4 = s1 + 0x400\n  2421: a0 = u64 [a4 + 0xd0]\n  2425: a1 = u64 [a4 + 0xc8]\n  2429: a2 = u64 [a4 + 0xc0]\n  2433: a3 = u64 [a4 + 0xd8]\n  2437: t0 = 38, jump @705\n      : @69 [@dyn 19] (gas: 12)\n  2442: t0 = a2 <u 0x1\n  2445: ra = a1 & 0x7f\n  2448: t2 = a5 & a0\n  2451: a4 = a5 & t1\n  2454: ra = a1 if a2 != 0\n  2457: a1 = ra <u 0x20\n  2460: a5 = a5 & a3\n  2463: a2 = a1\n  2465: a2 = 0 if a4 != 0\n  2467: a0 = t2 | a5\n  2470: a2 = 0 if a0 != 0\n  2472: jump @71 if t0 == a2\n      : @70 (gas: 1)\n  2475: jump @195\n      : @71 (gas: 1)\n  2478: t0 = 40, jump @712\n      : @72 [@dyn 20] (gas: 4)\n  2483: a0 = u64 [s1 + 0x80]\n  2487: a0 = a0 <u 0x20\n  2490: u64 [s1 + 0xd8] = a0\n  2494: jump @81 if a3 == 0\n      : @73 (gas: 11)\n  2498: u64 [s1 + 0x110] = a4\n  2502: u64 [s1 + 0x118] = ra\n  2506: u64 [s1 + 0x120] = a5\n  2510: u64 [s1 + 0x130] = t2\n  2514: u64 [s1 + 1208] = 0\n  2518: u64 [s1 + 1200] = 0\n  2522: u64 [s1 + 1192] = 0\n  2526: a1 = s1 + 0x4a0\n  2530: u64 [s1 + 1184] = 0\n  2534: a0 = 0\n  2536: ra = 42, jump @19\n      : @74 [@dyn 21] (gas: 2)\n  2541: a1 = i32 [0x2008c]\n  2546: jump @76 if a1 >u 31\n      : @75 (gas: 2)\n  2550: u32 [0x2008c] = 0x20\n  2556: fallthrough\n      : @76 (gas: 87)\n  2557: a0 = sp + 0xffffffffffffffe0\n  2560: a2 = a0 & 0xffffffffffffffe0\n  2563: u64 [s1 + 0x128] = a2\n  2567: sp = a2\n  2569: a0 = 0x200a0\n  2574: i32 a0 = a0 + 0\n  2576: i32 a2 = a2 + 0\n  2578: a1 = 0x20\n  2581: ecalli 6 // 'hash_keccak_256'\n  2583: a0 = u64 [s1 + 0x80]\n  2587: a1 = a0 + 0x1f\n  2590: a0 = a1 <u a0\n  2593: a5 = u64 [s1 + 0xf0]\n  2597: a2 = a5 + a0\n  2600: a3 = a2 <u a5\n  2603: a3 = a0 if a0 == 0\n  2606: a4 = u64 [s1 + 0x78]\n  2609: a3 = a3 + a4\n  2612: u64 [s1 + 0x108] = a3\n  2616: a3 = a3 << 0x3b\n  2619: a4 = a2 >> 0x5\n  2622: a4 = a4 | a3\n  2625: a0 = u64 [s1 + 0x128]\n  2629: t1 = u64 [a0 + 0x18]\n  2632: a2 = a2 << 0x3b\n  2635: a3 = u64 [a0 + 0x10]\n  2638: a1 = a1 >> 0x5\n  2641: a0 = a1 | a2\n  2644: t2 = reverse t1\n  2646: a2 = reverse a3\n  2648: a1 = u64 [s1 + 0xd8]\n  2652: a1 = 0 if a5 != 0\n  2654: a3 = u64 [s1 + 0xe0]\n  2658: a1 = 0 if a3 != 0\n  2660: a4 = 0 if a1 != 0\n  2662: a0 = 0 if a1 != 0\n  2664: t0 = t2 + a0\n  2667: a0 = t0 <u t2\n  2670: a5 = a2 + a0\n  2673: a4 = a4 + a5\n  2676: u64 [s1 + 0x138] = a4\n  2680: a5 = a4 ^ a2\n  2683: a3 = a4 <u a2\n  2686: a3 = a0 if a5 == 0\n  2689: u64 [s1 + 0x100] = a3\n  2693: a0 = u64 [s1 + 0x118]\n  2697: ra = a0 + 0x1f\n  2700: a4 = ra <u a0\n  2703: a3 = u64 [s1 + 0x110]\n  2707: a0 = a3 + a4\n  2710: a5 = a0 <u a3\n  2713: a5 = a4 if a4 == 0\n  2716: t1 = u64 [s1 + 0x130]\n  2720: t1 = t1 + a5\n  2723: a4 = t1 << 0x3b\n  2726: a3 = a0 >> 0x5\n  2729: a3 = a3 | a4\n  2732: a0 = a0 << 0x3b\n  2735: a4 = ra >> 0x5\n  2738: a0 = a0 | a4\n  2741: a0 = a0 + t2\n  2744: u64 [s1 + 0x118] = a0\n  2748: a0 = a0 <u t2\n  2751: t2 = t0\n  2753: a4 = a2 + a0\n  2756: a4 = a4 + a3\n  2759: a3 = a4 ^ a2\n  2762: u64 [s1 + 0x110] = a4\n  2766: a2 = a4 <u a2\n  2769: a2 = a0 if a3 == 0\n  2772: a4 = u64 [s1 + 0x108]\n  2776: a0 = u64 [s1 + 0x78]\n  2779: a0 = a4 <u a0\n  2782: a3 = u64 [s1 + 0xe8]\n  2786: a0 = a0 + a3\n  2789: a3 = a4 >> 0x5\n  2792: a4 = a0 << 0x3b\n  2795: a3 = a3 | a4\n  2798: a4 = u64 [s1 + 0x128]\n  2802: t0 = u64 [a4]\n  2804: a4 = u64 [a4 + 0x8]\n  2807: a0 = a0 >> 0x5\n  2810: a3 = 0 if a1 != 0\n  2812: a0 = 0 if a1 != 0\n  2814: a1 = reverse a4\n  2816: a4 = reverse t0\n  2818: t0 = 44, jump @727\n      : @77 [@dyn 22] (gas: 25)\n  2823: t0 = a0 + a3\n  2826: a0 = u64 [s1 + 0x130]\n  2830: a0 = t1 <u a0\n  2833: a3 = u64 [s1 + 0x120]\n  2837: a0 = a0 + a3\n  2840: a3 = t1 >> 0x5\n  2843: a5 = a0 << 0x3b\n  2846: a3 = a3 | a5\n  2849: a0 = a0 >> 0x5\n  2852: a0 = a0 + a4\n  2855: a5 = s1 + 0x100\n  2859: a4 = u64 [a5 + 0x38]\n  2862: a3 = a3 + a1\n  2865: a1 = a3 <u a1\n  2868: a0 = a0 + a1\n  2871: a2 = a2 + a3\n  2874: u64 [a5 + 0x8] = a2\n  2877: a1 = a2 <u a3\n  2880: a0 = a0 + a1\n  2883: u64 [a5] = a0\n  2885: a0 = sp + 0xffffffffffffffe0\n  2888: t1 = a0 & 0xffffffffffffffe0\n  2891: sp = t1\n  2893: u64 [s1 + 0xf8] = t1\n  2897: fallthrough\n      : @78 (gas: 20)\n  2898: a0 = u64 [s1 + 0x118]\n  2902: a0 = t2 <u a0\n  2905: a2 = u64 [s1 + 0x110]\n  2909: a1 = a4 ^ a2\n  2912: a2 = a4 <u a2\n  2915: a2 = a0 if a1 == 0\n  2918: a5 = u64 [s1 + 0x108]\n  2922: a0 = ra <u a5\n  2925: a3 = u64 [s1 + 0x100]\n  2929: a1 = t0 ^ a3\n  2932: a3 = t0 <u a3\n  2935: a3 = a0 if a1 == 0\n  2938: a0 = ra ^ a5\n  2941: a0 = a0 | a1\n  2944: a3 = a2 if a0 == 0\n  2947: u64 [t1] = t2\n  2949: u64 [t1 + 0x8] = a4\n  2952: u64 [t1 + 0x10] = ra\n  2955: u64 [t1 + 0x18] = t0\n  2958: jump @81 if a3 == 0\n      : @79 (gas: 11)\n  2961: u64 [s1 + 1880] = 0\n  2965: u64 [s1 + 1872] = 0\n  2969: u64 [s1 + 1864] = 0\n  2973: u64 [s1 + 1856] = 0\n  2977: a1 = s1 + 0x740\n  2981: a0 = t1\n  2983: u64 [s1 + 0x130] = t2\n  2987: u64 [s1 + 0x138] = a4\n  2991: u64 [s1 + 0x128] = t0\n  2995: u64 [s1 + 0x120] = ra\n  2999: ra = 46, jump @22\n      : @80 [@dyn 23] (gas: 15)\n  3004: t1 = u64 [s1 + 0xf8]\n  3008: t0 = u64 [s1 + 0x128]\n  3012: a4 = u64 [s1 + 0x138]\n  3016: t2 = u64 [s1 + 0x130]\n  3020: t2 = t2 + 0x1\n  3023: a0 = t2 <u 0x1\n  3026: a4 = a4 + a0\n  3029: a0 = t2 | a4\n  3032: a0 = a0 <u 0x1\n  3035: a1 = u64 [s1 + 0x120]\n  3039: a0 = a0 + a1\n  3042: a1 = a0 <u a1\n  3045: t0 = t0 + a1\n  3048: ra = a0\n  3050: jump @78\n      : @81 (gas: 21)\n  3053: a0 = u64 [s1 + 0xd8]\n  3057: a0 = a0 ^ 0x1\n  3060: a5 = u64 [s1 + 0xf0]\n  3064: a1 = u64 [s1 + 0x50]\n  3067: a0 = a1 if a5 != 0\n  3070: a1 = u64 [s1 + 0xb0]\n  3074: a2 = u64 [s1 + 0xe0]\n  3078: a0 = a1 if a2 != 0\n  3081: t2 = u64 [s1 + 0xe8]\n  3085: a2 = a5 | t2\n  3088: a1 = u64 [s1 + 0x78]\n  3091: t1 = a1 >> 0x3f\n  3094: t2 = t2 << 0x1\n  3097: t0 = a5 >> 0x3f\n  3100: a3 = a1 << 0x1\n  3103: u64 [s1 + 0x50] = a3\n  3106: a3 = u64 [s1 + 0x80]\n  3110: ra = a3 >> 0x3f\n  3113: a5 = a5 << 0x1\n  3116: a4 = a3 << 0x1\n  3119: jump @91 if a0 == 0\n      : @82 (gas: 16)\n  3123: u64 [s1 + 0x18] = a2\n  3126: u64 [s1 + 0x38] = a5\n  3129: u64 [s1 + 0x40] = t0\n  3132: u64 [s1 + 0x20] = ra\n  3135: u64 [s1 + 0x28] = t2\n  3138: u64 [s1 + 0x30] = t1\n  3141: u64 [s1 + 0x48] = a4\n  3144: a3 = a3 & 0xffffffffffffffe0\n  3147: u64 [s1 + 0xb0] = a3\n  3151: u64 [s1 + 1144] = 0\n  3155: u64 [s1 + 1136] = 0\n  3159: u64 [s1 + 1128] = 0\n  3163: a1 = s1 + 0x460\n  3167: u64 [s1 + 1120] = 0\n  3171: a0 = 0\n  3173: ra = 48, jump @19\n      : @83 [@dyn 24] (gas: 7)\n  3178: a0 = sp + 0xffffffffffffffe0\n  3181: a0 = a0 & 0xffffffffffffffe0\n  3184: u64 [s1 + 0x110] = a0\n  3188: sp = a0\n  3190: a1 = 0x20\n  3193: a0 = 0\n  3195: ra = 50, jump @26\n      : @84 [@dyn 25] (gas: 35)\n  3200: a1 = sp + 0xffffffffffffffe0\n  3203: a1 = a1 & 0xffffffffffffffe0\n  3206: u64 [s1 + 0x108] = a1\n  3210: sp = a1\n  3212: i32 a0 = a0 + 0\n  3214: i32 a2 = a1 + 0\n  3216: a1 = 0x20\n  3219: ecalli 6 // 'hash_keccak_256'\n  3221: u64 [s1 + 312] = 0x20\n  3226: a5 = 0\n  3228: u64 [s1 + 304] = 0\n  3232: u64 [s1 + 296] = 0\n  3236: a4 = 0\n  3238: ra = 0\n  3240: u64 [s1 + 280] = 0\n  3244: u64 [s1 + 288] = 0\n  3248: a3 = u64 [s1 + 0x108]\n  3252: a0 = u64 [a3 + 0x18]\n  3255: a1 = u64 [a3 + 0x10]\n  3258: a2 = u64 [a3 + 0x8]\n  3261: t0 = u64 [a3]\n  3263: t1 = reverse a0\n  3265: a1 = reverse a1\n  3267: a3 = reverse a2\n  3269: a2 = reverse t0\n  3271: t0 = a2\n  3273: a0 = u64 [s1 + 0x110]\n  3277: u64 [a0 + 0x18] = a2\n  3280: u64 [s1 + 0xf0] = a3\n  3284: u64 [a0 + 0x10] = a3\n  3287: u64 [s1 + 0x108] = a1\n  3291: u64 [a0 + 0x8] = a1\n  3294: a3 = t1\n  3296: u64 [a0] = t1\n  3298: fallthrough\n      : @85 (gas: 25)\n  3299: t2 = t0\n  3301: t1 = a3\n  3303: a0 = u64 [s1 + 0xb0]\n  3307: u64 [s1 + 0x100] = a4\n  3311: a0 = a4 <u a0\n  3314: a4 = a0 ^ 0x1\n  3317: u64 [s1 + 0xf8] = ra\n  3321: a4 = 0x1 if ra != 0\n  3324: a0 = u64 [s1 + 0x120]\n  3328: a2 = u64 [s1 + 0x118]\n  3332: a0 = a0 | a2\n  3335: a4 = 0x1 if a0 != 0\n  3338: a1 = u64 [s1 + 0xd0]\n  3342: a0 = u64 [s1 + 0x138]\n  3346: a1 = a1 + a0\n  3349: a3 = u64 [s1 + 0xc8]\n  3353: t0 = a5\n  3355: a3 = a3 + a5\n  3358: a2 = u64 [s1 + 0xb8]\n  3362: a0 = u64 [s1 + 0x130]\n  3366: a2 = a2 + a0\n  3369: a0 = u64 [s1 + 0xc0]\n  3373: a5 = u64 [s1 + 0x128]\n  3377: a0 = a0 + a5\n  3380: jump @93 if a4 != 0\n      : @86 (gas: 23)\n  3384: a4 = u64 [s1 + 0x138]\n  3388: a4 = a1 <u a4\n  3391: ra = a3 + a4\n  3394: a3 = t0\n  3396: t0 = ra ^ t0\n  3399: a5 = ra <u a3\n  3402: a5 = a4 if t0 == 0\n  3405: a5 = a5 + a2\n  3408: t0 = a5 <u a2\n  3411: a4 = u64 [s1 + 0x130]\n  3415: a2 = a2 <u a4\n  3418: a0 = a0 + a2\n  3421: a0 = a0 + t0\n  3424: a2 = a1 | a5\n  3427: a0 = ra | a0\n  3430: a2 = a2 | a0\n  3433: a2 = a2 >> 0x20\n  3436: a0 = a0 | a5\n  3439: a0 = a0 << 0x20\n  3442: a0 = a0 | a2\n  3445: u64 [s1 + 0xe8] = t1\n  3449: u64 [s1 + 0xe0] = t2\n  3453: jump @88 if a0 == 0\n      : @87 (gas: 1)\n  3456: jump @184\n      : @88 (gas: 3)\n  3459: a0 = s1 + 0x1c0\n  3463: u64 [s1 + 0xd8] = a3\n  3467: ra = 52, jump @17\n      : @89 [@dyn 26] (gas: 12)\n  3472: a0 = u64 [s1 + 0x1d8]\n  3476: a1 = u64 [s1 + 0x1d0]\n  3480: a2 = u64 [s1 + 0x1c8]\n  3484: a3 = u64 [s1 + 0x1c0]\n  3488: a4 = s1 + 0x700\n  3492: u64 [a4 + 0x78] = a0\n  3495: u64 [a4 + 0x70] = a1\n  3498: u64 [a4 + 0x68] = a2\n  3501: u64 [a4 + 0x60] = a3\n  3504: a1 = s1 + 0x760\n  3508: a0 = u64 [s1 + 0x110]\n  3512: ra = 54, jump @22\n      : @90 [@dyn 27] (gas: 56)\n  3517: ra = u64 [s1 + 0xe8]\n  3521: ra = ra + 0x1\n  3524: a0 = ra <u 0x1\n  3527: t0 = u64 [s1 + 0x108]\n  3531: t0 = t0 + a0\n  3534: a0 = ra | t0\n  3537: a0 = a0 <u 0x1\n  3540: a1 = u64 [s1 + 0xf0]\n  3544: t1 = a1 + a0\n  3547: a1 = t1 <u a1\n  3550: a0 = u64 [s1 + 0xe0]\n  3554: a0 = a0 + a1\n  3557: a1 = u64 [s1 + 0x138]\n  3561: a2 = a1 + 0x20\n  3564: u64 [s1 + 0xe8] = a2\n  3568: a3 = a2 <u a1\n  3571: a1 = u64 [s1 + 0xd8]\n  3575: a2 = a1 + a3\n  3578: u64 [s1 + 0xe0] = a2\n  3582: a4 = a2 <u a1\n  3585: a4 = a3 if a3 == 0\n  3588: a1 = u64 [s1 + 0x130]\n  3592: t2 = a1 + a4\n  3595: a4 = t2 <u a1\n  3598: a1 = u64 [s1 + 0x128]\n  3602: a1 = a1 + a4\n  3605: u64 [s1 + 0x128] = a1\n  3609: a1 = u64 [s1 + 0x100]\n  3613: a4 = a1 + 0x20\n  3616: a5 = a4 <u a1\n  3619: a2 = u64 [s1 + 0xf8]\n  3623: a1 = a2 + a5\n  3626: a2 = a1 <u a2\n  3629: a2 = a5 if a5 == 0\n  3632: a3 = u64 [s1 + 0x118]\n  3636: a2 = a2 + a3\n  3639: a5 = a2 <u a3\n  3642: a3 = u64 [s1 + 0x120]\n  3646: a3 = a3 + a5\n  3649: u64 [s1 + 0x120] = a3\n  3653: u64 [s1 + 0x108] = t0\n  3657: a5 = u64 [s1 + 0x110]\n  3661: u64 [a5 + 0x8] = t0\n  3664: a3 = ra\n  3666: u64 [a5] = ra\n  3668: u64 [a5 + 0x10] = t1\n  3671: t0 = a0\n  3673: u64 [a5 + 0x18] = a0\n  3676: u64 [s1 + 0xf0] = t1\n  3680: a0 = u64 [s1 + 0xe8]\n  3684: u64 [s1 + 0x138] = a0\n  3688: a5 = u64 [s1 + 0xe0]\n  3692: u64 [s1 + 0x130] = t2\n  3696: ra = a1\n  3698: u64 [s1 + 0x118] = a2\n  3702: jump @85\n      : @91 (gas: 4)\n  3705: a0 = a3 | a1\n  3708: a0 = a0 | a2\n  3711: a2 = u64 [s1 + 0xd0]\n  3715: jump @106 if a0 != 0\n      : @92 (gas: 6)\n  3719: u64 [s1 + 0x48] = a4\n  3722: u64 [s1 + 288] = 0\n  3726: u64 [s1 + 280] = 0\n  3730: u64 [s1 + 296] = 0\n  3734: u64 [s1 + 304] = 0\n  3738: jump @109\n      : @93 (gas: 11)\n  3741: ra = t0\n  3743: t1 = u64 [s1 + 0x80]\n  3747: a4 = u64 [s1 + 0xb0]\n  3751: a4 = a4 ^ t1\n  3754: a5 = u64 [s1 + 0x78]\n  3757: a4 = a4 | a5\n  3760: a5 = u64 [s1 + 0x18]\n  3763: a4 = a4 | a5\n  3766: a5 = u64 [s1 + 0x40]\n  3769: t0 = u64 [s1 + 0x38]\n  3772: jump @105 if a4 == 0\n      : @94 (gas: 20)\n  3776: a4 = u64 [s1 + 0x138]\n  3780: a4 = a1 <u a4\n  3783: a3 = a3 + a4\n  3786: t0 = a3 ^ ra\n  3789: a5 = a3 <u ra\n  3792: a5 = a4 if t0 == 0\n  3795: a5 = a5 + a2\n  3798: t0 = a5 <u a2\n  3801: a4 = u64 [s1 + 0x130]\n  3805: a2 = a2 <u a4\n  3808: a0 = a0 + a2\n  3811: a0 = a0 + t0\n  3814: a2 = a1 | a5\n  3817: a0 = a0 | a3\n  3820: a2 = a2 | a0\n  3823: a2 = a2 >> 0x20\n  3826: a0 = a0 | a5\n  3829: a0 = a0 << 0x20\n  3832: a0 = a0 | a2\n  3835: jump @184 if a0 != 0\n      : @95 (gas: 2)\n  3839: a0 = s1 + 0x440\n  3843: ra = 56, jump @17\n      : @96 [@dyn 28] (gas: 11)\n  3848: a1 = s1 + 0x400\n  3852: a0 = u64 [a1 + 0x58]\n  3855: u64 [s1 + 0x130] = a0\n  3859: a0 = u64 [a1 + 0x50]\n  3862: u64 [s1 + 0x128] = a0\n  3866: a0 = u64 [a1 + 0x48]\n  3869: u64 [s1 + 0x120] = a0\n  3873: a0 = u64 [a1 + 0x40]\n  3876: u64 [s1 + 0x118] = a0\n  3880: a0 = u64 [s1 + 0x80]\n  3884: t0 = 58, jump @721\n      : @97 [@dyn 29] (gas: 1)\n  3889: ra = 60, jump @734\n      : @98 [@dyn 30] (gas: 6)\n  3894: u64 [s1 + 0x108] = a0\n  3898: u64 [s1 + 0xf0] = a1\n  3902: a0 = 0xffffffffffffffff\n  3905: a1 = 0xffffffffffffffff\n  3908: a2 = u64 [s1 + 0x138]\n  3912: ra = 62, jump @729\n      : @99 [@dyn 31] (gas: 1)\n  3917: t0 = 64, jump @715\n      : @100 [@dyn 32] (gas: 1)\n  3922: ra = 66, jump @729\n      : @101 [@dyn 33] (gas: 1)\n  3927: t0 = 68, jump @700\n      : @102 [@dyn 34] (gas: 4)\n  3932: a0 = u64 [s1 + 0x118]\n  3936: a0 = a0 & ~a3\n  3939: a2 = u64 [s1 + 0x120]\n  3943: t0 = 70, jump @728\n      : @103 [@dyn 35] (gas: 8)\n  3948: a4 = s1 + 0x700\n  3952: u64 [a4 + 0x98] = a3\n  3956: u64 [a4 + 0x90] = a2\n  3960: u64 [a4 + 0x88] = a1\n  3964: u64 [a4 + 0x80] = a0\n  3968: a1 = s1 + 0x780\n  3972: a0 = u64 [s1 + 0x110]\n  3976: ra = 72, jump @22\n      : @104 [@dyn 36] (gas: 3)\n  3981: t0 = u64 [s1 + 0x38]\n  3984: a5 = u64 [s1 + 0x40]\n  3987: fallthrough\n      : @105 (gas: 22)\n  3988: a0 = u64 [s1 + 0x30]\n  3991: a1 = u64 [s1 + 0x28]\n  3994: a0 = a0 | a1\n  3997: a1 = u64 [s1 + 0x50]\n  4000: a1 = a1 | a5\n  4003: a2 = u64 [s1 + 0x20]\n  4006: a2 = t0 | a2\n  4009: a3 = u64 [s1 + 0x48]\n  4012: a3 = a3 + 0x1\n  4015: u64 [s1 + 1976] = 0\n  4019: u64 [s1 + 1968] = 0\n  4023: u64 [s1 + 1960] = 0\n  4027: u64 [s1 + 1952] = 0\n  4031: a4 = s1 + 0x700\n  4035: u64 [a4 + 0xc0] = a3\n  4039: u64 [a4 + 0xc8] = a2\n  4043: u64 [a4 + 0xd0] = a1\n  4047: u64 [a4 + 0xd8] = a0\n  4051: a0 = s1 + 0x7a0\n  4055: a1 = s1 + 0x7c0\n  4059: ra = 0x56\n  4062: jump @22\n      : @106 (gas: 9)\n  4065: a0 = u64 [s1 + 0xc0]\n  4069: a1 = u64 [s1 + 0xb8]\n  4073: a0 = a0 | a1\n  4076: a1 = 0xffffffe0\n  4086: a1 = a2 <u a1\n  4089: a3 = u64 [s1 + 0xc8]\n  4093: a1 = 0 if a3 != 0\n  4095: a1 = 0 if a0 != 0\n  4097: jump @184 if a1 == 0\n      : @107 (gas: 9)\n  4101: u64 [s1 + 0x48] = a4\n  4104: i32 a1 = a2 + 0x20\n  4107: a0 = s1 + 0x480\n  4111: u64 [s1 + 0x30] = t1\n  4114: u64 [s1 + 0x28] = t2\n  4117: u64 [s1 + 0x20] = ra\n  4120: u64 [s1 + 0x40] = t0\n  4123: u64 [s1 + 0x38] = a5\n  4126: ra = 74, jump @17\n      : @108 [@dyn 37] (gas: 17)\n  4131: a5 = u64 [s1 + 0x38]\n  4134: t0 = u64 [s1 + 0x40]\n  4137: ra = u64 [s1 + 0x20]\n  4140: t2 = u64 [s1 + 0x28]\n  4143: t1 = u64 [s1 + 0x30]\n  4146: a3 = u64 [s1 + 0x80]\n  4150: a1 = s1 + 0x400\n  4154: a0 = u64 [a1 + 0x98]\n  4158: a2 = s1 + 0x100\n  4162: u64 [a2 + 0x30] = a0\n  4165: a0 = u64 [a1 + 0x90]\n  4169: u64 [a2 + 0x28] = a0\n  4172: a0 = u64 [a1 + 0x88]\n  4176: u64 [a2 + 0x18] = a0\n  4179: a0 = u64 [a1 + 0x80]\n  4183: u64 [a2 + 0x20] = a0\n  4186: fallthrough\n      : @109 (gas: 13)\n  4187: a0 = u64 [s1 + 0x50]\n  4190: a0 = a0 | t0\n  4193: u64 [s1 + 0x110] = a0\n  4197: a0 = t2 | t1\n  4200: u64 [s1 + 0x108] = a0\n  4204: a0 = a5 | ra\n  4207: u64 [s1 + 0x100] = a0\n  4211: a1 = a3 << 0x3\n  4214: u64 [s1 + 0x138] = a1\n  4218: i32 a2 = 0x80 - a1\n  4222: a0 = 0xffffffffffffffff\n  4225: a1 = 0xffffffffffffffff\n  4228: ra = 76, jump @734\n      : @110 [@dyn 38] (gas: 7)\n  4233: u64 [s1 + 0xe0] = a0\n  4237: u64 [s1 + 0xf8] = a1\n  4241: a0 = u64 [s1 + 0x80]\n  4245: i32 a2 = a0 << 0x3\n  4248: a0 = 0xffffffffffffffff\n  4251: a1 = 0xffffffffffffffff\n  4254: ra = 78, jump @729\n      : @111 [@dyn 39] (gas: 10)\n  4259: u64 [s1 + 0xf0] = a0\n  4263: u64 [s1 + 0xe8] = a1\n  4267: a1 = u64 [s1 + 0xe0]\n  4271: a0 = a0 | a1\n  4274: u64 [s1 + 0xe0] = a0\n  4278: a0 = u64 [s1 + 0x138]\n  4282: i32 a2 = a0 + 0xffffffffffffff80\n  4285: a0 = 0xffffffffffffffff\n  4288: a1 = 0xffffffffffffffff\n  4291: ra = 80, jump @729\n      : @112 [@dyn 40] (gas: 7)\n  4296: a4 = u64 [s1 + 0x138]\n  4300: a2 = a4 <u 0x80\n  4304: a3 = u64 [s1 + 0xe0]\n  4308: a0 = a3 if a2 != 0\n  4311: a5 = u64 [s1 + 0xe8]\n  4315: a3 = u64 [s1 + 0xf8]\n  4319: t0 = 82, jump @722\n      : @113 [@dyn 41] (gas: 2)\n  4324: a4 = u64 [s1 + 0xf0]\n  4328: t0 = 84, jump @704\n      : @114 [@dyn 42] (gas: 25)\n  4333: a4 = u64 [s1 + 0x48]\n  4336: a0 = a0 | a4\n  4339: a5 = s1 + 0x100\n  4343: a4 = u64 [a5]\n  4345: a1 = a1 | a4\n  4348: a4 = u64 [a5 + 0x8]\n  4351: a3 = a3 | a4\n  4354: a4 = u64 [a5 + 0x10]\n  4357: a2 = a2 | a4\n  4360: a4 = s1 + 0x1000\n  4364: u64 [a4 + 0xfffffffffffff810] = a2\n  4368: a2 = s1 + 0x1000\n  4372: u64 [a2 + 0xfffffffffffff818] = a3\n  4376: a2 = s1 + 0x1000\n  4380: u64 [a2 + 0xfffffffffffff808] = a1\n  4384: a1 = s1 + 0x1000\n  4388: u64 [a1 + 0xfffffffffffff800] = a0\n  4392: u64 [s1 + 2040] = 0\n  4396: u64 [s1 + 2032] = 0\n  4400: u64 [s1 + 2024] = 0\n  4404: u64 [s1 + 2016] = 0\n  4408: a0 = s1 + 0x7e0\n  4412: a1 = s1 + 0x7ff\n  4416: a1 = a1 + 0x1\n  4419: ra = 86, jump @22\n      : @115 [@dyn 43] (gas: 12)\n  4424: a1 = u64 [s1 + 0xa8]\n  4428: a3 = u64 [s1 + 0x98]\n  4432: a0 = a1 | a3\n  4435: a2 = u64 [s1 + 0xa0]\n  4439: a4 = u64 [s1 + 0x90]\n  4443: a2 = a2 | a4\n  4446: a0 = a0 | a2\n  4449: a0 = a0 >> 0x20\n  4452: a2 = a2 | a3\n  4455: a2 = a2 << 0x20\n  4458: a0 = a0 | a2\n  4461: jump @184 if a0 != 0\n      : @116 (gas: 2)\n  4465: a0 = s1 + 0x420\n  4469: ra = 88, jump @17\n      : @117 [@dyn 44] (gas: 17)\n  4474: a0 = s1 + 0x400\n  4478: a3 = u64 [a0 + 0x38]\n  4481: a2 = u64 [a0 + 0x30]\n  4484: a1 = u64 [a0 + 0x28]\n  4487: a0 = a3 >u 0\n  4489: a4 = a2 >u 0\n  4491: a4 = a0 if a3 != 0\n  4494: u64 [s1 + 0xb8] = a1\n  4498: a0 = a1 >u 0\n  4500: u64 [s1 + 0xb0] = a2\n  4504: u64 [s1 + 0x80] = a3\n  4508: a2 = a2 | a3\n  4511: u64 [s1 + 0xd8] = a0\n  4515: u64 [s1 + 0xe0] = a4\n  4519: u64 [s1 + 0xf0] = a2\n  4523: a0 = a4 if a2 != 0\n  4526: jump @201 if a0 != 0\n      : @118 (gas: 14)\n  4530: a0 = u64 [s1 + 0x420]\n  4534: u64 [s1 + 0xc0] = a0\n  4538: a0 = s1 + 0x1000\n  4542: u64 [a0 + 4294965304] = 0\n  4546: a0 = s1 + 0x1000\n  4550: u64 [a0 + 4294965296] = 0\n  4554: a0 = s1 + 0x1000\n  4558: u64 [a0 + 4294965288] = 0\n  4562: a1 = s1 + 0x1000\n  4566: u64 [a1 + 4294965280] = 0x1\n  4571: a0 = s1 + 0x400\n  4575: a1 = s1 + 0x7ff\n  4579: a1 = a1 + 0x21\n  4582: ra = 90, jump @21\n      : @119 [@dyn 45] (gas: 6)\n  4587: a4 = s1 + 0x400\n  4591: a0 = u64 [a4 + 0x10]\n  4594: a1 = u64 [a4 + 0x8]\n  4597: a2 = u64 [a4]\n  4599: a3 = u64 [a4 + 0x18]\n  4602: t0 = 92, jump @705\n      : @120 [@dyn 46] (gas: 12)\n  4607: t0 = a2 <u 0x1\n  4610: ra = a1 & 0x7f\n  4613: t2 = a5 & a0\n  4616: a4 = a5 & t1\n  4619: ra = a1 if a2 != 0\n  4622: a1 = ra <u 0x20\n  4625: a5 = a5 & a3\n  4628: a2 = a1\n  4630: a2 = 0 if a4 != 0\n  4632: a0 = t2 | a5\n  4635: a2 = 0 if a0 != 0\n  4637: jump @207 if t0 != a2\n      : @121 (gas: 1)\n  4641: t0 = 94, jump @712\n      : @122 [@dyn 47] (gas: 4)\n  4646: a0 = u64 [s1 + 0xc0]\n  4650: a0 = a0 <u 0x20\n  4653: u64 [s1 + 0xe8] = a0\n  4657: jump @131 if a3 == 0\n      : @123 (gas: 11)\n  4661: u64 [s1 + 0x110] = a4\n  4665: u64 [s1 + 0x118] = ra\n  4669: u64 [s1 + 0x120] = a5\n  4673: u64 [s1 + 0x130] = t2\n  4677: u64 [s1 + 1016] = 0\n  4681: u64 [s1 + 1008] = 0\n  4685: u64 [s1 + 1000] = 0\n  4689: a1 = s1 + 0x3e0\n  4693: u64 [s1 + 992] = 0x1\n  4698: a0 = 0\n  4700: ra = 96, jump @19\n      : @124 [@dyn 48] (gas: 2)\n  4705: a1 = i32 [0x2008c]\n  4710: jump @126 if a1 >u 31\n      : @125 (gas: 2)\n  4714: u32 [0x2008c] = 0x20\n  4720: fallthrough\n      : @126 (gas: 87)\n  4721: a0 = sp + 0xffffffffffffffe0\n  4724: a2 = a0 & 0xffffffffffffffe0\n  4727: u64 [s1 + 0x128] = a2\n  4731: sp = a2\n  4733: a0 = 0x200a0\n  4738: i32 a0 = a0 + 0\n  4740: i32 a2 = a2 + 0\n  4742: a1 = 0x20\n  4745: ecalli 6 // 'hash_keccak_256'\n  4747: a0 = u64 [s1 + 0xc0]\n  4751: a1 = a0 + 0x1f\n  4754: a0 = a1 <u a0\n  4757: a5 = u64 [s1 + 0xb8]\n  4761: a2 = a5 + a0\n  4764: a3 = a2 <u a5\n  4767: a3 = a0 if a0 == 0\n  4770: a4 = u64 [s1 + 0xb0]\n  4774: a3 = a3 + a4\n  4777: u64 [s1 + 0x108] = a3\n  4781: a3 = a3 << 0x3b\n  4784: a4 = a2 >> 0x5\n  4787: a4 = a4 | a3\n  4790: a0 = u64 [s1 + 0x128]\n  4794: t0 = u64 [a0 + 0x18]\n  4797: a2 = a2 << 0x3b\n  4800: a0 = u64 [a0 + 0x10]\n  4803: a1 = a1 >> 0x5\n  4806: a2 = a2 | a1\n  4809: t2 = reverse t0\n  4811: a0 = reverse a0\n  4813: a1 = u64 [s1 + 0xe8]\n  4817: a1 = 0 if a5 != 0\n  4819: a3 = u64 [s1 + 0xf0]\n  4823: a1 = 0 if a3 != 0\n  4825: a4 = 0 if a1 != 0\n  4827: a2 = 0 if a1 != 0\n  4829: t0 = t2 + a2\n  4832: a2 = t0 <u t2\n  4835: a5 = a0 + a2\n  4838: a4 = a4 + a5\n  4841: u64 [s1 + 0x138] = a4\n  4845: a5 = a4 ^ a0\n  4848: a3 = a4 <u a0\n  4851: a3 = a2 if a5 == 0\n  4854: u64 [s1 + 0x100] = a3\n  4858: a2 = u64 [s1 + 0x118]\n  4862: ra = a2 + 0x1f\n  4865: a4 = ra <u a2\n  4868: a3 = u64 [s1 + 0x110]\n  4872: a2 = a3 + a4\n  4875: a5 = a2 <u a3\n  4878: a5 = a4 if a4 == 0\n  4881: t1 = u64 [s1 + 0x130]\n  4885: t1 = t1 + a5\n  4888: a4 = t1 << 0x3b\n  4891: a3 = a2 >> 0x5\n  4894: a3 = a3 | a4\n  4897: a2 = a2 << 0x3b\n  4900: a4 = ra >> 0x5\n  4903: a2 = a2 | a4\n  4906: a2 = a2 + t2\n  4909: u64 [s1 + 0x118] = a2\n  4913: a4 = a2 <u t2\n  4916: t2 = t0\n  4918: a2 = a0 + a4\n  4921: a2 = a2 + a3\n  4924: a3 = a2 ^ a0\n  4927: u64 [s1 + 0x110] = a2\n  4931: a2 = a2 <u a0\n  4934: a2 = a4 if a3 == 0\n  4937: a4 = u64 [s1 + 0x108]\n  4941: a0 = u64 [s1 + 0xb0]\n  4945: a0 = a4 <u a0\n  4948: a3 = u64 [s1 + 0x80]\n  4952: a0 = a0 + a3\n  4955: a3 = a4 >> 0x5\n  4958: a4 = a0 << 0x3b\n  4961: a3 = a3 | a4\n  4964: a4 = u64 [s1 + 0x128]\n  4968: t0 = u64 [a4]\n  4970: a4 = u64 [a4 + 0x8]\n  4973: a0 = a0 >> 0x5\n  4976: a3 = 0 if a1 != 0\n  4978: a0 = 0 if a1 != 0\n  4980: a1 = reverse a4\n  4982: a4 = reverse t0\n  4984: t0 = 98, jump @727\n      : @127 [@dyn 49] (gas: 25)\n  4989: t0 = a0 + a3\n  4992: a0 = u64 [s1 + 0x130]\n  4996: a0 = t1 <u a0\n  4999: a3 = u64 [s1 + 0x120]\n  5003: a0 = a0 + a3\n  5006: a3 = t1 >> 0x5\n  5009: a5 = a0 << 0x3b\n  5012: a3 = a3 | a5\n  5015: a0 = a0 >> 0x5\n  5018: a0 = a0 + a4\n  5021: a5 = s1 + 0x100\n  5025: a4 = u64 [a5 + 0x38]\n  5028: a3 = a3 + a1\n  5031: a1 = a3 <u a1\n  5034: a0 = a0 + a1\n  5037: a2 = a2 + a3\n  5040: u64 [a5 + 0x8] = a2\n  5043: a1 = a2 <u a3\n  5046: a0 = a0 + a1\n  5049: u64 [a5] = a0\n  5051: a0 = sp + 0xffffffffffffffe0\n  5054: t1 = a0 & 0xffffffffffffffe0\n  5057: sp = t1\n  5059: u64 [s1 + 0xf8] = t1\n  5063: fallthrough\n      : @128 (gas: 20)\n  5064: a0 = u64 [s1 + 0x118]\n  5068: a0 = t2 <u a0\n  5071: a2 = u64 [s1 + 0x110]\n  5075: a1 = a4 ^ a2\n  5078: a2 = a4 <u a2\n  5081: a2 = a0 if a1 == 0\n  5084: a5 = u64 [s1 + 0x108]\n  5088: a0 = ra <u a5\n  5091: a3 = u64 [s1 + 0x100]\n  5095: a1 = t0 ^ a3\n  5098: a3 = t0 <u a3\n  5101: a3 = a0 if a1 == 0\n  5104: a0 = ra ^ a5\n  5107: a0 = a0 | a1\n  5110: a3 = a2 if a0 == 0\n  5113: u64 [t1] = t2\n  5115: u64 [t1 + 0x8] = a4\n  5118: u64 [t1 + 0x10] = ra\n  5121: u64 [t1 + 0x18] = t0\n  5124: jump @131 if a3 == 0\n      : @129 (gas: 16)\n  5127: a0 = s1 + 0x1000\n  5131: u64 [a0 + 4294965336] = 0\n  5135: a0 = s1 + 0x1000\n  5139: u64 [a0 + 4294965328] = 0\n  5143: a0 = s1 + 0x1000\n  5147: u64 [a0 + 4294965320] = 0\n  5151: a0 = s1 + 0x1000\n  5155: u64 [a0 + 4294965312] = 0\n  5159: a1 = s1 + 0x7ff\n  5163: a1 = a1 + 0x41\n  5166: a0 = t1\n  5168: u64 [s1 + 0x130] = t2\n  5172: u64 [s1 + 0x138] = a4\n  5176: u64 [s1 + 0x128] = t0\n  5180: u64 [s1 + 0x120] = ra\n  5184: ra = 100, jump @22\n      : @130 [@dyn 50] (gas: 15)\n  5189: t1 = u64 [s1 + 0xf8]\n  5193: t0 = u64 [s1 + 0x128]\n  5197: a4 = u64 [s1 + 0x138]\n  5201: t2 = u64 [s1 + 0x130]\n  5205: t2 = t2 + 0x1\n  5208: a0 = t2 <u 0x1\n  5211: a4 = a4 + a0\n  5214: a0 = t2 | a4\n  5217: a0 = a0 <u 0x1\n  5220: a1 = u64 [s1 + 0x120]\n  5224: a0 = a0 + a1\n  5227: a1 = a0 <u a1\n  5230: t0 = t0 + a1\n  5233: ra = a0\n  5235: jump @128\n      : @131 (gas: 9)\n  5238: a0 = u64 [s1 + 0xe8]\n  5242: a0 = a0 ^ 0x1\n  5245: a5 = u64 [s1 + 0xb8]\n  5249: a1 = u64 [s1 + 0xd8]\n  5253: a0 = a1 if a5 != 0\n  5256: a1 = u64 [s1 + 0xe0]\n  5260: a2 = u64 [s1 + 0xf0]\n  5264: a0 = a1 if a2 != 0\n  5267: jump @141 if a0 == 0\n      : @132 (gas: 10)\n  5271: a0 = u64 [s1 + 0xc0]\n  5275: a0 = a0 & 0xffffffffffffffe0\n  5278: u64 [s1 + 0xc8] = a0\n  5282: u64 [s1 + 952] = 0\n  5286: u64 [s1 + 944] = 0\n  5290: u64 [s1 + 936] = 0\n  5294: a1 = s1 + 0x3a0\n  5298: u64 [s1 + 928] = 0x1\n  5303: a0 = 0\n  5305: ra = 102, jump @19\n      : @133 [@dyn 51] (gas: 7)\n  5310: a0 = sp + 0xffffffffffffffe0\n  5313: a0 = a0 & 0xffffffffffffffe0\n  5316: u64 [s1 + 0x120] = a0\n  5320: sp = a0\n  5322: a1 = 0x20\n  5325: a0 = 0\n  5327: ra = 104, jump @26\n      : @134 [@dyn 52] (gas: 35)\n  5332: a1 = sp + 0xffffffffffffffe0\n  5335: a1 = a1 & 0xffffffffffffffe0\n  5338: u64 [s1 + 0x118] = a1\n  5342: sp = a1\n  5344: i32 a0 = a0 + 0\n  5346: i32 a2 = a1 + 0\n  5348: a1 = 0x20\n  5351: ecalli 6 // 'hash_keccak_256'\n  5353: u64 [s1 + 304] = 0x20\n  5358: u64 [s1 + 296] = 0\n  5362: t1 = 0\n  5364: u64 [s1 + 312] = 0\n  5368: a4 = 0\n  5370: a5 = 0\n  5372: a2 = 0\n  5374: a3 = 0\n  5376: a0 = u64 [s1 + 0x118]\n  5380: t2 = u64 [a0 + 0x18]\n  5383: a1 = u64 [a0 + 0x10]\n  5386: ra = u64 [a0 + 0x8]\n  5389: t0 = u64 [a0]\n  5391: t2 = reverse t2\n  5393: a1 = reverse a1\n  5395: ra = reverse ra\n  5397: t0 = reverse t0\n  5399: u64 [s1 + 0x108] = t0\n  5403: a0 = u64 [s1 + 0x120]\n  5407: u64 [a0 + 0x18] = t0\n  5410: u64 [s1 + 0xe0] = ra\n  5414: u64 [a0 + 0x10] = ra\n  5417: u64 [s1 + 0x110] = a1\n  5421: u64 [a0 + 0x8] = a1\n  5424: t0 = t2\n  5426: u64 [a0] = t2\n  5428: fallthrough\n      : @135 (gas: 24)\n  5429: ra = t0\n  5431: a0 = u64 [s1 + 0xc8]\n  5435: u64 [s1 + 0xf0] = a4\n  5439: a0 = a4 <u a0\n  5442: a4 = a0 ^ 0x1\n  5445: u64 [s1 + 0xe8] = a5\n  5449: a4 = 0x1 if a5 != 0\n  5452: u64 [s1 + 0x118] = a3\n  5456: u64 [s1 + 0x100] = a2\n  5460: a0 = a2 | a3\n  5463: a4 = 0x1 if a0 != 0\n  5466: a0 = u64 [s1 + 0xa8]\n  5470: a1 = u64 [s1 + 0x130]\n  5474: a1 = a1 + a0\n  5477: a3 = u64 [s1 + 0xa0]\n  5481: t0 = u64 [s1 + 0x128]\n  5485: t0 = t0 + a3\n  5488: t2 = u64 [s1 + 0x98]\n  5492: u64 [s1 + 0xf8] = t1\n  5496: a2 = t2 + t1\n  5499: t1 = u64 [s1 + 0x90]\n  5503: a5 = u64 [s1 + 0x138]\n  5507: t1 = t1 + a5\n  5510: jump @143 if a4 != 0\n      : @136 (gas: 6)\n  5514: a0 = a1 <u a0\n  5517: a4 = t0 + a0\n  5520: t0 = a4 ^ a3\n  5523: a5 = a4 <u a3\n  5526: a5 = a0 if t0 == 0\n  5529: t0 = 106, jump @708\n      : @137 [@dyn 53] (gas: 2)\n  5534: u64 [s1 + 0xd8] = ra\n  5538: jump @184 if a0 != 0\n      : @138 (gas: 2)\n  5542: a0 = s1 + 0x260\n  5546: ra = 108, jump @17\n      : @139 [@dyn 54] (gas: 17)\n  5551: a4 = s1 + 0x200\n  5555: a0 = u64 [a4 + 0x78]\n  5558: a1 = u64 [a4 + 0x70]\n  5561: a2 = u64 [a4 + 0x68]\n  5564: a3 = u64 [a4 + 0x60]\n  5567: a4 = s1 + 0x1000\n  5571: u64 [a4 + 0xfffffffffffff878] = a0\n  5575: a0 = s1 + 0x1000\n  5579: u64 [a0 + 0xfffffffffffff870] = a1\n  5583: a0 = s1 + 0x1000\n  5587: u64 [a0 + 0xfffffffffffff868] = a2\n  5591: a0 = s1 + 0x1000\n  5595: u64 [a0 + 0xfffffffffffff860] = a3\n  5599: a1 = s1 + 0x7ff\n  5603: a1 = a1 + 0x61\n  5606: a0 = u64 [s1 + 0x120]\n  5610: ra = 110, jump @22\n      : @140 [@dyn 55] (gas: 57)\n  5615: a3 = u64 [s1 + 0xd8]\n  5619: a3 = a3 + 0x1\n  5622: a0 = a3 <u 0x1\n  5625: t0 = u64 [s1 + 0x110]\n  5629: t0 = t0 + a0\n  5632: a0 = a3 | t0\n  5635: a0 = a0 <u 0x1\n  5638: a1 = u64 [s1 + 0xe0]\n  5642: t1 = a1 + a0\n  5645: a1 = t1 <u a1\n  5648: a0 = u64 [s1 + 0x108]\n  5652: a0 = a0 + a1\n  5655: a1 = u64 [s1 + 0x130]\n  5659: a2 = a1 + 0x20\n  5662: u64 [s1 + 0xd8] = a2\n  5666: a1 = a2 <u a1\n  5669: a2 = u64 [s1 + 0x128]\n  5673: a4 = a2 + a1\n  5676: u64 [s1 + 0xd0] = a4\n  5680: a4 = a4 <u a2\n  5683: a4 = a1 if a1 == 0\n  5686: a1 = u64 [s1 + 0xf8]\n  5690: t2 = a1 + a4\n  5693: a4 = t2 <u a1\n  5696: a1 = u64 [s1 + 0x138]\n  5700: a1 = a1 + a4\n  5703: u64 [s1 + 0x138] = a1\n  5707: a1 = u64 [s1 + 0xf0]\n  5711: a4 = a1 + 0x20\n  5714: a5 = a4 <u a1\n  5717: a2 = u64 [s1 + 0xe8]\n  5721: a1 = a2 + a5\n  5724: a2 = a1 <u a2\n  5727: a2 = a5 if a5 == 0\n  5730: a5 = u64 [s1 + 0x100]\n  5734: a2 = a2 + a5\n  5737: a5 = a2 <u a5\n  5740: ra = u64 [s1 + 0x118]\n  5744: ra = ra + a5\n  5747: u64 [s1 + 0x110] = t0\n  5751: a5 = u64 [s1 + 0x120]\n  5755: u64 [a5 + 0x8] = t0\n  5758: t0 = a3\n  5760: u64 [a5] = a3\n  5762: a3 = t1\n  5764: u64 [a5 + 0x10] = a3\n  5767: u64 [s1 + 0x108] = a0\n  5771: u64 [a5 + 0x18] = a0\n  5774: u64 [s1 + 0xe0] = a3\n  5778: a0 = u64 [s1 + 0xd8]\n  5782: u64 [s1 + 0x130] = a0\n  5786: a3 = ra\n  5788: a0 = u64 [s1 + 0xd0]\n  5792: u64 [s1 + 0x128] = a0\n  5796: t1 = t2\n  5798: a5 = a1\n  5800: jump @135\n      : @141 (gas: 10)\n  5803: a4 = u64 [s1 + 0xc0]\n  5807: a2 = u64 [s1 + 0xb0]\n  5811: a0 = a4 | a2\n  5814: a3 = u64 [s1 + 0x80]\n  5818: a1 = a5 | a3\n  5821: a0 = a0 | a1\n  5824: t0 = u64 [s1 + 0xa8]\n  5828: t1 = u64 [s1 + 0xa0]\n  5832: a1 = u64 [s1 + 0x98]\n  5836: jump @157 if a0 != 0\n      : @142 (gas: 5)\n  5840: u64 [s1 + 288] = 0\n  5844: u64 [s1 + 280] = 0\n  5848: u64 [s1 + 296] = 0\n  5852: u64 [s1 + 304] = 0\n  5856: jump @160\n      : @143 (gas: 12)\n  5859: a4 = u64 [s1 + 0xc8]\n  5863: a5 = u64 [s1 + 0xc0]\n  5867: a4 = a4 ^ a5\n  5870: ra = u64 [s1 + 0xb0]\n  5874: a4 = a4 | ra\n  5877: u64 [s1 + 0x138] = a4\n  5881: a5 = u64 [s1 + 0xb8]\n  5885: a4 = u64 [s1 + 0x80]\n  5889: a5 = a5 | a4\n  5892: a4 = u64 [s1 + 0x138]\n  5896: a4 = a4 | a5\n  5899: jump @156 if a4 == 0\n      : @144 (gas: 6)\n  5903: a0 = a1 <u a0\n  5906: a4 = t0 + a0\n  5909: t0 = a4 ^ a3\n  5912: a5 = a4 <u a3\n  5915: a5 = a0 if t0 == 0\n  5918: t0 = 112, jump @708\n      : @145 [@dyn 56] (gas: 1)\n  5923: jump @184 if a0 != 0\n      : @146 (gas: 2)\n  5927: a0 = s1 + 0x380\n  5931: ra = 114, jump @17\n      : @147 [@dyn 57] (gas: 11)\n  5936: a1 = s1 + 0x300\n  5940: a0 = u64 [a1 + 0x98]\n  5944: u64 [s1 + 0x130] = a0\n  5948: a0 = u64 [a1 + 0x90]\n  5952: u64 [s1 + 0x128] = a0\n  5956: a0 = u64 [a1 + 0x88]\n  5960: u64 [s1 + 0x118] = a0\n  5964: a0 = u64 [a1 + 0x80]\n  5968: u64 [s1 + 0x110] = a0\n  5972: a0 = u64 [s1 + 0xc0]\n  5976: t0 = 116, jump @721\n      : @148 [@dyn 58] (gas: 1)\n  5981: ra = 118, jump @734\n      : @149 [@dyn 59] (gas: 6)\n  5986: u64 [s1 + 0x108] = a0\n  5990: u64 [s1 + 0xf0] = a1\n  5994: a0 = 0xffffffffffffffff\n  5997: a1 = 0xffffffffffffffff\n  6000: a2 = u64 [s1 + 0x138]\n  6004: ra = 120, jump @729\n      : @150 [@dyn 60] (gas: 1)\n  6009: t0 = 122, jump @715\n      : @151 [@dyn 61] (gas: 1)\n  6014: ra = 124, jump @729\n      : @152 [@dyn 62] (gas: 1)\n  6019: t0 = 126, jump @700\n      : @153 [@dyn 63] (gas: 4)\n  6024: a0 = u64 [s1 + 0x110]\n  6028: a0 = a0 & ~a3\n  6031: a2 = u64 [s1 + 0x118]\n  6035: t0 = 128, jump @728\n      : @154 [@dyn 64] (gas: 12)\n  6041: a4 = s1 + 0x1000\n  6045: u64 [a4 + 0xfffffffffffff898] = a3\n  6049: a3 = s1 + 0x1000\n  6053: u64 [a3 + 0xfffffffffffff890] = a2\n  6057: a2 = s1 + 0x1000\n  6061: u64 [a2 + 0xfffffffffffff888] = a1\n  6065: a1 = s1 + 0x1000\n  6069: u64 [a1 + 0xfffffffffffff880] = a0\n  6073: a1 = s1 + 0x7ff\n  6077: a1 = a1 + 0x81\n  6081: a0 = u64 [s1 + 0x120]\n  6085: ra = 130, jump @22\n      : @155 [@dyn 65] (gas: 2)\n  6091: ra = u64 [s1 + 0xb0]\n  6095: fallthrough\n      : @156 (gas: 32)\n  6096: a0 = ra >> 0x3f\n  6099: a1 = u64 [s1 + 0x80]\n  6103: a1 = a1 << 0x1\n  6106: a0 = a0 | a1\n  6109: a3 = u64 [s1 + 0xb8]\n  6113: a1 = a3 >> 0x3f\n  6116: a2 = ra << 0x1\n  6119: a1 = a1 | a2\n  6122: a4 = u64 [s1 + 0xc0]\n  6126: a2 = a4 >> 0x3f\n  6129: a3 = a3 << 0x1\n  6132: a2 = a2 | a3\n  6135: a3 = a4 << 0x1\n  6138: a3 = a3 + 0x1\n  6141: a5 = s1 + 0x7ff\n  6145: a5 = a5 + 0xb9\n  6149: u64 [a5 + 0] = 0\n  6151: u64 [a5 + 4294967288] = 0\n  6154: a4 = s1 + 0x1000\n  6158: u64 [a4 + 4294965416] = 0\n  6162: t0 = s1 + 0x1000\n  6166: u64 [t0 + 4294965408] = 0x1\n  6171: u64 [a5 + 0x8] = a3\n  6174: u64 [a5 + 0x10] = a2\n  6177: u64 [a5 + 0x18] = a1\n  6180: u64 [a5 + 0x20] = a0\n  6183: a0 = s1 + 0x7ff\n  6187: a0 = a0 + 0xa1\n  6191: a1 = s1 + 0x7ff\n  6195: a1 = a1 + 0xc1\n  6199: ra = 0x90\n  6203: jump @22\n      : @157 (gas: 7)\n  6206: a0 = u64 [s1 + 0x90]\n  6210: a0 = a0 | a1\n  6213: a1 = 0xffffffe0\n  6223: a1 = t0 <u a1\n  6226: a1 = 0 if t1 != 0\n  6228: a1 = 0 if a0 != 0\n  6230: jump @184 if a1 == 0\n      : @158 (gas: 3)\n  6234: i32 a1 = t0 + 0x20\n  6237: a0 = s1 + 0x3c0\n  6241: ra = 132, jump @17\n      : @159 [@dyn 66] (gas: 14)\n  6247: a3 = u64 [s1 + 0x80]\n  6251: a2 = u64 [s1 + 0xb0]\n  6255: a5 = u64 [s1 + 0xb8]\n  6259: a4 = u64 [s1 + 0xc0]\n  6263: a1 = s1 + 0x300\n  6267: a0 = u64 [a1 + 0xd8]\n  6271: u64 [s1 + 0x130] = a0\n  6275: a0 = u64 [a1 + 0xd0]\n  6279: u64 [s1 + 0x128] = a0\n  6283: a0 = u64 [a1 + 0xc8]\n  6287: u64 [s1 + 0x118] = a0\n  6291: a0 = u64 [a1 + 0xc0]\n  6295: u64 [s1 + 0x120] = a0\n  6299: fallthrough\n      : @160 (gas: 20)\n  6300: a0 = a5 >> 0x3f\n  6303: a1 = a2 << 0x1\n  6306: a0 = a0 | a1\n  6309: u64 [s1 + 0x110] = a0\n  6313: a0 = a2 >> 0x3f\n  6316: a1 = a3 << 0x1\n  6319: a0 = a0 | a1\n  6322: u64 [s1 + 0x108] = a0\n  6326: a0 = a4 >> 0x3f\n  6329: a1 = a5 << 0x1\n  6332: a0 = a0 | a1\n  6335: u64 [s1 + 0x100] = a0\n  6339: a0 = a4 << 0x1\n  6342: u64 [s1 + 0xf8] = a0\n  6346: a1 = a4 << 0x3\n  6349: u64 [s1 + 0x138] = a1\n  6353: i32 a2 = 0x80 - a1\n  6357: a0 = 0xffffffffffffffff\n  6360: a1 = 0xffffffffffffffff\n  6363: ra = 134, jump @734\n      : @161 [@dyn 67] (gas: 7)\n  6369: u64 [s1 + 0xd8] = a0\n  6373: u64 [s1 + 0xf0] = a1\n  6377: a0 = u64 [s1 + 0xc0]\n  6381: i32 a2 = a0 << 0x3\n  6384: a0 = 0xffffffffffffffff\n  6387: a1 = 0xffffffffffffffff\n  6390: ra = 136, jump @729\n      : @162 [@dyn 68] (gas: 10)\n  6396: u64 [s1 + 0xe8] = a0\n  6400: u64 [s1 + 0xe0] = a1\n  6404: a1 = u64 [s1 + 0xd8]\n  6408: a0 = a0 | a1\n  6411: u64 [s1 + 0xd8] = a0\n  6415: a0 = u64 [s1 + 0x138]\n  6419: i32 a2 = a0 + 0xffffffffffffff80\n  6422: a0 = 0xffffffffffffffff\n  6425: a1 = 0xffffffffffffffff\n  6428: ra = 138, jump @729\n      : @163 [@dyn 69] (gas: 7)\n  6434: a4 = u64 [s1 + 0x138]\n  6438: a2 = a4 <u 0x80\n  6442: a3 = u64 [s1 + 0xd8]\n  6446: a0 = a3 if a2 != 0\n  6449: a5 = u64 [s1 + 0xe0]\n  6453: a3 = u64 [s1 + 0xf0]\n  6457: t0 = 140, jump @722\n      : @164 [@dyn 70] (gas: 2)\n  6463: a4 = u64 [s1 + 0xe8]\n  6467: t0 = 142, jump @704\n      : @165 [@dyn 71] (gas: 24)\n  6473: a4 = u64 [s1 + 0xf8]\n  6477: a0 = a0 | a4\n  6480: a5 = s1 + 0x100\n  6484: a4 = u64 [a5]\n  6486: a1 = a1 | a4\n  6489: a4 = u64 [a5 + 0x8]\n  6492: a3 = a3 | a4\n  6495: a4 = u64 [a5 + 0x10]\n  6498: a2 = a2 | a4\n  6501: a5 = s1 + 0x7ff\n  6505: a5 = a5 + 0xb9\n  6509: u64 [a5 + 40] = 0x1\n  6513: u64 [a5 + 0x58] = a2\n  6516: u64 [a5 + 0x60] = a3\n  6519: u64 [a5 + 0x50] = a1\n  6522: u64 [a5 + 0x48] = a0\n  6525: u64 [a5 + 64] = 0\n  6528: u64 [a5 + 56] = 0\n  6531: u64 [a5 + 48] = 0\n  6534: a0 = s1 + 0x7ff\n  6538: a0 = a0 + 0xe1\n  6542: a1 = s1 + 0x7ff\n  6546: a1 = a1 + 0x101\n  6550: ra = 144, jump @22\n      : @166 [@dyn 72] (gas: 10)\n  6556: a1 = s1 + 0x7ff\n  6560: a1 = a1 + 0xb9\n  6564: u64 [a1 + 128] = 0\n  6568: u64 [a1 + 120] = 0\n  6571: u64 [a1 + 112] = 0\n  6574: u64 [a1 + 104] = 0x3\n  6578: a0 = s1 + 0x7ff\n  6582: a0 = a0 + 0x121\n  6586: a1 = u64 [s1 + 0x88]\n  6590: ra = 146, jump @22\n      : @167 [@dyn 73] (gas: 9)\n  6596: a0 = 0x300a0\n  6601: u64 [s1 + 0x138] = a0\n  6605: i32 a0 = a0 + 0\n  6607: u64 [s1 + 0x128] = a0\n  6611: ra = 0x94\n  6615: ecalli 3 // 'caller'\n  6617: a2 = u64 [s1 + 0x138]\n  6621: t0 = 0x96\n  6625: jump @698\n      : @168 [@dyn 74] (gas: 2)\n  6628: a2 = u64 [s1 + 0x138]\n  6632: t0 = 150, jump @698\n      : @169 [@dyn 75] (gas: 7)\n  6638: u64 [s1 + 888] = 0\n  6642: u64 [s1 + 0x370] = a1\n  6646: u64 [s1 + 0x368] = a0\n  6650: a1 = s1 + 0x360\n  6654: u64 [s1 + 0x360] = a3\n  6658: a0 = 0\n  6660: ra = 152, jump @19\n      : @170 [@dyn 76] (gas: 7)\n  6666: u64 [s1 + 856] = 0\n  6670: u64 [s1 + 848] = 0\n  6674: u64 [s1 + 832] = 0x4\n  6679: a0 = 0x20\n  6682: a1 = s1 + 0x340\n  6686: u64 [s1 + 840] = 0\n  6690: ra = 154, jump @19\n      : @171 [@dyn 77] (gas: 2)\n  6696: a1 = i32 [0x2008c]\n  6701: jump @173 if a1 >u 63\n      : @172 (gas: 2)\n  6705: u32 [0x2008c] = 0x40\n  6711: fallthrough\n      : @173 (gas: 28)\n  6712: a0 = sp + 0xffffffffffffffe0\n  6715: a2 = a0 & 0xffffffffffffffe0\n  6718: u64 [s1 + 0x130] = a2\n  6722: sp = a2\n  6724: a0 = 0x200a0\n  6729: i32 a0 = a0 + 0\n  6731: i32 a2 = a2 + 0\n  6733: a1 = 0x40\n  6736: ecalli 6 // 'hash_keccak_256'\n  6738: a3 = u64 [s1 + 0x130]\n  6742: a0 = u64 [a3 + 0x18]\n  6745: a1 = u64 [a3 + 0x10]\n  6748: a2 = u64 [a3 + 0x8]\n  6751: a3 = u64 [a3]\n  6753: a0 = reverse a0\n  6755: a1 = reverse a1\n  6757: a2 = reverse a2\n  6759: a3 = reverse a3\n  6761: a4 = s1 + 0x7ff\n  6765: a4 = a4 + 0xb9\n  6769: u64 [a4 + 0xa0] = a3\n  6773: u64 [a4 + 0x98] = a2\n  6777: u64 [a4 + 0x90] = a1\n  6781: u64 [a4 + 0x88] = a0\n  6785: a0 = s1 + 0x7ff\n  6789: a0 = a0 + 0x141\n  6793: a1 = u64 [s1 + 0x88]\n  6797: ra = 156, jump @22\n      : @174 [@dyn 78] (gas: 3)\n  6803: a0 = s1 + 0x320\n  6807: a1 = 0x40\n  6810: ra = 158, jump @17\n      : @175 [@dyn 79] (gas: 6)\n  6816: a4 = s1 + 0x300\n  6820: a0 = u64 [a4 + 0x38]\n  6823: a1 = u64 [a4 + 0x30]\n  6826: a2 = u64 [a4 + 0x28]\n  6829: a3 = u64 [a4 + 0x20]\n  6832: t0 = 160, jump @710\n      : @176 [@dyn 80] (gas: 1)\n  6838: jump @184 if a0 != 0\n      : @177 (gas: 13)\n  6842: a0 = u64 [s1 + 0x60]\n  6845: a2 = s1 + 0x300\n  6849: u64 [a2] = a0\n  6851: a0 = u64 [s1 + 0x58]\n  6854: u64 [a2 + 0x8] = a0\n  6857: a0 = u64 [s1 + 0x68]\n  6860: u64 [a2 + 0x10] = a0\n  6863: a1 = s1 + 0x300\n  6867: a0 = u64 [s1 + 0x70]\n  6870: u64 [a2 + 0x18] = a0\n  6873: a0 = a3\n  6875: u64 [s1 + 0x130] = a3\n  6879: ra = 162, jump @19\n      : @178 [@dyn 81] (gas: 6)\n  6885: a0 = u64 [s1 + 0x128]\n  6889: ra = 0xa4\n  6893: ecalli 3 // 'caller'\n  6895: a2 = u64 [s1 + 0x138]\n  6899: t0 = 0xa6\n  6903: jump @709\n      : @179 [@dyn 82] (gas: 2)\n  6906: a2 = u64 [s1 + 0x138]\n  6910: t0 = 166, jump @709\n      : @180 [@dyn 83] (gas: 28)\n  6916: t0 = a1 | a0\n  6919: a3 = a3 >> 0x20\n  6922: a2 = reverse a2\n  6924: a1 = a2 << 0x20\n  6927: a1 = a1 | a3\n  6930: a2 = a2 >> 0x20\n  6933: u64 [s1 + 696] = 0\n  6937: u64 [s1 + 728] = 0\n  6941: u64 [s1 + 720] = 0\n  6945: u64 [s1 + 712] = 0\n  6949: u64 [s1 + 704] = 0\n  6953: a3 = u64 [0x20000]\n  6958: a4 = u64 [0x20008]\n  6963: a5 = u64 [0x20010]\n  6968: a0 = u64 [0x20018]\n  6973: u64 [s1 + 0x2f8] = a3\n  6977: u64 [s1 + 0x2f0] = a4\n  6981: u64 [s1 + 0x2e8] = a5\n  6985: u64 [s1 + 0x2e0] = a0\n  6989: u64 [s1 + 0x2b0] = a2\n  6993: u64 [s1 + 0x2a8] = a1\n  6997: a1 = 0x20\n  7000: a2 = s1 + 0x2e0\n  7004: a3 = s1 + 0x2c0\n  7008: a4 = s1 + 0x2a0\n  7012: u64 [s1 + 0x2a0] = t0\n  7016: a0 = u64 [s1 + 0x130]\n  7020: ra = 168, jump @23\n      : @181 [@dyn 84] (gas: 3)\n  7026: a0 = s1 + 0x280\n  7030: a1 = 0x40\n  7033: ra = 170, jump @17\n      : @182 [@dyn 85] (gas: 6)\n  7039: a4 = s1 + 0x200\n  7043: a3 = u64 [a4 + 0x98]\n  7047: a1 = u64 [a4 + 0x90]\n  7051: a2 = u64 [a4 + 0x88]\n  7055: a0 = u64 [a4 + 0x80]\n  7059: t0 = 172, jump @718\n      : @183 [@dyn 86] (gas: 1)\n  7065: jump @214 if a1 == 0\n      : @184 (gas: 1)\n  7069: trap\n      : @185 (gas: 6)\n  7070: a1 = 0x200a0\n  7075: i32 a1 = a1 + 0\n  7077: a0 = 0x1\n  7080: a2 = 0\n  7082: ecalli 7 // 'seal_return'\n  7084: jump @189\n      : @186 (gas: 6)\n  7086: a1 = 0x200a0\n  7091: i32 a1 = a1 + 0\n  7093: a0 = 0x1\n  7096: a2 = 0\n  7098: ecalli 7 // 'seal_return'\n  7100: jump @189\n      : @187 (gas: 6)\n  7102: a1 = 0x200a0\n  7107: i32 a1 = a1 + 0\n  7109: a0 = 0x1\n  7112: a2 = 0\n  7114: ecalli 7 // 'seal_return'\n  7116: jump @189\n      : @188 (gas: 6)\n  7118: a1 = 0x200a0\n  7123: i32 a1 = a1 + 0\n  7125: a0 = 0x1\n  7128: a2 = 0\n  7130: ecalli 7 // 'seal_return'\n  7132: fallthrough\n      : @189 (gas: 6)\n  7133: u64 [s1 + 368] = 0\n  7137: u64 [s1 + 360] = 0\n  7141: u64 [s1 + 352] = 0\n  7145: t0 = 0xae\n  7149: a0 = 0x4e487b7100000000\n  7159: fallthrough\n      : @190 [@dyn 87] (gas: 4)\n  7160: a1 = s1 + 0x160\n  7164: u64 [s1 + 0x178] = a0\n  7168: a0 = 0\n  7170: ra = 176, jump @19\n      : @191 [@dyn 88] (gas: 7)\n  7176: u64 [s1 + 344] = 0\n  7180: u64 [s1 + 336] = 0\n  7184: u64 [s1 + 320] = 0x41\n  7189: a0 = 0x4\n  7192: a1 = s1 + 0x140\n  7196: u64 [s1 + 328] = 0\n  7200: ra = 178, jump @19\n      : @192 [@dyn 89] (gas: 2)\n  7206: a1 = i32 [0x2008c]\n  7211: jump @194 if a1 >u 63\n      : @193 (gas: 3)\n  7215: u32 [0x2008c] = 0x40\n  7221: a1 = 0x200a0\n  7226: jump @213\n      : @194 (gas: 2)\n  7229: a1 = 0x200a0\n  7234: jump @213\n      : @195 (gas: 6)\n  7237: u64 [s1 + 432] = 0\n  7241: u64 [s1 + 424] = 0\n  7245: u64 [s1 + 416] = 0\n  7249: t0 = 0xb4\n  7253: a0 = 0x4e487b7100000000\n  7263: fallthrough\n      : @196 [@dyn 90] (gas: 4)\n  7264: a1 = s1 + 0x1a0\n  7268: u64 [s1 + 0x1b8] = a0\n  7272: a0 = 0\n  7274: ra = 182, jump @19\n      : @197 [@dyn 91] (gas: 7)\n  7280: u64 [s1 + 408] = 0\n  7284: u64 [s1 + 400] = 0\n  7288: u64 [s1 + 384] = 0x22\n  7293: a0 = 0x4\n  7296: a1 = s1 + 0x180\n  7300: u64 [s1 + 392] = 0\n  7304: ra = 184, jump @19\n      : @198 [@dyn 92] (gas: 2)\n  7310: a1 = i32 [0x2008c]\n  7315: jump @200 if a1 >u 63\n      : @199 (gas: 3)\n  7319: u32 [0x2008c] = 0x40\n  7325: a1 = 0x200a0\n  7330: jump @213\n      : @200 (gas: 2)\n  7333: a1 = 0x200a0\n  7338: jump @213\n      : @201 (gas: 6)\n  7341: u64 [s1 + 528] = 0\n  7345: u64 [s1 + 520] = 0\n  7349: u64 [s1 + 512] = 0\n  7353: t0 = 0xba\n  7357: a0 = 0x4e487b7100000000\n  7367: fallthrough\n      : @202 [@dyn 93] (gas: 4)\n  7368: a1 = s1 + 0x200\n  7372: u64 [s1 + 0x218] = a0\n  7376: a0 = 0\n  7378: ra = 188, jump @19\n      : @203 [@dyn 94] (gas: 7)\n  7384: u64 [s1 + 504] = 0\n  7388: u64 [s1 + 496] = 0\n  7392: u64 [s1 + 480] = 0x41\n  7397: a0 = 0x4\n  7400: a1 = s1 + 0x1e0\n  7404: u64 [s1 + 488] = 0\n  7408: ra = 190, jump @19\n      : @204 [@dyn 95] (gas: 2)\n  7414: a1 = i32 [0x2008c]\n  7419: jump @206 if a1 >u 63\n      : @205 (gas: 3)\n  7423: u32 [0x2008c] = 0x40\n  7429: a1 = 0x200a0\n  7434: jump @213\n      : @206 (gas: 2)\n  7436: a1 = 0x200a0\n  7441: jump @213\n      : @207 (gas: 6)\n  7443: u64 [s1 + 592] = 0\n  7447: u64 [s1 + 584] = 0\n  7451: u64 [s1 + 576] = 0\n  7455: t0 = 0xc0\n  7459: a0 = 0x4e487b7100000000\n  7469: fallthrough\n      : @208 [@dyn 96] (gas: 4)\n  7470: a1 = s1 + 0x240\n  7474: u64 [s1 + 0x258] = a0\n  7478: a0 = 0\n  7480: ra = 194, jump @19\n      : @209 [@dyn 97] (gas: 7)\n  7486: u64 [s1 + 568] = 0\n  7490: u64 [s1 + 560] = 0\n  7494: u64 [s1 + 544] = 0x22\n  7499: a0 = 0x4\n  7502: a1 = s1 + 0x220\n  7506: u64 [s1 + 552] = 0\n  7510: ra = 196, jump @19\n      : @210 [@dyn 98] (gas: 2)\n  7516: a1 = i32 [0x2008c]\n  7521: jump @212 if a1 >u 63\n      : @211 (gas: 3)\n  7525: u32 [0x2008c] = 0x40\n  7531: a1 = 0x200a0\n  7536: jump @213\n      : @212 (gas: 2)\n  7538: a1 = 0x200a0\n  7543: fallthrough\n      : @213 (gas: 7)\n  7544: i32 a1 = a1 + 0\n  7546: a0 = 0x1\n  7549: a2 = 0x24\n  7552: ecalli 7 // 'seal_return'\n  7554: u64 [s1 + 0x138] = a0\n  7558: ra = 0xc6\n  7562: jump @26\n      : @214 (gas: 2)\n  7565: u64 [s1 + 0x138] = a0\n  7569: ra = 198, jump @26\n      : @215 [@dyn 99] (gas: 5)\n  7575: i32 a0 = a0 + 0\n  7577: a1 = 0\n  7579: a2 = 0\n  7581: ecalli 0 // 'call_data_copy'\n  7582: jump @15\n      : @216 (gas: 3)\n  7585: a0 = u64 [s1 + 0x138]\n  7589: a1 = 0\n  7591: ra = 200, jump @26\n      : @217 [@dyn 100] (gas: 5)\n  7597: i32 a1 = a0 + 0\n  7599: a0 = 0\n  7601: a2 = 0\n  7603: ecalli 7 // 'seal_return'\n  7605: jump @189\n      : @218 [@dyn 101] (gas: 4)\n  7608: a0 = 0x20088\n  7613: u64 [s1 + 0xb8] = a0\n  7617: a0 = i32 [0x20088]\n  7622: jump @220 if a0 >=u 4\n      : @219 (gas: 1)\n  7626: jump @550\n      : @220 (gas: 6)\n  7629: a0 = s1 + 0x1000\n  7633: i32 a0 = a0 + 0x160\n  7637: a1 = 0\n  7639: ra = 0xcc\n  7643: ecalli 1 // 'call_data_load'\n  7645: fallthrough\n      : @221 [@dyn 102] (gas: 3)\n  7646: a2 = s1 + 0x1030\n  7650: a0 = i32 [a2 + 0x14c]\n  7654: jump @223 if a0 != 2514000705\n      : @222 (gas: 1)\n  7661: jump @451\n      : @223 (gas: 1)\n  7664: jump @334 if a0 == 2835717307\n      : @224 (gas: 1)\n  7672: jump @226 if a0 != 3714247998\n      : @225 (gas: 1)\n  7679: jump @432\n      : @226 (gas: 1)\n  7682: jump @228 if a0 != 117300739\n      : @227 (gas: 1)\n  7689: jump @403\n      : @228 (gas: 1)\n  7692: jump @244 if a0 == 157198259\n      : @229 (gas: 1)\n  7700: jump @322 if a0 == 404098525\n      : @230 (gas: 1)\n  7708: jump @275 if a0 == 599290589\n      : @231 (gas: 1)\n  7716: jump @233 if a0 == 826074471\n      : @232 (gas: 1)\n  7723: jump @384\n      : @233 (gas: 8)\n  7726: u64 [a2 + 744] = 0\n  7730: u64 [a2 + 736] = 0\n  7734: u64 [a2 + 728] = 0\n  7738: u64 [a2 + 720] = 0\n  7742: a0 = s1 + 0x1000\n  7746: i32 a0 = a0 + 0x300\n  7750: ecalli 10 // 'value_transferred'\n  7752: fallthrough\n      : @234 (gas: 10)\n  7753: a3 = s1 + 0x1030\n  7757: a4 = a3 + 0x200\n  7761: a0 = u64 [a4 + 0xe0]\n  7765: a1 = u64 [a4 + 0xe8]\n  7769: a2 = u64 [a4 + 0xd8]\n  7773: a3 = u64 [a4 + 0xd0]\n  7777: a1 = a1 | a2\n  7780: a0 = a0 | a3\n  7783: a0 = a0 | a1\n  7786: jump @236 if a0 == 0\n      : @235 (gas: 1)\n  7789: jump @552\n      : @236 (gas: 3)\n  7792: a0 = u64 [s1 + 0xb8]\n  7796: a0 = i32 [a0]\n  7798: jump @238 if a0 >u 3\n      : @237 (gas: 1)\n  7802: jump @553\n      : @238 (gas: 9)\n  7805: a1 = s1 + 0x1030\n  7809: u64 [a1 + 776] = 0\n  7813: u64 [a1 + 768] = 0\n  7817: u64 [a1 + 760] = 0\n  7821: u64 [a1 + 752] = 0x2\n  7826: a0 = s1 + 0x7ff\n  7830: a0 = a0 + 0x241\n  7834: a1 = s1 + 0x1320\n  7838: ra = 206, jump @21\n      : @239 [@dyn 103] (gas: 8)\n  7844: a0 = s1 + 0x7ff\n  7848: a0 = a0 + 0x31\n  7851: a0 = u64 [a0 + 0x210]\n  7855: u64 [s1 + 0xb8] = a0\n  7859: a0 = s1 + 0x7ff\n  7863: a0 = a0 + 0x221\n  7867: a1 = 0x40\n  7870: ra = 208, jump @17\n      : @240 [@dyn 104] (gas: 7)\n  7876: a3 = s1 + 0x7ff\n  7880: a3 = a3 + 0x31\n  7883: a4 = u64 [a3 + 0x208]\n  7887: a1 = u64 [a3 + 0x200]\n  7891: a2 = u64 [a3 + 0x1f8]\n  7895: a0 = u64 [a3 + 0x1f0]\n  7899: t0 = 210, jump @719\n      : @241 [@dyn 105] (gas: 1)\n  7905: jump @243 if a1 == 0\n      : @242 (gas: 1)\n  7908: jump @525\n      : @243 (gas: 10)\n  7911: a1 = u8 [s1 + 0xb8]\n  7915: u64 [a3 + 488] = 0\n  7919: u64 [a3 + 480] = 0\n  7923: u64 [a3 + 0x1d0] = a1\n  7927: a1 = s1 + 0x7ff\n  7931: a1 = a1 + 0x201\n  7935: u64 [a3 + 472] = 0\n  7939: u64 [s1 + 0xb8] = a0\n  7943: ra = 0x24a\n  7947: jump @19\n      : @244 (gas: 10)\n  7950: u64 [a2 + 424] = 0\n  7954: u64 [a2 + 416] = 0\n  7958: u64 [a2 + 408] = 0\n  7962: u64 [a2 + 400] = 0\n  7966: a0 = s1 + 0x1000\n  7970: i32 a0 = a0 + 0x1c0\n  7974: ra = 0xd4\n  7978: ecalli 10 // 'value_transferred'\n  7980: t0 = 0xd6\n  7984: jump @726\n      : @245 [@dyn 106] (gas: 1)\n  7987: t0 = 214, jump @726\n      : @246 [@dyn 107] (gas: 8)\n  7993: a0 = u64 [a4 + 0xa0]\n  7997: a1 = u64 [a4 + 0xa8]\n  8001: a2 = u64 [a4 + 0x98]\n  8005: a3 = u64 [a4 + 0x90]\n  8009: a1 = a1 | a2\n  8012: a0 = a0 | a3\n  8015: a0 = a0 | a1\n  8018: jump @248 if a0 == 0\n      : @247 (gas: 1)\n  8021: jump @554\n      : @248 (gas: 4)\n  8024: a0 = u64 [s1 + 0xb8]\n  8028: a0 = i32 [a0]\n  8030: a1 = 0x43\n  8033: jump @250 if a1 <u a0\n      : @249 (gas: 1)\n  8036: jump @555\n      : @250 (gas: 4)\n  8039: a0 = s1 + 0x420\n  8043: ra = 0xd8\n  8047: t0 = 0x280\n  8051: jump @724\n      : @251 [@dyn 108] (gas: 38)\n  8054: a0 = u64 [s1 + 0x430]\n  8058: u64 [s1 + 0x98] = a0\n  8062: a0 = u64 [s1 + 0x428]\n  8066: u64 [s1 + 0xa8] = a0\n  8070: a0 = u64 [s1 + 0x420]\n  8074: u64 [s1 + 0xb0] = a0\n  8078: a0 = sp + 0xffffffffffffffe0\n  8081: a0 = a0 & 0xffffffffffffffe0\n  8084: u64 [s1 + 0xb8] = a0\n  8088: sp = a0\n  8090: a0 = s1 + 0x1000\n  8094: i32 a0 = a0 + 0x1e0\n  8098: a1 = 0x24\n  8101: ecalli 1 // 'call_data_load'\n  8103: a0 = s1 + 0x1030\n  8107: a4 = a0 + 0x100\n  8111: a1 = u64 [a4 + 0xc8]\n  8115: a2 = u64 [a4 + 0xc0]\n  8119: a3 = u64 [a4 + 0xb8]\n  8123: a0 = u64 [a4 + 0xb0]\n  8127: u64 [s1 + 0x58] = a1\n  8130: a4 = u64 [s1 + 0xb8]\n  8134: u64 [a4 + 0x18] = a1\n  8137: u64 [s1 + 0x50] = a2\n  8140: u64 [a4 + 0x10] = a2\n  8143: u64 [s1 + 0x40] = a3\n  8146: u64 [a4 + 0x8] = a3\n  8149: u64 [s1 + 0x38] = a0\n  8152: u64 [a4] = a0\n  8154: a0 = 0x300a0\n  8159: u64 [s1 + 0xa0] = a0\n  8163: i32 a0 = a0 + 0\n  8165: u64 [s1 + 0x48] = a0\n  8168: ra = 0xda\n  8172: ecalli 3 // 'caller'\n  8174: a2 = u64 [s1 + 0xa0]\n  8178: t0 = 0xdc\n  8182: jump @698\n      : @252 [@dyn 109] (gas: 2)\n  8185: a2 = u64 [s1 + 0xa0]\n  8189: t0 = 220, jump @698\n      : @253 [@dyn 110] (gas: 8)\n  8195: u64 [s1 + 1048] = 0\n  8199: a2 = s1 + 0x400\n  8203: u64 [a2 + 0x10] = a1\n  8206: u64 [a2 + 0x8] = a0\n  8209: a1 = s1 + 0x400\n  8213: u64 [a2] = a3\n  8215: a0 = 0\n  8217: ra = 222, jump @19\n      : @254 [@dyn 111] (gas: 7)\n  8223: u64 [s1 + 1016] = 0\n  8227: u64 [s1 + 1008] = 0\n  8231: u64 [s1 + 992] = 0x5\n  8236: a0 = 0x20\n  8239: a1 = s1 + 0x3e0\n  8243: u64 [s1 + 1000] = 0\n  8247: ra = 224, jump @19\n      : @255 [@dyn 112] (gas: 3)\n  8253: a1 = 0x2008c\n  8258: a0 = i32 [0x2008c]\n  8263: jump @257 if a0 >u 63\n      : @256 (gas: 2)\n  8267: u32 [0x2008c] = 0x40\n  8273: fallthrough\n      : @257 (gas: 41)\n  8274: a0 = sp + 0xffffffffffffffe0\n  8277: a2 = a0 & 0xffffffffffffffe0\n  8280: u64 [s1 + 0x80] = a2\n  8284: sp = a2\n  8286: a0 = 0x200a0\n  8291: i32 a0 = a0 + 0\n  8293: i32 a2 = a2 + 0\n  8295: u64 [s1 + 0x90] = a1\n  8299: a1 = 0x40\n  8302: u64 [s1 + 0x88] = a0\n  8306: ecalli 6 // 'hash_keccak_256'\n  8308: a3 = u64 [s1 + 0x80]\n  8312: a0 = u64 [a3 + 0x18]\n  8315: a1 = u64 [a3 + 0x10]\n  8318: a2 = u64 [a3 + 0x8]\n  8321: a3 = u64 [a3]\n  8323: a0 = reverse a0\n  8325: u64 [s1 + 0x78] = a0\n  8328: a0 = reverse a1\n  8330: u64 [s1 + 0x70] = a0\n  8333: a0 = reverse a2\n  8335: u64 [s1 + 0x68] = a0\n  8338: a0 = reverse a3\n  8340: u64 [s1 + 0x60] = a0\n  8343: a0 = sp + 0xffffffffffffffe0\n  8346: a0 = a0 & 0xffffffffffffffe0\n  8349: u64 [s1 + 0x80] = a0\n  8353: sp = a0\n  8355: a0 = u64 [s1 + 0x98]\n  8359: a0 = a0 << 0x20\n  8362: a0 = a0 >> 0x20\n  8365: u64 [s1 + 984] = 0\n  8369: u64 [s1 + 0x30] = a0\n  8372: u64 [s1 + 0x3d0] = a0\n  8376: a0 = u64 [s1 + 0xa8]\n  8380: u64 [s1 + 0x3c8] = a0\n  8384: a1 = s1 + 0x3c0\n  8388: a0 = u64 [s1 + 0xb0]\n  8392: u64 [s1 + 0x3c0] = a0\n  8396: a0 = 0\n  8398: ra = 226, jump @19\n      : @258 [@dyn 113] (gas: 12)\n  8404: a0 = u64 [s1 + 0x60]\n  8407: a3 = s1 + 0x300\n  8411: u64 [a3 + 0xb8] = a0\n  8415: a0 = u64 [s1 + 0x68]\n  8418: u64 [a3 + 0xb0] = a0\n  8422: a0 = u64 [s1 + 0x70]\n  8425: u64 [a3 + 0xa8] = a0\n  8429: a0 = 0x20\n  8432: a1 = s1 + 0x3a0\n  8436: a2 = u64 [s1 + 0x78]\n  8439: u64 [a3 + 0xa0] = a2\n  8443: ra = 228, jump @19\n      : @259 [@dyn 114] (gas: 3)\n  8449: a1 = u64 [s1 + 0x90]\n  8453: a0 = i32 [a1]\n  8455: jump @261 if a0 >u 63\n      : @260 (gas: 2)\n  8459: u32 [a1 + 0] = 0x40\n  8462: fallthrough\n      : @261 (gas: 24)\n  8463: a0 = sp + 0xffffffffffffffe0\n  8466: a0 = a0 & 0xffffffffffffffe0\n  8469: u64 [s1 + 0x98] = a0\n  8473: sp = a0\n  8475: i32 a2 = a0 + 0\n  8477: a1 = 0x40\n  8480: a0 = u64 [s1 + 0x88]\n  8484: ecalli 6 // 'hash_keccak_256'\n  8486: a3 = u64 [s1 + 0x98]\n  8490: a0 = u64 [a3 + 0x18]\n  8493: a1 = u64 [a3 + 0x10]\n  8496: a2 = u64 [a3 + 0x8]\n  8499: a3 = u64 [a3]\n  8501: a4 = reverse a0\n  8503: a1 = reverse a1\n  8505: a2 = reverse a2\n  8507: a3 = reverse a3\n  8509: a0 = u64 [s1 + 0x80]\n  8513: u64 [a0 + 0x18] = a3\n  8516: u64 [a0 + 0x10] = a2\n  8519: u64 [a0 + 0x8] = a1\n  8522: u64 [a0] = a4\n  8524: a1 = u64 [s1 + 0xb8]\n  8528: ra = 230, jump @22\n      : @262 [@dyn 115] (gas: 3)\n  8534: a0 = s1 + 0x380\n  8538: a1 = 0x40\n  8541: ra = 232, jump @17\n      : @263 [@dyn 116] (gas: 6)\n  8547: a4 = s1 + 0x300\n  8551: a0 = u64 [a4 + 0x98]\n  8555: a1 = u64 [a4 + 0x90]\n  8559: a2 = u64 [a4 + 0x88]\n  8563: a3 = u64 [a4 + 0x80]\n  8567: t0 = 234, jump @710\n      : @264 [@dyn 117] (gas: 1)\n  8573: jump @266 if a0 == 0\n      : @265 (gas: 1)\n  8576: jump @525\n      : @266 (gas: 12)\n  8579: a0 = u64 [s1 + 0x38]\n  8582: u64 [s1 + 0x360] = a0\n  8586: a0 = u64 [s1 + 0x40]\n  8589: u64 [s1 + 0x368] = a0\n  8593: a0 = u64 [s1 + 0x50]\n  8596: u64 [s1 + 0x370] = a0\n  8600: a1 = s1 + 0x360\n  8604: a0 = u64 [s1 + 0x58]\n  8607: u64 [s1 + 0x378] = a0\n  8611: a0 = a3\n  8613: u64 [s1 + 0xb8] = a3\n  8617: ra = 236, jump @19\n      : @267 [@dyn 118] (gas: 6)\n  8623: a0 = u64 [s1 + 0x48]\n  8626: ra = 0xee\n  8630: ecalli 3 // 'caller'\n  8632: a2 = u64 [s1 + 0xa0]\n  8636: t0 = 0xf0\n  8640: jump @709\n      : @268 [@dyn 119] (gas: 2)\n  8643: a2 = u64 [s1 + 0xa0]\n  8647: t0 = 240, jump @709\n      : @269 [@dyn 120] (gas: 32)\n  8653: t0 = a1 | a0\n  8656: a3 = a3 >> 0x20\n  8659: a2 = reverse a2\n  8661: a1 = a2 << 0x20\n  8664: a1 = a1 | a3\n  8667: a2 = a2 >> 0x20\n  8670: u64 [s1 + 792] = 0\n  8674: a0 = u64 [s1 + 0x30]\n  8677: u64 [s1 + 0x310] = a0\n  8681: a0 = u64 [s1 + 0xa8]\n  8685: u64 [s1 + 0x308] = a0\n  8689: a0 = u64 [s1 + 0xb0]\n  8693: u64 [s1 + 0x300] = a0\n  8697: u64 [s1 + 824] = 0\n  8701: a3 = u64 [0x20058]\n  8706: a4 = u64 [0x20060]\n  8711: a5 = u64 [0x20068]\n  8716: a0 = u64 [0x20070]\n  8721: u64 [s1 + 0x358] = a3\n  8725: a3 = s1 + 0x300\n  8729: u64 [a3 + 0x50] = a4\n  8732: u64 [a3 + 0x48] = a5\n  8735: u64 [a3 + 0x40] = a0\n  8738: u64 [a3 + 0x30] = a2\n  8741: u64 [a3 + 0x28] = a1\n  8744: a1 = 0x20\n  8747: a2 = s1 + 0x340\n  8751: a3 = s1 + 0x320\n  8755: a4 = s1 + 0x300\n  8759: u64 [s1 + 0x320] = t0\n  8763: a0 = u64 [s1 + 0xb8]\n  8767: ra = 242, jump @23\n      : @270 [@dyn 121] (gas: 3)\n  8773: a0 = s1 + 0x2e0\n  8777: a1 = 0x40\n  8780: ra = 244, jump @17\n      : @271 [@dyn 122] (gas: 6)\n  8786: a4 = s1 + 0x200\n  8790: a3 = u64 [a4 + 0xf8]\n  8794: a1 = u64 [a4 + 0xf0]\n  8798: a2 = u64 [a4 + 0xe8]\n  8802: a0 = u64 [a4 + 0xe0]\n  8806: t0 = 246, jump @718\n      : @272 [@dyn 123] (gas: 1)\n  8812: jump @274 if a1 == 0\n      : @273 (gas: 1)\n  8815: jump @525\n      : @274 (gas: 8)\n  8818: u64 [s1 + 728] = 0\n  8822: u64 [s1 + 720] = 0\n  8826: u64 [s1 + 712] = 0\n  8830: a1 = s1 + 0x2c0\n  8834: u64 [s1 + 704] = 0x1\n  8839: u64 [s1 + 0xb8] = a0\n  8843: ra = 0x24a\n  8847: jump @19\n      : @275 (gas: 9)\n  8850: u64 [a2 + 552] = 0\n  8854: u64 [a2 + 544] = 0\n  8858: u64 [a2 + 536] = 0\n  8862: u64 [a2 + 528] = 0\n  8866: a0 = s1 + 0x1000\n  8870: i32 a0 = a0 + 0x240\n  8874: ra = 0xf8\n  8878: ecalli 10 // 'value_transferred'\n  8880: fallthrough\n      : @276 [@dyn 124] (gas: 10)\n  8881: a3 = s1 + 0x1030\n  8885: a4 = a3 + 0x200\n  8889: a0 = u64 [a4 + 0x20]\n  8892: a1 = u64 [a4 + 0x28]\n  8895: a2 = u64 [a4 + 0x18]\n  8898: a3 = u64 [a4 + 0x10]\n  8901: a1 = a1 | a2\n  8904: a0 = a0 | a3\n  8907: a0 = a0 | a1\n  8910: jump @278 if a0 == 0\n      : @277 (gas: 1)\n  8913: jump @556\n      : @278 (gas: 4)\n  8916: a0 = u64 [s1 + 0xb8]\n  8920: a0 = i32 [a0]\n  8922: a1 = 0x63\n  8925: jump @280 if a1 <u a0\n      : @279 (gas: 1)\n  8928: jump @557\n      : @280 (gas: 5)\n  8931: a0 = s1 + 0x7ff\n  8935: a0 = a0 + 0x1e1\n  8939: ra = 0xfa\n  8943: t0 = 0x280\n  8947: jump @724\n      : @281 [@dyn 125] (gas: 13)\n  8950: a1 = s1 + 0x7ff\n  8954: a1 = a1 + 0x31\n  8957: a0 = u64 [a1 + 0x1b0]\n  8961: u64 [s1 + 0x88] = a0\n  8965: a0 = u64 [a1 + 0x1b8]\n  8969: u64 [s1 + 0x80] = a0\n  8973: a0 = u32 [a1 + 0x1c0]\n  8977: u64 [s1 + 0x78] = a0\n  8980: a0 = s1 + 0x7ff\n  8984: a0 = a0 + 0x1c1\n  8988: ra = 0xfc\n  8992: t0 = 0x28a\n  8996: jump @724\n      : @282 [@dyn 126] (gas: 37)\n  8999: a1 = s1 + 0x7ff\n  9003: a1 = a1 + 0x31\n  9006: a2 = a1 + 0x100\n  9010: a0 = u64 [a2 + 0xa0]\n  9014: u64 [s1 + 0x40] = a0\n  9017: a0 = u64 [a2 + 0x98]\n  9021: u64 [s1 + 0x38] = a0\n  9024: a0 = u64 [a2 + 0x90]\n  9028: u64 [s1 + 0x30] = a0\n  9031: a0 = s1 + 0x1000\n  9035: i32 a0 = a0 + 0x260\n  9039: a1 = 0x44\n  9042: ecalli 1 // 'call_data_load'\n  9044: a0 = s1 + 0x1030\n  9048: a2 = a0 + 0x200\n  9052: a1 = u64 [a2 + 0x48]\n  9055: u64 [s1 + 0xa8] = a1\n  9059: a1 = u64 [a2 + 0x40]\n  9062: u64 [s1 + 0xa0] = a1\n  9066: a1 = u64 [a2 + 0x38]\n  9069: u64 [s1 + 0x98] = a1\n  9073: a0 = u64 [a2 + 0x30]\n  9076: u64 [s1 + 0x90] = a0\n  9080: a0 = s1 + 0x7ff\n  9084: a0 = a0 + 0x31\n  9087: u64 [a0 + 392] = 0\n  9091: a1 = u64 [s1 + 0x78]\n  9094: a3 = a0 + 0x100\n  9098: u64 [a3 + 0x80] = a1\n  9102: a1 = u64 [s1 + 0x80]\n  9106: u64 [a3 + 0x78] = a1\n  9109: a1 = s1 + 0x7ff\n  9113: a1 = a1 + 0x1a1\n  9117: a2 = u64 [s1 + 0x88]\n  9121: u64 [a3 + 0x70] = a2\n  9124: a0 = 0\n  9126: ra = 254, jump @19\n      : @283 [@dyn 127] (gas: 11)\n  9132: a1 = s1 + 0x7ff\n  9136: a1 = a1 + 0x31\n  9139: u64 [a1 + 360] = 0\n  9143: u64 [a1 + 352] = 0\n  9147: u64 [a1 + 336] = 0x4\n  9152: a2 = a1\n  9154: a0 = 0x20\n  9157: a1 = s1 + 0x7ff\n  9161: a1 = a1 + 0x181\n  9165: u64 [a2 + 344] = 0\n  9169: ra = 256, jump @19\n      : @284 [@dyn 128] (gas: 3)\n  9175: a1 = 0x2008c\n  9180: a0 = i32 [0x2008c]\n  9185: jump @286 if a0 >u 63\n      : @285 (gas: 2)\n  9189: u32 [0x2008c] = 0x40\n  9195: fallthrough\n      : @286 (gas: 30)\n  9196: a0 = sp + 0xffffffffffffffe0\n  9199: a2 = a0 & 0xffffffffffffffe0\n  9202: u64 [s1 + 0x70] = a2\n  9205: sp = a2\n  9207: a0 = 0x200a0\n  9212: i32 a0 = a0 + 0\n  9214: i32 a2 = a2 + 0\n  9216: u64 [s1 + 0xb8] = a1\n  9220: a1 = 0x40\n  9223: u64 [s1 + 0xb0] = a0\n  9227: ecalli 6 // 'hash_keccak_256'\n  9229: a3 = u64 [s1 + 0x70]\n  9232: a0 = u64 [a3 + 0x18]\n  9235: a1 = u64 [a3 + 0x10]\n  9238: a2 = u64 [a3 + 0x8]\n  9241: a3 = u64 [a3]\n  9243: a0 = reverse a0\n  9245: a1 = reverse a1\n  9247: a2 = reverse a2\n  9249: a3 = reverse a3\n  9251: a4 = s1 + 0x1030\n  9255: a5 = a4 + 0x200\n  9259: u64 [a5 + 0x68] = a3\n  9262: u64 [a5 + 0x60] = a2\n  9265: u64 [a5 + 0x58] = a1\n  9268: u64 [a5 + 0x50] = a0\n  9271: a0 = s1 + 0x7ff\n  9275: a0 = a0 + 0x161\n  9279: a1 = s1 + 0x1280\n  9283: ra = 258, jump @21\n      : @287 [@dyn 129] (gas: 31)\n  9289: a4 = s1 + 0x7ff\n  9293: a4 = a4 + 0x31\n  9296: a5 = a4 + 0x100\n  9300: a0 = u64 [a5 + 0x38]\n  9303: a1 = u64 [a5 + 0x30]\n  9306: a2 = u64 [a5 + 0x40]\n  9309: a3 = u64 [a5 + 0x48]\n  9312: t0 = a4\n  9314: a5 = u64 [s1 + 0x98]\n  9318: a4 = a0 ^ a5\n  9321: a0 = a0 <u a5\n  9324: a5 = u64 [s1 + 0x90]\n  9328: a1 = a1 <u a5\n  9331: a1 = a0 if a4 != 0\n  9334: a4 = u64 [s1 + 0xa8]\n  9338: a0 = a3 ^ a4\n  9341: a3 = a3 <u a4\n  9344: a5 = u64 [s1 + 0xa0]\n  9348: a4 = a2 <u a5\n  9351: a4 = a3 if a0 != 0\n  9354: a2 = a2 ^ a5\n  9357: a0 = a0 | a2\n  9360: a1 = a4 if a0 != 0\n  9363: a0 = a1 ^ 0x1\n  9366: u64 [t0 + 296] = 0\n  9370: u64 [t0 + 288] = 0\n  9374: u64 [t0 + 0x110] = a0\n  9378: a0 = s1 + 0x7ff\n  9382: a0 = a0 + 0x141\n  9386: u64 [t0 + 280] = 0\n  9390: ra = 260, jump @663\n      : @288 [@dyn 130] (gas: 13)\n  9396: a2 = s1 + 0x7ff\n  9400: a2 = a2 + 0x31\n  9403: u64 [a2 + 264] = 0\n  9407: a0 = u64 [s1 + 0x78]\n  9410: u64 [a2 + 0x100] = a0\n  9414: a0 = u64 [s1 + 0x80]\n  9418: u64 [a2 + 0xf8] = a0\n  9422: a1 = s1 + 0x7ff\n  9426: a1 = a1 + 0x121\n  9430: a0 = u64 [s1 + 0x88]\n  9434: u64 [a2 + 0xf0] = a0\n  9438: a0 = 0\n  9440: ra = 262, jump @19\n      : @289 [@dyn 131] (gas: 11)\n  9446: a1 = s1 + 0x7ff\n  9450: a1 = a1 + 0x31\n  9453: u64 [a1 + 232] = 0\n  9457: u64 [a1 + 224] = 0\n  9461: u64 [a1 + 208] = 0x5\n  9466: a2 = a1\n  9468: a0 = 0x20\n  9471: a1 = s1 + 0x7ff\n  9475: a1 = a1 + 0x101\n  9479: u64 [a2 + 216] = 0\n  9483: ra = 264, jump @19\n      : @290 [@dyn 132] (gas: 3)\n  9489: a1 = u64 [s1 + 0xb8]\n  9493: a0 = i32 [a1]\n  9495: jump @292 if a0 >u 63\n      : @291 (gas: 2)\n  9499: u32 [a1 + 0] = 0x40\n  9502: fallthrough\n      : @292 (gas: 4)\n  9503: a0 = sp + 0xffffffffffffffe0\n  9506: a0 = a0 & 0xffffffffffffffe0\n  9509: u64 [s1 + 0x70] = a0\n  9512: t0 = 266, jump @713\n      : @293 [@dyn 133] (gas: 5)\n  9518: ra = 0x10c\n  9522: ecalli 6 // 'hash_keccak_256'\n  9524: a3 = u64 [s1 + 0x70]\n  9527: t0 = 0x10e\n  9531: jump @701\n      : @294 [@dyn 134] (gas: 2)\n  9534: a3 = u64 [s1 + 0x70]\n  9537: t0 = 270, jump @701\n      : @295 [@dyn 135] (gas: 9)\n  9543: a0 = 0x300a0\n  9548: u64 [s1 + 0x70] = a0\n  9551: i32 a0 = a0 + 0\n  9553: u64 [s1 + 0x28] = a0\n  9556: ra = 0x110\n  9560: ecalli 3 // 'caller'\n  9562: a2 = u64 [s1 + 0x70]\n  9565: t0 = 0x112\n  9569: jump @695\n      : @296 [@dyn 136] (gas: 2)\n  9572: a2 = u64 [s1 + 0x70]\n  9575: t0 = 274, jump @695\n      : @297 [@dyn 137] (gas: 8)\n  9581: u64 [a2 + 200] = 0\n  9585: u64 [a2 + 0xc0] = a1\n  9589: u64 [a2 + 0xb8] = a0\n  9593: a1 = s1 + 0x7ff\n  9597: a1 = a1 + 0xe1\n  9601: u64 [a2 + 0xb0] = a3\n  9605: a0 = 0\n  9607: ra = 276, jump @19\n      : @298 [@dyn 138] (gas: 15)\n  9613: a0 = u64 [s1 + 0x48]\n  9616: a1 = s1 + 0x7ff\n  9620: a1 = a1 + 0x31\n  9623: u64 [a1 + 0xa8] = a0\n  9627: a0 = u64 [s1 + 0x50]\n  9630: u64 [a1 + 0xa0] = a0\n  9634: a0 = u64 [s1 + 0x58]\n  9637: u64 [a1 + 0x98] = a0\n  9641: a3 = a1\n  9643: a0 = 0x20\n  9646: a1 = s1 + 0x7ff\n  9650: a1 = a1 + 0xc1\n  9654: a2 = u64 [s1 + 0x60]\n  9657: u64 [a3 + 0x90] = a2\n  9661: ra = 278, jump @19\n      : @299 [@dyn 139] (gas: 3)\n  9667: a1 = u64 [s1 + 0xb8]\n  9671: a0 = i32 [a1]\n  9673: jump @301 if a0 >=u 64\n      : @300 (gas: 2)\n  9677: u32 [a1 + 0] = 0x40\n  9680: fallthrough\n      : @301 (gas: 4)\n  9681: a0 = sp + 0xffffffffffffffe0\n  9684: a0 = a0 & 0xffffffffffffffe0\n  9687: u64 [s1 + 0x60] = a0\n  9690: t0 = 280, jump @713\n      : @302 [@dyn 140] (gas: 5)\n  9696: ra = 0x11a\n  9700: ecalli 6 // 'hash_keccak_256'\n  9702: a3 = u64 [s1 + 0x60]\n  9705: t0 = 0x11c\n  9709: jump @703\n      : @303 [@dyn 141] (gas: 2)\n  9712: a3 = u64 [s1 + 0x60]\n  9715: t0 = 284, jump @703\n      : @304 [@dyn 142] (gas: 2)\n  9721: a0 = a0 + 0xa1\n  9725: ra = 286, jump @21\n      : @305 [@dyn 143] (gas: 23)\n  9731: t0 = s1 + 0x7ff\n  9735: t0 = t0 + 0x31\n  9738: a2 = t0\n  9740: a0 = u64 [a2 + 0x78]\n  9743: a1 = u64 [a2 + 0x70]\n  9746: a5 = u64 [a2 + 0x80]\n  9750: a3 = u64 [a2 + 0x88]\n  9754: a2 = u64 [s1 + 0x98]\n  9758: a4 = a0 ^ a2\n  9761: a0 = a0 <u a2\n  9764: a2 = u64 [s1 + 0x90]\n  9768: a1 = a1 <u a2\n  9771: a1 = a0 if a4 != 0\n  9774: a4 = u64 [s1 + 0xa8]\n  9778: a0 = a3 ^ a4\n  9781: a3 = a3 <u a4\n  9784: a2 = u64 [s1 + 0xa0]\n  9788: a4 = a5 <u a2\n  9791: a4 = a3 if a0 != 0\n  9794: a2 = a2 ^ a5\n  9797: a0 = a0 | a2\n  9800: a1 = a4 if a0 != 0\n  9803: jump @307 if a1 != 0\n      : @306 (gas: 1)\n  9806: jump @478\n      : @307 (gas: 3)\n  9809: a0 = s1 + 0x520\n  9813: a1 = 0x40\n  9816: ra = 288, jump @17\n      : @308 [@dyn 144] (gas: 13)\n  9822: a1 = s1 + 0x500\n  9826: a4 = u64 [a1 + 0x38]\n  9829: a5 = u64 [a1 + 0x30]\n  9832: a3 = u64 [a1 + 0x28]\n  9835: a0 = u64 [a1 + 0x20]\n  9838: a2 = a3 | a4\n  9841: a1 = a0 | a5\n  9844: a1 = a1 | a2\n  9847: a1 = a1 >> 0x20\n  9850: a2 = a2 | a5\n  9853: a2 = a2 << 0x20\n  9856: a1 = a1 | a2\n  9859: jump @310 if a1 == 0\n      : @309 (gas: 1)\n  9862: jump @525\n      : @310 (gas: 11)\n  9865: u64 [s1 + 1296] = 0\n  9869: u64 [s1 + 1288] = 0\n  9873: u64 [s1 + 1280] = 0\n  9877: a2 = 0x8c379a000000000\n  9887: a1 = s1 + 0x500\n  9891: u64 [s1 + 0x518] = a2\n  9895: u64 [s1 + 0xb8] = a0\n  9899: u64 [s1 + 0xb0] = a3\n  9903: u64 [s1 + 0xa8] = a4\n  9907: u64 [s1 + 0xa0] = a5\n  9911: ra = 290, jump @19\n      : @311 [@dyn 145] (gas: 11)\n  9917: a1 = u64 [s1 + 0xb8]\n  9921: a0 = u64 [s1 + 0xa8]\n  9925: a3 = u64 [s1 + 0xa0]\n  9929: a3 = a3 | a0\n  9932: a4 = 0x100000000\n  9942: a0 = 0xfffffffc\n  9952: a0 = a1 <u a0\n  9955: a2 = u64 [s1 + 0xb0]\n  9959: a0 = 0 if a2 != 0\n  9961: a0 = 0 if a3 != 0\n  9963: jump @313 if a0 != 0\n      : @312 (gas: 1)\n  9966: jump @525\n      : @313 (gas: 9)\n  9969: i32 a0 = a1 + 0x4\n  9972: u64 [s1 + 1272] = 0\n  9976: u64 [s1 + 1264] = 0\n  9980: u64 [s1 + 1248] = 0x20\n  9985: a1 = s1 + 0x4e0\n  9989: u64 [s1 + 1256] = 0\n  9993: u64 [s1 + 0xa8] = a3\n  9997: u64 [s1 + 0xa0] = a4\n 10001: ra = 292, jump @19\n      : @314 [@dyn 146] (gas: 9)\n 10007: a3 = u64 [s1 + 0xa8]\n 10011: a2 = u64 [s1 + 0xb0]\n 10015: a1 = u64 [s1 + 0xb8]\n 10019: a0 = u64 [s1 + 0xa0]\n 10023: a0 = a0 + 0xffffffffffffffdc\n 10026: a0 = a1 <u a0\n 10029: a0 = 0 if a2 != 0\n 10031: a0 = 0 if a3 != 0\n 10033: jump @316 if a0 != 0\n      : @315 (gas: 1)\n 10036: jump @525\n      : @316 (gas: 7)\n 10039: i32 a0 = a1 + 0x24\n 10042: u64 [s1 + 1240] = 0\n 10046: u64 [s1 + 1232] = 0\n 10050: u64 [s1 + 1216] = 0x16\n 10055: a1 = s1 + 0x4c0\n 10059: u64 [s1 + 1224] = 0\n 10063: ra = 294, jump @19\n      : @317 [@dyn 147] (gas: 8)\n 10069: a2 = u64 [s1 + 0xb8]\n 10073: a0 = 0xffffffbc\n 10083: a0 = a2 <u a0\n 10086: a1 = u64 [s1 + 0xb0]\n 10090: a0 = 0 if a1 != 0\n 10092: a1 = u64 [s1 + 0xa8]\n 10096: a0 = 0 if a1 != 0\n 10098: jump @319 if a0 != 0\n      : @318 (gas: 1)\n 10101: jump @525\n      : @319 (gas: 11)\n 10104: i32 a0 = a2 + 0x44\n 10107: a1 = u64 [0x20040]\n 10112: a2 = u64 [0x20048]\n 10117: a3 = u64 [0x20050]\n 10122: a4 = s1 + 0x400\n 10126: u64 [a4 + 0xb8] = a1\n 10130: u64 [a4 + 0xb0] = a2\n 10134: u64 [a4 + 0xa8] = a3\n 10138: a1 = s1 + 0x4a0\n 10142: u64 [s1 + 1184] = 0\n 10146: ra = 296, jump @19\n      : @320 [@dyn 148] (gas: 3)\n 10152: a1 = 0x64\n 10155: a0 = u64 [s1 + 0xb8]\n 10159: ra = 298, jump @26\n      : @321 [@dyn 149] (gas: 5)\n 10165: i32 a1 = a0 + 0\n 10167: a0 = 0x1\n 10170: a2 = 0x64\n 10173: ecalli 7 // 'seal_return'\n 10175: fallthrough\n      : @322 (gas: 10)\n 10176: u64 [a2 + 488] = 0\n 10180: u64 [a2 + 480] = 0\n 10184: u64 [a2 + 472] = 0\n 10188: u64 [a2 + 464] = 0\n 10192: a0 = s1 + 0x1000\n 10196: i32 a0 = a0 + 0x200\n 10200: ra = 0x12c\n 10204: ecalli 10 // 'value_transferred'\n 10206: t0 = 0x12e\n 10210: jump @726\n      : @323 [@dyn 150] (gas: 1)\n 10213: t0 = 302, jump @726\n      : @324 [@dyn 151] (gas: 8)\n 10219: a0 = u64 [a4 + 0xe0]\n 10223: a1 = u64 [a4 + 0xe8]\n 10227: a2 = u64 [a4 + 0xd8]\n 10231: a3 = u64 [a4 + 0xd0]\n 10235: a1 = a1 | a2\n 10238: a0 = a0 | a3\n 10241: a0 = a0 | a1\n 10244: jump @326 if a0 == 0\n      : @325 (gas: 1)\n 10247: jump @558\n      : @326 (gas: 3)\n 10250: a0 = u64 [s1 + 0xb8]\n 10254: a1 = i32 [a0]\n 10256: jump @328 if a1 >u 3\n      : @327 (gas: 1)\n 10260: jump @559\n      : @328 (gas: 8)\n 10263: a1 = s1 + 0x1030\n 10267: u64 [a1 + 520] = 0\n 10271: u64 [a1 + 512] = 0\n 10275: u64 [a1 + 504] = 0\n 10279: u64 [a1 + 496] = 0x3\n 10284: a0 = s1 + 0x480\n 10288: a1 = s1 + 0x1220\n 10292: ra = 304, jump @21\n      : @329 [@dyn 152] (gas: 11)\n 10298: a0 = u64 [s1 + 0x498]\n 10302: u64 [s1 + 0xb8] = a0\n 10306: a0 = u64 [s1 + 0x490]\n 10310: u64 [s1 + 0xb0] = a0\n 10314: a0 = u64 [s1 + 0x488]\n 10318: u64 [s1 + 0xa8] = a0\n 10322: a0 = u64 [s1 + 0x480]\n 10326: u64 [s1 + 0xa0] = a0\n 10330: a0 = s1 + 0x460\n 10334: a1 = 0x40\n 10337: ra = 306, jump @17\n      : @330 [@dyn 153] (gas: 6)\n 10343: a4 = s1 + 0x400\n 10347: a0 = u64 [a4 + 0x78]\n 10350: a1 = u64 [a4 + 0x70]\n 10353: a2 = u64 [a4 + 0x68]\n 10356: a3 = u64 [a4 + 0x60]\n 10359: t0 = 308, jump @710\n      : @331 [@dyn 154] (gas: 1)\n 10365: jump @333 if a0 == 0\n      : @332 (gas: 1)\n 10368: jump @525\n      : @333 (gas: 14)\n 10371: a0 = u64 [s1 + 0xa0]\n 10375: a2 = s1 + 0x400\n 10379: u64 [a2 + 0x40] = a0\n 10382: a0 = u64 [s1 + 0xa8]\n 10386: u64 [a2 + 0x48] = a0\n 10389: a0 = u64 [s1 + 0xb0]\n 10393: u64 [a2 + 0x50] = a0\n 10396: a1 = s1 + 0x440\n 10400: a0 = u64 [s1 + 0xb8]\n 10404: u64 [a2 + 0x58] = a0\n 10407: a0 = a3\n 10409: u64 [s1 + 0xb8] = a3\n 10413: ra = 0x24a\n 10417: jump @19\n      : @334 (gas: 10)\n 10420: u64 [a2 + 936] = 0\n 10424: u64 [a2 + 928] = 0\n 10428: u64 [a2 + 920] = 0\n 10432: u64 [a2 + 912] = 0\n 10436: a0 = s1 + 0x1000\n 10440: i32 a0 = a0 + 0x3c0\n 10444: ra = 0x136\n 10448: ecalli 10 // 'value_transferred'\n 10450: t0 = 0x138\n 10454: jump @725\n      : @335 [@dyn 155] (gas: 1)\n 10457: t0 = 312, jump @725\n      : @336 [@dyn 156] (gas: 8)\n 10463: a0 = u64 [a4 + 0xa0]\n 10467: a1 = u64 [a4 + 0xa8]\n 10471: a2 = u64 [a4 + 0x98]\n 10475: a3 = u64 [a4 + 0x90]\n 10479: a1 = a1 | a2\n 10482: a0 = a0 | a3\n 10485: a0 = a0 | a1\n 10488: jump @338 if a0 == 0\n      : @337 (gas: 1)\n 10491: jump @560\n      : @338 (gas: 4)\n 10494: a0 = u64 [s1 + 0xb8]\n 10498: a0 = i32 [a0]\n 10500: a1 = 0x43\n 10503: jump @340 if a1 <u a0\n      : @339 (gas: 1)\n 10506: jump @561\n      : @340 (gas: 4)\n 10509: a0 = s1 + 0x1000\n 10513: ra = 0x13a\n 10517: t0 = 0x280\n 10521: jump @724\n      : @341 [@dyn 157] (gas: 32)\n 10524: a1 = s1 + 0x7ff\n 10528: a1 = a1 + 0x31\n 10531: a2 = a1 + 0x700\n 10535: a0 = u64 [a2 + 0xe0]\n 10539: u64 [s1 + 0x60] = a0\n 10542: a0 = u64 [a2 + 0xd8]\n 10546: u64 [s1 + 0x70] = a0\n 10549: a0 = u64 [a2 + 0xd0]\n 10553: u64 [s1 + 0x78] = a0\n 10556: a0 = s1 + 0x1000\n 10560: i32 a0 = a0 + 0x3e0\n 10564: a1 = 0x24\n 10567: ecalli 1 // 'call_data_load'\n 10569: a0 = s1 + 0x1030\n 10573: a2 = a0 + 0x300\n 10577: a1 = u64 [a2 + 0xc8]\n 10581: u64 [s1 + 0xb8] = a1\n 10585: a1 = u64 [a2 + 0xc0]\n 10589: u64 [s1 + 0xb0] = a1\n 10593: a1 = u64 [a2 + 0xb8]\n 10597: u64 [s1 + 0xa8] = a1\n 10601: a0 = u64 [a2 + 0xb0]\n 10605: u64 [s1 + 0xa0] = a0\n 10609: a0 = 0x300a0\n 10614: u64 [s1 + 0x98] = a0\n 10618: i32 a0 = a0 + 0\n 10620: u64 [s1 + 0x68] = a0\n 10623: ra = 0x13c\n 10627: ecalli 3 // 'caller'\n 10629: a2 = u64 [s1 + 0x98]\n 10633: t0 = 0x13e\n 10637: jump @695\n      : @342 [@dyn 158] (gas: 2)\n 10640: a2 = u64 [s1 + 0x98]\n 10644: t0 = 318, jump @695\n      : @343 [@dyn 159] (gas: 9)\n 10650: u64 [a2 + 1992] = 0\n 10654: a4 = a2 + 0x700\n 10658: u64 [a4 + 0xc0] = a1\n 10662: u64 [a4 + 0xb8] = a0\n 10666: a1 = s1 + 0x7ff\n 10670: a1 = a1 + 0x7e1\n 10674: u64 [a4 + 0xb0] = a3\n 10678: a0 = 0\n 10680: ra = 320, jump @19\n      : @344 [@dyn 160] (gas: 11)\n 10686: a0 = s1 + 0x7ff\n 10690: a0 = a0 + 0x31\n 10693: u64 [a0 + 1960] = 0\n 10697: u64 [a0 + 1952] = 0\n 10701: u64 [a0 + 1944] = 0\n 10705: a3 = a0\n 10707: a0 = 0x20\n 10710: a1 = s1 + 0x7ff\n 10714: a1 = a1 + 0x7c1\n 10718: u64 [a3 + 1936] = 0x4\n 10723: ra = 322, jump @19\n      : @345 [@dyn 161] (gas: 3)\n 10729: a1 = 0x2008c\n 10734: a0 = i32 [0x2008c]\n 10739: jump @347 if a0 >u 63\n      : @346 (gas: 2)\n 10743: u32 [0x2008c] = 0x40\n 10749: fallthrough\n      : @347 (gas: 15)\n 10750: a0 = sp + 0xffffffffffffffe0\n 10753: a2 = a0 & 0xffffffffffffffe0\n 10756: u64 [s1 + 0x80] = a2\n 10760: sp = a2\n 10762: a0 = 0x200a0\n 10767: i32 a0 = a0 + 0\n 10769: i32 a2 = a2 + 0\n 10771: u64 [s1 + 0x90] = a1\n 10775: a1 = 0x40\n 10778: u64 [s1 + 0x88] = a0\n 10782: ra = 0x144\n 10786: ecalli 6 // 'hash_keccak_256'\n 10788: a3 = u64 [s1 + 0x80]\n 10792: t0 = 0x146\n 10796: jump @706\n      : @348 [@dyn 162] (gas: 2)\n 10799: a3 = u64 [s1 + 0x80]\n 10803: t0 = 326, jump @706\n      : @349 [@dyn 163] (gas: 8)\n 10809: u64 [a5 + 0xe8] = a3\n 10813: u64 [a5 + 0xe0] = a2\n 10817: u64 [a5 + 0xd8] = a1\n 10821: u64 [a5 + 0xd0] = a0\n 10825: a0 = s1 + 0x7ff\n 10829: a0 = a0 + 0x7a1\n 10833: a1 = s1 + 0x1400\n 10837: ra = 328, jump @21\n      : @350 [@dyn 164] (gas: 31)\n 10843: a4 = s1 + 0x7ff\n 10847: a4 = a4 + 0x31\n 10850: a5 = a4 + 0x700\n 10854: a0 = u64 [a5 + 0x78]\n 10857: a1 = u64 [a5 + 0x70]\n 10860: a2 = u64 [a5 + 0x80]\n 10864: a3 = u64 [a5 + 0x88]\n 10868: t0 = a4\n 10870: a5 = u64 [s1 + 0xa8]\n 10874: a4 = a0 ^ a5\n 10877: a0 = a0 <u a5\n 10880: a5 = u64 [s1 + 0xa0]\n 10884: a1 = a1 <u a5\n 10887: a1 = a0 if a4 != 0\n 10890: a4 = u64 [s1 + 0xb8]\n 10894: a0 = a3 ^ a4\n 10897: a3 = a3 <u a4\n 10900: a5 = u64 [s1 + 0xb0]\n 10904: a4 = a2 <u a5\n 10907: a4 = a3 if a0 != 0\n 10910: a2 = a2 ^ a5\n 10913: a0 = a0 | a2\n 10916: a1 = a4 if a0 != 0\n 10919: a0 = a1 ^ 0x1\n 10922: u64 [t0 + 1896] = 0\n 10926: u64 [t0 + 1888] = 0\n 10930: u64 [t0 + 0x750] = a0\n 10934: a0 = s1 + 0x7ff\n 10938: a0 = a0 + 0x781\n 10942: u64 [t0 + 1880] = 0\n 10946: ra = 330, jump @663\n      : @351 [@dyn 165] (gas: 6)\n 10952: a0 = u64 [s1 + 0x68]\n 10955: ra = 0x14c\n 10959: ecalli 3 // 'caller'\n 10961: a2 = u64 [s1 + 0x98]\n 10965: t0 = 0x14e\n 10969: jump @695\n      : @352 [@dyn 166] (gas: 2)\n 10972: a2 = u64 [s1 + 0x98]\n 10976: t0 = 334, jump @695\n      : @353 [@dyn 167] (gas: 9)\n 10982: u64 [a2 + 1864] = 0\n 10986: a4 = a2 + 0x700\n 10990: u64 [a4 + 0x40] = a1\n 10993: u64 [a4 + 0x38] = a0\n 10996: a1 = s1 + 0x7ff\n 11000: a1 = a1 + 0x761\n 11004: u64 [a4 + 0x30] = a3\n 11007: a0 = 0\n 11009: ra = 336, jump @19\n      : @354 [@dyn 168] (gas: 11)\n 11015: a1 = s1 + 0x7ff\n 11019: a1 = a1 + 0x31\n 11022: u64 [a1 + 1832] = 0\n 11026: u64 [a1 + 1824] = 0\n 11030: u64 [a1 + 1808] = 0x4\n 11035: a2 = a1\n 11037: a0 = 0x20\n 11040: a1 = s1 + 0x7ff\n 11044: a1 = a1 + 0x741\n 11048: u64 [a2 + 1816] = 0\n 11052: ra = 338, jump @19\n      : @355 [@dyn 169] (gas: 7)\n 11058: a1 = u64 [s1 + 0x90]\n 11062: a0 = sp + 0xffffffffffffffe0\n 11065: a0 = a0 & 0xffffffffffffffe0\n 11068: u64 [s1 + 0x80] = a0\n 11072: sp = a0\n 11074: a0 = i32 [a1]\n 11076: jump @357 if a0 >u 63\n      : @356 (gas: 2)\n 11080: u32 [a1 + 0] = 0x40\n 11083: fallthrough\n      : @357 (gas: 12)\n 11084: a0 = sp + 0xffffffffffffffe0\n 11087: a0 = a0 & 0xffffffffffffffe0\n 11090: u64 [s1 + 0x58] = a0\n 11093: sp = a0\n 11095: i32 a2 = a0 + 0\n 11097: a1 = 0x40\n 11100: a0 = u64 [s1 + 0x88]\n 11104: ra = 0x154\n 11108: ecalli 6 // 'hash_keccak_256'\n 11110: a3 = u64 [s1 + 0x58]\n 11113: t0 = 0x156\n 11117: jump @702\n      : @358 [@dyn 170] (gas: 2)\n 11120: a3 = u64 [s1 + 0x58]\n 11123: t0 = 342, jump @702\n      : @359 [@dyn 171] (gas: 2)\n 11129: a0 = a0 + 0x721\n 11133: ra = 344, jump @21\n      : @360 [@dyn 172] (gas: 26)\n 11139: a5 = s1 + 0x7ff\n 11143: a5 = a5 + 0x31\n 11146: a3 = u64 [a5 + 0x6f0]\n 11150: a0 = u64 [a5 + 0x6f8]\n 11154: a1 = u64 [a5 + 0x700]\n 11158: a2 = u64 [a5 + 0x708]\n 11162: a4 = u64 [s1 + 0xb8]\n 11166: u64 [a5 + 0x6a8] = a4\n 11170: a4 = u64 [s1 + 0xb0]\n 11174: u64 [a5 + 0x6a0] = a4\n 11178: a4 = u64 [s1 + 0xa8]\n 11182: u64 [a5 + 0x698] = a4\n 11186: a4 = u64 [s1 + 0xa0]\n 11190: u64 [a5 + 0x690] = a4\n 11194: a4 = a5 + 0x600\n 11198: u64 [a4 + 0xc8] = a2\n 11202: u64 [a4 + 0xc0] = a1\n 11206: u64 [a4 + 0xb8] = a0\n 11210: a0 = s1 + 0x7ff\n 11214: a0 = a0 + 0x701\n 11218: a1 = s1 + 0x7ff\n 11222: a1 = a1 + 0x6e1\n 11226: a2 = s1 + 0x7ff\n 11230: a2 = a2 + 0x6c1\n 11234: u64 [a4 + 0xb0] = a3\n 11238: ra = 346, jump @677\n      : @361 [@dyn 173] (gas: 15)\n 11244: a3 = s1 + 0x7ff\n 11248: a3 = a3 + 0x31\n 11251: a4 = a3 + 0x600\n 11255: a0 = u64 [a4 + 0xe8]\n 11259: a1 = u64 [a4 + 0xe0]\n 11263: a2 = u64 [a4 + 0xd8]\n 11267: a3 = u64 [a4 + 0xd0]\n 11271: a4 = s1 + 0x1030\n 11275: u64 [a4 + 0x408] = a0\n 11279: u64 [a4 + 0x400] = a1\n 11283: u64 [a4 + 0x3f8] = a2\n 11287: u64 [a4 + 0x3f0] = a3\n 11291: a1 = s1 + 0x1420\n 11295: a0 = u64 [s1 + 0x80]\n 11299: ra = 348, jump @22\n      : @362 [@dyn 174] (gas: 17)\n 11305: a0 = u64 [s1 + 0x60]\n 11308: a0 = a0 << 0x20\n 11311: a0 = a0 >> 0x20\n 11314: a2 = s1 + 0x7ff\n 11318: a2 = a2 + 0x31\n 11321: u64 [a2 + 1672] = 0\n 11325: u64 [s1 + 0x60] = a0\n 11328: a3 = a2 + 0x600\n 11332: u64 [a3 + 0x80] = a0\n 11336: a0 = u64 [s1 + 0x70]\n 11339: u64 [a3 + 0x78] = a0\n 11342: a1 = s1 + 0x7ff\n 11346: a1 = a1 + 0x6a1\n 11350: a0 = u64 [s1 + 0x78]\n 11353: u64 [a3 + 0x70] = a0\n 11356: a0 = 0\n 11358: ra = 350, jump @19\n      : @363 [@dyn 175] (gas: 11)\n 11364: a1 = s1 + 0x7ff\n 11368: a1 = a1 + 0x31\n 11371: u64 [a1 + 1640] = 0\n 11375: u64 [a1 + 1632] = 0\n 11379: u64 [a1 + 1616] = 0x4\n 11384: a2 = a1\n 11386: a0 = 0x20\n 11389: a1 = s1 + 0x7ff\n 11393: a1 = a1 + 0x681\n 11397: u64 [a2 + 1624] = 0\n 11401: ra = 352, jump @19\n      : @364 [@dyn 176] (gas: 7)\n 11407: a1 = u64 [s1 + 0x90]\n 11411: a0 = sp + 0xffffffffffffffe0\n 11414: a0 = a0 & 0xffffffffffffffe0\n 11417: u64 [s1 + 0x80] = a0\n 11421: sp = a0\n 11423: a0 = i32 [a1]\n 11425: jump @366 if a0 >=u 64\n      : @365 (gas: 2)\n 11429: u32 [a1 + 0] = 0x40\n 11432: fallthrough\n      : @366 (gas: 12)\n 11433: a0 = sp + 0xffffffffffffffe0\n 11436: a0 = a0 & 0xffffffffffffffe0\n 11439: u64 [s1 + 0x90] = a0\n 11443: sp = a0\n 11445: i32 a2 = a0 + 0\n 11447: a1 = 0x40\n 11450: a0 = u64 [s1 + 0x88]\n 11454: ra = 0x162\n 11458: ecalli 6 // 'hash_keccak_256'\n 11460: a3 = u64 [s1 + 0x90]\n 11464: t0 = 0x164\n 11468: jump @702\n      : @367 [@dyn 177] (gas: 2)\n 11471: a3 = u64 [s1 + 0x90]\n 11475: t0 = 356, jump @702\n      : @368 [@dyn 178] (gas: 2)\n 11481: a0 = a0 + 0x661\n 11485: ra = 358, jump @21\n      : @369 [@dyn 179] (gas: 25)\n 11491: a5 = s1 + 0x7ff\n 11495: a5 = a5 + 0x31\n 11498: a3 = u64 [a5 + 0x630]\n 11502: a0 = u64 [a5 + 0x638]\n 11506: a1 = u64 [a5 + 0x640]\n 11510: a2 = u64 [a5 + 0x648]\n 11514: a4 = u64 [s1 + 0xb8]\n 11518: u64 [a5 + 0x5e8] = a4\n 11522: a4 = u64 [s1 + 0xb0]\n 11526: u64 [a5 + 0x5e0] = a4\n 11530: a4 = u64 [s1 + 0xa8]\n 11534: u64 [a5 + 0x5d8] = a4\n 11538: a4 = u64 [s1 + 0xa0]\n 11542: u64 [a5 + 0x5d0] = a4\n 11546: u64 [a5 + 0x608] = a2\n 11550: u64 [a5 + 0x600] = a1\n 11554: u64 [a5 + 0x5f8] = a0\n 11558: a0 = s1 + 0x7ff\n 11562: a0 = a0 + 0x641\n 11566: a1 = s1 + 0x7ff\n 11570: a1 = a1 + 0x621\n 11574: a2 = s1 + 0x7ff\n 11578: a2 = a2 + 0x601\n 11582: u64 [a5 + 0x5f0] = a3\n 11586: ra = 360, jump @685\n      : @370 [@dyn 180] (gas: 16)\n 11592: a3 = s1 + 0x7ff\n 11596: a3 = a3 + 0x31\n 11599: a4 = a3 + 0x600\n 11603: a0 = u64 [a4 + 0x28]\n 11606: a1 = u64 [a4 + 0x20]\n 11609: a2 = u64 [a4 + 0x18]\n 11612: a3 = u64 [a4 + 0x10]\n 11615: a4 = s1 + 0x1030\n 11619: a5 = a4 + 0x400\n 11623: u64 [a5 + 0x28] = a0\n 11626: u64 [a5 + 0x20] = a1\n 11629: u64 [a5 + 0x18] = a2\n 11632: u64 [a5 + 0x10] = a3\n 11635: a1 = s1 + 0x1440\n 11639: a0 = u64 [s1 + 0x80]\n 11643: ra = 362, jump @22\n      : @371 [@dyn 181] (gas: 4)\n 11649: a0 = s1 + 0x7ff\n 11653: a0 = a0 + 0x5e1\n 11657: a1 = 0x40\n 11660: ra = 364, jump @17\n      : @372 [@dyn 182] (gas: 8)\n 11666: a3 = s1 + 0x7ff\n 11670: a3 = a3 + 0x31\n 11673: a5 = a3 + 0x500\n 11677: a4 = u64 [a5 + 0xc8]\n 11681: a1 = u64 [a5 + 0xc0]\n 11685: a2 = u64 [a5 + 0xb8]\n 11689: a0 = u64 [a5 + 0xb0]\n 11693: t0 = 366, jump @719\n      : @373 [@dyn 183] (gas: 1)\n 11699: jump @375 if a1 == 0\n      : @374 (gas: 1)\n 11702: jump @525\n      : @375 (gas: 13)\n 11705: a1 = u64 [s1 + 0xa0]\n 11709: a4 = a3 + 0x500\n 11713: u64 [a4 + 0x90] = a1\n 11717: a1 = u64 [s1 + 0xa8]\n 11721: u64 [a4 + 0x98] = a1\n 11725: a1 = u64 [s1 + 0xb0]\n 11729: u64 [a4 + 0xa0] = a1\n 11733: a1 = s1 + 0x7ff\n 11737: a1 = a1 + 0x5c1\n 11741: a2 = u64 [s1 + 0xb8]\n 11745: u64 [a4 + 0xa8] = a2\n 11749: u64 [s1 + 0xb8] = a0\n 11753: ra = 368, jump @19\n      : @376 [@dyn 184] (gas: 6)\n 11759: a0 = u64 [s1 + 0x68]\n 11762: ra = 0x172\n 11766: ecalli 3 // 'caller'\n 11768: a2 = u64 [s1 + 0x98]\n 11772: t0 = 0x174\n 11776: jump @709\n      : @377 [@dyn 185] (gas: 2)\n 11779: a2 = u64 [s1 + 0x98]\n 11783: t0 = 372, jump @709\n      : @378 [@dyn 186] (gas: 58)\n 11789: t0 = a1 | a0\n 11792: a3 = a3 >> 0x20\n 11795: a2 = reverse a2\n 11797: a1 = a2 << 0x20\n 11800: a1 = a1 | a3\n 11803: a2 = a2 >> 0x20\n 11806: a3 = s1 + 0x7ff\n 11810: a3 = a3 + 0x31\n 11813: a0 = u64 [s1 + 0x60]\n 11816: u64 [a3 + 0x540] = a0\n 11820: a3 = u64 [0x20020]\n 11825: a4 = s1 + 0x7ff\n 11829: a4 = a4 + 0x31\n 11832: u64 [a4 + 1352] = 0\n 11836: a4 = s1 + 0x7ff\n 11840: a4 = a4 + 0x31\n 11843: a0 = u64 [s1 + 0x70]\n 11846: u64 [a4 + 0x538] = a0\n 11850: a4 = s1 + 0x7ff\n 11854: a4 = a4 + 0x31\n 11857: a0 = u64 [s1 + 0x78]\n 11860: u64 [a4 + 0x530] = a0\n 11864: a0 = s1 + 0x7ff\n 11868: a0 = a0 + 0x31\n 11871: u64 [a0 + 0x588] = a3\n 11875: a3 = u64 [0x20028]\n 11880: a4 = u64 [0x20030]\n 11885: a5 = u64 [0x20038]\n 11890: a0 = s1 + 0x7ff\n 11894: a0 = a0 + 0x31\n 11897: u64 [a0 + 1384] = 0\n 11901: a0 = s1 + 0x7ff\n 11905: a0 = a0 + 0x31\n 11908: u64 [a0 + 0x580] = a3\n 11912: a0 = s1 + 0x7ff\n 11916: a0 = a0 + 0x31\n 11919: u64 [a0 + 0x578] = a4\n 11923: a0 = s1 + 0x7ff\n 11927: a0 = a0 + 0x31\n 11930: u64 [a0 + 0x570] = a5\n 11934: a0 = s1 + 0x7ff\n 11938: a0 = a0 + 0x31\n 11941: u64 [a0 + 0x560] = a2\n 11945: a0 = s1 + 0x7ff\n 11949: a0 = a0 + 0x31\n 11952: u64 [a0 + 0x558] = a1\n 11956: a1 = 0x20\n 11959: a2 = s1 + 0x7ff\n 11963: a2 = a2 + 0x5a1\n 11967: a3 = s1 + 0x7ff\n 11971: a3 = a3 + 0x581\n 11975: a4 = s1 + 0x7ff\n 11979: a4 = a4 + 0x561\n 11983: a0 = s1 + 0x7ff\n 11987: a0 = a0 + 0x31\n 11990: u64 [a0 + 0x550] = t0\n 11994: a0 = u64 [s1 + 0xb8]\n 11998: ra = 374, jump @23\n      : @379 [@dyn 187] (gas: 4)\n 12004: a0 = s1 + 0x7ff\n 12008: a0 = a0 + 0x541\n 12012: a1 = 0x40\n 12015: ra = 376, jump @17\n      : @380 [@dyn 188] (gas: 8)\n 12021: a3 = s1 + 0x7ff\n 12025: a3 = a3 + 0x31\n 12028: a5 = a3 + 0x500\n 12032: a4 = u64 [a5 + 0x28]\n 12035: a1 = u64 [a5 + 0x20]\n 12038: a2 = u64 [a5 + 0x18]\n 12041: a0 = u64 [a5 + 0x10]\n 12044: t0 = 378, jump @719\n      : @381 [@dyn 189] (gas: 1)\n 12050: jump @383 if a1 == 0\n      : @382 (gas: 1)\n 12053: jump @525\n      : @383 (gas: 9)\n 12056: u64 [a3 + 1288] = 0\n 12060: u64 [a3 + 1280] = 0\n 12064: u64 [a3 + 1264] = 0x1\n 12069: a1 = s1 + 0x7ff\n 12073: a1 = a1 + 0x521\n 12077: u64 [a3 + 1272] = 0\n 12081: u64 [s1 + 0xb8] = a0\n 12085: ra = 0x24a\n 12089: jump @19\n      : @384 (gas: 1)\n 12092: jump @386 if a0 == 1889567281\n      : @385 (gas: 1)\n 12099: jump @550\n      : @386 (gas: 10)\n 12102: u64 [a2 + 808] = 0\n 12106: u64 [a2 + 800] = 0\n 12110: u64 [a2 + 792] = 0\n 12114: u64 [a2 + 784] = 0\n 12118: a0 = s1 + 0x1000\n 12122: i32 a0 = a0 + 0x340\n 12126: ra = 0x17c\n 12130: ecalli 10 // 'value_transferred'\n 12132: t0 = 0x17e\n 12136: jump @725\n      : @387 [@dyn 190] (gas: 1)\n 12139: t0 = 382, jump @725\n      : @388 [@dyn 191] (gas: 8)\n 12145: a0 = u64 [a4 + 0x20]\n 12148: a1 = u64 [a4 + 0x28]\n 12151: a2 = u64 [a4 + 0x18]\n 12154: a3 = u64 [a4 + 0x10]\n 12157: a1 = a1 | a2\n 12160: a0 = a0 | a3\n 12163: a0 = a0 | a1\n 12166: jump @390 if a0 == 0\n      : @389 (gas: 1)\n 12169: jump @562\n      : @390 (gas: 4)\n 12172: a0 = u64 [s1 + 0xb8]\n 12176: a0 = i32 [a0]\n 12178: a1 = 0x23\n 12181: jump @392 if a1 <u a0\n      : @391 (gas: 1)\n 12184: jump @563\n      : @392 (gas: 5)\n 12187: a0 = s1 + 0x7ff\n 12191: a0 = a0 + 0x301\n 12195: ra = 0x180\n 12199: t0 = 0x280\n 12203: jump @724\n      : @393 [@dyn 192] (gas: 14)\n 12206: a3 = s1 + 0x7ff\n 12210: a3 = a3 + 0x31\n 12213: a4 = a3 + 0x200\n 12217: a0 = u64 [a4 + 0xd0]\n 12221: a1 = u64 [a4 + 0xd8]\n 12225: a2 = u32 [a3 + 0x2e0]\n 12229: u64 [a3 + 712] = 0\n 12233: u64 [a4 + 0xc0] = a2\n 12237: u64 [a4 + 0xb8] = a1\n 12241: a1 = s1 + 0x7ff\n 12245: a1 = a1 + 0x2e1\n 12249: u64 [a4 + 0xb0] = a0\n 12253: a0 = 0\n 12255: ra = 386, jump @19\n      : @394 [@dyn 193] (gas: 11)\n 12261: a1 = s1 + 0x7ff\n 12265: a1 = a1 + 0x31\n 12268: u64 [a1 + 680] = 0\n 12272: u64 [a1 + 672] = 0\n 12276: u64 [a1 + 656] = 0x4\n 12281: a2 = a1\n 12283: a0 = 0x20\n 12286: a1 = s1 + 0x7ff\n 12290: a1 = a1 + 0x2c1\n 12294: u64 [a2 + 664] = 0\n 12298: ra = 388, jump @19\n      : @395 [@dyn 194] (gas: 2)\n 12304: a1 = i32 [0x2008c]\n 12309: jump @397 if a1 >u 63\n      : @396 (gas: 2)\n 12313: u32 [0x2008c] = 0x40\n 12319: fallthrough\n      : @397 (gas: 13)\n 12320: a0 = sp + 0xffffffffffffffe0\n 12323: a2 = a0 & 0xffffffffffffffe0\n 12326: u64 [s1 + 0xb8] = a2\n 12330: sp = a2\n 12332: a0 = 0x200a0\n 12337: i32 a0 = a0 + 0\n 12339: i32 a2 = a2 + 0\n 12341: a1 = 0x40\n 12344: ra = 0x186\n 12348: ecalli 6 // 'hash_keccak_256'\n 12350: a3 = u64 [s1 + 0xb8]\n 12354: t0 = 0x188\n 12358: jump @706\n      : @398 [@dyn 195] (gas: 2)\n 12361: a3 = u64 [s1 + 0xb8]\n 12365: t0 = 392, jump @706\n      : @399 [@dyn 196] (gas: 8)\n 12371: u64 [a5 + 0x48] = a3\n 12374: u64 [a5 + 0x40] = a2\n 12377: u64 [a5 + 0x38] = a1\n 12380: u64 [a5 + 0x30] = a0\n 12383: a0 = s1 + 0x7ff\n 12387: a0 = a0 + 0x2a1\n 12391: a1 = s1 + 0x1360\n 12395: ra = 394, jump @21\n      : @400 [@dyn 197] (gas: 15)\n 12401: a1 = s1 + 0x7ff\n 12405: a1 = a1 + 0x31\n 12408: a2 = a1 + 0x200\n 12412: a0 = u64 [a2 + 0x88]\n 12416: u64 [s1 + 0xb8] = a0\n 12420: a0 = u64 [a2 + 0x80]\n 12424: u64 [s1 + 0xb0] = a0\n 12428: a0 = u64 [a2 + 0x78]\n 12431: u64 [s1 + 0xa8] = a0\n 12435: a0 = u64 [a2 + 0x70]\n 12438: u64 [s1 + 0xa0] = a0\n 12442: a0 = s1 + 0x7ff\n 12446: a0 = a0 + 0x281\n 12450: a1 = 0x40\n 12453: ra = 396, jump @17\n      : @401 [@dyn 198] (gas: 15)\n 12459: a3 = s1 + 0x7ff\n 12463: a3 = a3 + 0x31\n 12466: a5 = a3 + 0x200\n 12470: a0 = u64 [a5 + 0x68]\n 12473: a1 = u64 [a5 + 0x60]\n 12476: a2 = u64 [a5 + 0x58]\n 12479: a4 = u64 [a5 + 0x50]\n 12482: a0 = a0 | a2\n 12485: a2 = a4 | a1\n 12488: a2 = a2 | a0\n 12491: a2 = a2 >> 0x20\n 12494: a0 = a0 | a1\n 12497: a0 = a0 << 0x20\n 12500: a0 = a0 | a2\n 12503: jump @525 if a0 != 0\n      : @402 (gas: 15)\n 12507: a0 = u64 [s1 + 0xa0]\n 12511: a2 = a3 + 0x200\n 12515: u64 [a2 + 0x30] = a0\n 12518: a0 = u64 [s1 + 0xa8]\n 12522: u64 [a2 + 0x38] = a0\n 12525: a0 = u64 [s1 + 0xb0]\n 12529: u64 [a2 + 0x40] = a0\n 12532: a1 = s1 + 0x7ff\n 12536: a1 = a1 + 0x261\n 12540: a0 = u64 [s1 + 0xb8]\n 12544: u64 [a2 + 0x48] = a0\n 12547: a0 = a4\n 12549: u64 [s1 + 0xb8] = a4\n 12553: ra = 0x24a\n 12557: jump @19\n      : @403 (gas: 10)\n 12560: u64 [a2 + 360] = 0\n 12564: u64 [a2 + 352] = 0\n 12568: u64 [a2 + 344] = 0\n 12572: u64 [a2 + 336] = 0\n 12576: a0 = s1 + 0x1000\n 12580: i32 a0 = a0 + 0x180\n 12584: ra = 0x18e\n 12588: ecalli 10 // 'value_transferred'\n 12590: t0 = 0x190\n 12594: jump @726\n      : @404 [@dyn 199] (gas: 1)\n 12597: t0 = 400, jump @726\n      : @405 [@dyn 200] (gas: 8)\n 12603: a0 = u64 [a4 + 0x60]\n 12606: a1 = u64 [a4 + 0x68]\n 12609: a2 = u64 [a4 + 0x58]\n 12612: a3 = u64 [a4 + 0x50]\n 12615: a1 = a1 | a2\n 12618: a0 = a0 | a3\n 12621: a0 = a0 | a1\n 12624: jump @407 if a0 == 0\n      : @406 (gas: 1)\n 12627: jump @564\n      : @407 (gas: 3)\n 12630: a0 = u64 [s1 + 0xb8]\n 12634: a0 = i32 [a0]\n 12636: jump @409 if a0 >u 3\n      : @408 (gas: 1)\n 12640: jump @565\n      : @409 (gas: 3)\n 12643: a0 = s1 + 0x2a0\n 12647: a1 = 0x40\n 12650: ra = 402, jump @17\n      : @410 [@dyn 201] (gas: 16)\n 12656: a0 = u64 [s1 + 0x2b8]\n 12660: u64 [s1 + 0x20] = a0\n 12663: a0 = u64 [s1 + 0x2b0]\n 12667: u64 [s1 + 0x30] = a0\n 12670: a0 = u64 [s1 + 0x2a8]\n 12674: u64 [s1 + 0x18] = a0\n 12677: a0 = u64 [s1 + 0x2a0]\n 12681: u64 [s1 + 0x28] = a0\n 12684: a0 = s1 + 0x1030\n 12688: u64 [a0 + 392] = 0\n 12692: u64 [a0 + 384] = 0\n 12696: u64 [a0 + 376] = 0\n 12700: u64 [a0 + 368] = 0\n 12704: a0 = s1 + 0x280\n 12708: a1 = s1 + 0x11a0\n 12712: ra = 404, jump @21\n      : @411 [@dyn 202] (gas: 34)\n 12718: a2 = u64 [s1 + 0x290]\n 12722: t2 = u64 [s1 + 0x288]\n 12726: t0 = u64 [s1 + 0x298]\n 12730: a5 = u64 [s1 + 0x280]\n 12734: a0 = a2 << 0x3f\n 12737: a1 = t2 >> 0x1\n 12740: a0 = a0 | a1\n 12743: a1 = t0 << 0x3f\n 12746: u64 [s1 + 0xb0] = a2\n 12750: a2 = a2 >> 0x1\n 12753: a1 = a1 | a2\n 12756: a2 = t2 << 0x3f\n 12759: a3 = a5 >> 0x1\n 12762: a4 = a3 | a2\n 12765: a2 = t0 >> 0x1\n 12768: u64 [s1 + 0xa8] = a5\n 12772: a5 = a5 & 0x1\n 12775: a3 = -a5\n 12777: a1 = a1 & a3\n 12780: t1 = a3 & a0\n 12783: a2 = a2 & a3\n 12786: ra = a4 & 0x7f\n 12789: a4 = ra if a5 == 0\n 12792: u64 [s1 + 0x78] = a4\n 12795: a0 = a4 <u 0x20\n 12798: u64 [s1 + 0x68] = t1\n 12801: a0 = 0 if t1 != 0\n 12803: u64 [s1 + 0x70] = a1\n 12806: u64 [s1 + 0x60] = a2\n 12809: a1 = a1 | a2\n 12812: a0 = 0 if a1 != 0\n 12814: u64 [s1 + 0xb8] = a5\n 12818: a1 = a5 <u 0x1\n 12821: jump @413 if a1 == a0\n      : @412 (gas: 1)\n 12824: jump @566\n      : @413 (gas: 12)\n 12827: a2 = u64 [s1 + 0x30]\n 12830: a4 = u64 [s1 + 0x28]\n 12833: a0 = a4 | a2\n 12836: a1 = u64 [s1 + 0x20]\n 12839: a3 = u64 [s1 + 0x18]\n 12842: a1 = a1 | a3\n 12845: a0 = a0 | a1\n 12848: a0 = a0 >> 0x20\n 12851: a1 = a1 | a2\n 12854: a1 = a1 << 0x20\n 12857: a1 = a1 | a0\n 12860: jump @525 if a1 != 0\n      : @414 (gas: 15)\n 12864: a0 = a4\n 12866: u64 [s1 + 0x90] = ra\n 12870: u64 [s1 + 0x98] = t2\n 12874: u64 [s1 + 0xa0] = t0\n 12878: a1 = u64 [s1 + 0x78]\n 12881: a3 = s1 + 0x200\n 12885: u64 [a3 + 0x60] = a1\n 12888: a1 = u64 [s1 + 0x68]\n 12891: u64 [a3 + 0x68] = a1\n 12894: a1 = u64 [s1 + 0x70]\n 12897: u64 [a3 + 0x70] = a1\n 12900: a1 = s1 + 0x260\n 12904: a2 = u64 [s1 + 0x60]\n 12907: u64 [a3 + 0x78] = a2\n 12910: ra = 406, jump @19\n      : @415 [@dyn 203] (gas: 2)\n 12916: a0 = u64 [s1 + 0xb8]\n 12920: jump @526 if a0 != 0\n      : @416 (gas: 1)\n 12924: t0 = 408, jump @714\n      : @417 [@dyn 204] (gas: 1)\n 12930: jump @525 if a1 == 0\n      : @418 (gas: 13)\n 12934: a0 = u64 [s1 + 0xa8]\n 12938: a1 = a0 & 0xffffffffffffff00\n 12942: i32 a0 = a3 + 0x20\n 12945: a3 = u64 [s1 + 0x98]\n 12949: a2 = s1 + 0x100\n 12953: u64 [a2 + 0xe8] = a3\n 12957: u64 [a2 + 0xe0] = a1\n 12961: a1 = u64 [s1 + 0xb0]\n 12965: u64 [a2 + 0xf0] = a1\n 12969: a1 = s1 + 0x1e0\n 12973: a3 = u64 [s1 + 0xa0]\n 12977: u64 [a2 + 0xf8] = a3\n 12981: ra = 410, jump @19\n      : @419 [@dyn 205] (gas: 8)\n 12987: t1 = 0\n 12989: u64 [s1 + 168] = 0\n 12993: u64 [s1 + 176] = 0\n 12997: a0 = u64 [s1 + 0x90]\n 13001: a0 = a0 >u 0\n 13003: a0 = a0 << 0x5\n 13006: u64 [s1 + 0xb8] = a0\n 13010: fallthrough\n      : @420 (gas: 18)\n 13011: a1 = u64 [s1 + 0xb8]\n 13015: a0 = a1 + 0x3f\n 13018: t0 = a0 <u a1\n 13021: a3 = t1 + t0\n 13024: a1 = a0 & 0xffffffffffffffe0\n 13027: a0 = t1\n 13029: t1 = u64 [s1 + 0x28]\n 13032: t1 = t1 + a1\n 13035: a4 = t1 <u a1\n 13038: ra = u64 [s1 + 0x18]\n 13041: a1 = a3 + ra\n 13044: t2 = a1 + a4\n 13047: a5 = t2 ^ a3\n 13050: a2 = t2 <u a3\n 13053: a2 = a4 if a5 == 0\n 13056: a3 = a3 <u a0\n 13059: a3 = t0 if t0 == 0\n 13062: t0 = 412, jump @699\n      : @421 [@dyn 206] (gas: 1)\n 13068: jump @423 if a5 == 0\n      : @422 (gas: 1)\n 13071: jump @581\n      : @423 (gas: 1)\n 13074: t0 = 414, jump @723\n      : @424 [@dyn 207] (gas: 10)\n 13080: t0 = a2 <u a0\n 13083: a0 = u64 [s1 + 0x20]\n 13086: a4 = a3 ^ a0\n 13089: a0 = a3 <u a0\n 13092: a0 = t0 if a4 == 0\n 13095: t0 = u64 [s1 + 0x30]\n 13098: a1 = a2 ^ t0\n 13101: a1 = a1 | a4\n 13104: a0 = a5 if a1 == 0\n 13107: jump @426 if a0 == 0\n      : @425 (gas: 1)\n 13110: jump @581\n      : @426 (gas: 7)\n 13113: u64 [s1 + 0x1c0] = t1\n 13117: u64 [s1 + 0x1c8] = t2\n 13121: u64 [s1 + 0x1d0] = a2\n 13125: a0 = 0x40\n 13128: a1 = s1 + 0x1c0\n 13132: u64 [s1 + 0x1d8] = a3\n 13136: ra = 416, jump @19\n      : @427 [@dyn 208] (gas: 3)\n 13142: a0 = s1 + 0x1a0\n 13146: a1 = 0x40\n 13149: ra = 418, jump @17\n      : @428 [@dyn 209] (gas: 25)\n 13155: a5 = s1 + 0x100\n 13159: a2 = u64 [a5 + 0xb8]\n 13163: u64 [s1 + 0xb8] = a2\n 13167: a1 = u64 [a5 + 0xb0]\n 13171: u64 [s1 + 0xb0] = a1\n 13175: a3 = u64 [a5 + 0xa8]\n 13179: u64 [s1 + 0xa8] = a3\n 13183: a4 = u64 [a5 + 0xa0]\n 13187: u64 [s1 + 0xa0] = a4\n 13191: a0 = u64 [s1 + 0x20]\n 13194: u64 [a5 + 0x58] = a0\n 13197: a0 = u64 [s1 + 0x30]\n 13200: u64 [a5 + 0x50] = a0\n 13203: a0 = u64 [s1 + 0x18]\n 13206: u64 [a5 + 0x48] = a0\n 13209: a0 = u64 [s1 + 0x28]\n 13212: u64 [a5 + 0x40] = a0\n 13215: u64 [a5 + 0x78] = a2\n 13218: u64 [a5 + 0x70] = a1\n 13221: u64 [a5 + 0x68] = a3\n 13224: a0 = s1 + 0x180\n 13228: a1 = s1 + 0x160\n 13232: a2 = s1 + 0x140\n 13236: u64 [a5 + 0x60] = a4\n 13239: ra = 420, jump @634\n      : @429 [@dyn 210] (gas: 1)\n 13245: t0 = 422, jump @720\n      : @430 [@dyn 211] (gas: 1)\n 13251: jump @525 if a0 != 0\n      : @431 (gas: 8)\n 13255: t0 = a3\n 13257: a5 = s1 + 0x100\n 13261: a0 = u64 [a5 + 0x88]\n 13265: a1 = u64 [a5 + 0x98]\n 13269: u64 [s1 + 0x98] = a1\n 13273: t1 = u64 [s1 + 0x180]\n 13277: a3 = u64 [a5 + 0x90]\n 13281: jump @475\n      : @432 (gas: 8)\n 13284: u64 [a2 + 1096] = 0\n 13288: u64 [a2 + 1088] = 0\n 13292: u64 [a2 + 1080] = 0\n 13296: u64 [a2 + 1072] = 0\n 13300: a0 = s1 + 0x1000\n 13304: i32 a0 = a0 + 0x460\n 13308: ecalli 10 // 'value_transferred'\n 13310: fallthrough\n      : @433 (gas: 10)\n 13311: a3 = s1 + 0x1030\n 13315: a4 = a3 + 0x400\n 13319: a0 = u64 [a4 + 0x40]\n 13322: a1 = u64 [a4 + 0x48]\n 13325: a2 = u64 [a4 + 0x38]\n 13328: a3 = u64 [a4 + 0x30]\n 13331: a1 = a1 | a2\n 13334: a0 = a0 | a3\n 13337: a0 = a0 | a1\n 13340: jump @435 if a0 == 0\n      : @434 (gas: 1)\n 13343: jump @572\n      : @435 (gas: 4)\n 13346: a0 = u64 [s1 + 0xb8]\n 13350: a0 = i32 [a0]\n 13352: a1 = 0x43\n 13355: jump @437 if a1 <u a0\n      : @436 (gas: 1)\n 13358: jump @573\n      : @437 (gas: 6)\n 13361: a0 = 0xffffffff\n 13371: u64 [s1 + 0xb8] = a0\n 13375: a0 = s1 + 0x1120\n 13379: ra = 0x1a8\n 13383: t0 = 0x280\n 13387: jump @724\n      : @438 [@dyn 212] (gas: 11)\n 13390: a1 = s1 + 0x1030\n 13394: a0 = u64 [a1 + 0xf0]\n 13398: u64 [s1 + 0xb0] = a0\n 13402: a0 = u64 [a1 + 0xf8]\n 13406: u64 [s1 + 0x90] = a0\n 13410: a0 = u32 [a1 + 0x100]\n 13414: u64 [s1 + 0x88] = a0\n 13418: a0 = s1 + 0x1100\n 13422: ra = 0x1aa\n 13426: t0 = 0x28a\n 13430: jump @724\n      : @439 [@dyn 213] (gas: 18)\n 13433: a1 = s1 + 0x1030\n 13437: a0 = u64 [a1 + 0xe0]\n 13441: u64 [s1 + 0xa8] = a0\n 13445: a0 = u64 [a1 + 0xd8]\n 13449: u64 [s1 + 0xa0] = a0\n 13453: a0 = u64 [a1 + 0xd0]\n 13457: u64 [s1 + 0x98] = a0\n 13461: u64 [a1 + 200] = 0\n 13465: a0 = u64 [s1 + 0x88]\n 13469: u64 [a1 + 0xc0] = a0\n 13473: a0 = u64 [s1 + 0x90]\n 13477: u64 [a1 + 0xb8] = a0\n 13481: a2 = a1\n 13483: a1 = s1 + 0x10e0\n 13487: a0 = u64 [s1 + 0xb0]\n 13491: u64 [a2 + 0xb0] = a0\n 13495: a0 = 0\n 13497: ra = 428, jump @19\n      : @440 [@dyn 214] (gas: 9)\n 13503: a1 = s1 + 0x1030\n 13507: u64 [a1 + 168] = 0\n 13511: u64 [a1 + 160] = 0\n 13515: u64 [a1 + 144] = 0x5\n 13520: a2 = a1\n 13522: a0 = 0x20\n 13525: a1 = s1 + 0x10c0\n 13529: u64 [a2 + 152] = 0\n 13533: ra = 430, jump @19\n      : @441 [@dyn 215] (gas: 3)\n 13539: a1 = 0x2008c\n 13544: a0 = i32 [0x2008c]\n 13549: jump @443 if a0 >u 63\n      : @442 (gas: 2)\n 13553: u32 [0x2008c] = 0x40\n 13559: fallthrough\n      : @443 (gas: 43)\n 13560: a0 = sp + 0xffffffffffffffe0\n 13563: a2 = a0 & 0xffffffffffffffe0\n 13566: u64 [s1 + 0x88] = a2\n 13570: sp = a2\n 13572: a0 = 0x200a0\n 13577: i32 a0 = a0 + 0\n 13579: i32 a2 = a2 + 0\n 13581: u64 [s1 + 0xb0] = a1\n 13585: a1 = 0x40\n 13588: u64 [s1 + 0x90] = a0\n 13592: ecalli 6 // 'hash_keccak_256'\n 13594: a3 = u64 [s1 + 0x88]\n 13598: a0 = u64 [a3 + 0x18]\n 13601: a1 = u64 [a3 + 0x10]\n 13604: a2 = u64 [a3 + 0x8]\n 13607: a3 = u64 [a3]\n 13609: a0 = reverse a0\n 13611: u64 [s1 + 0x80] = a0\n 13615: a0 = reverse a1\n 13617: u64 [s1 + 0x78] = a0\n 13620: a0 = reverse a2\n 13622: u64 [s1 + 0x70] = a0\n 13625: a0 = reverse a3\n 13627: u64 [s1 + 0x68] = a0\n 13630: a0 = sp + 0xffffffffffffffe0\n 13633: a0 = a0 & 0xffffffffffffffe0\n 13636: u64 [s1 + 0x88] = a0\n 13640: sp = a0\n 13642: a0 = u64 [s1 + 0x98]\n 13646: a0 = a0 & 0xffffffffffffffff\n 13649: a2 = u64 [s1 + 0xa0]\n 13653: a1 = a2 & 0xffffffffffffffff\n 13656: a2 = u64 [s1 + 0xb8]\n 13660: a3 = u64 [s1 + 0xa8]\n 13664: a2 = a2 & a3\n 13667: a3 = s1 + 0x1030\n 13671: u64 [a3 + 136] = 0\n 13675: u64 [a3 + 0x80] = a2\n 13679: u64 [a3 + 0x78] = a1\n 13682: a1 = s1 + 0x10a0\n 13686: u64 [a3 + 0x70] = a0\n 13689: a0 = 0\n 13691: ra = 432, jump @19\n      : @444 [@dyn 216] (gas: 13)\n 13697: a0 = u64 [s1 + 0x68]\n 13700: a1 = s1 + 0x1030\n 13704: u64 [a1 + 0x68] = a0\n 13707: a0 = u64 [s1 + 0x70]\n 13710: u64 [a1 + 0x60] = a0\n 13713: a0 = u64 [s1 + 0x78]\n 13716: u64 [a1 + 0x58] = a0\n 13719: a3 = a1\n 13721: a0 = 0x20\n 13724: a1 = s1 + 0x1080\n 13728: a2 = u64 [s1 + 0x80]\n 13732: u64 [a3 + 0x50] = a2\n 13735: ra = 434, jump @19\n      : @445 [@dyn 217] (gas: 3)\n 13741: a1 = u64 [s1 + 0xb0]\n 13745: a0 = i32 [a1]\n 13747: jump @447 if a0 >u 63\n      : @446 (gas: 2)\n 13751: u32 [a1 + 0] = 0x40\n 13754: fallthrough\n      : @447 (gas: 24)\n 13755: a0 = sp + 0xffffffffffffffe0\n 13758: a0 = a0 & 0xffffffffffffffe0\n 13761: u64 [s1 + 0xb8] = a0\n 13765: sp = a0\n 13767: i32 a2 = a0 + 0\n 13769: a1 = 0x40\n 13772: a0 = u64 [s1 + 0x90]\n 13776: ecalli 6 // 'hash_keccak_256'\n 13778: a3 = u64 [s1 + 0xb8]\n 13782: a0 = u64 [a3 + 0x18]\n 13785: a1 = u64 [a3 + 0x10]\n 13788: a2 = u64 [a3 + 0x8]\n 13791: a3 = u64 [a3]\n 13793: a0 = reverse a0\n 13795: a4 = reverse a1\n 13797: a2 = reverse a2\n 13799: a3 = reverse a3\n 13801: a1 = u64 [s1 + 0x88]\n 13805: u64 [a1 + 0x18] = a3\n 13808: u64 [a1 + 0x10] = a2\n 13811: u64 [a1 + 0x8] = a4\n 13814: u64 [a1] = a0\n 13816: a0 = s1 + 0x1060\n 13820: ra = 436, jump @21\n      : @448 [@dyn 218] (gas: 12)\n 13826: a1 = s1 + 0x1030\n 13830: a0 = u64 [a1 + 0x48]\n 13833: u64 [s1 + 0xb8] = a0\n 13837: a0 = u64 [a1 + 0x40]\n 13840: u64 [s1 + 0xb0] = a0\n 13844: a0 = u64 [a1 + 0x38]\n 13847: u64 [s1 + 0xa8] = a0\n 13851: a0 = u64 [a1 + 0x30]\n 13854: u64 [s1 + 0xa0] = a0\n 13858: a0 = s1 + 0x1040\n 13862: a1 = 0x40\n 13865: ra = 438, jump @17\n      : @449 [@dyn 219] (gas: 13)\n 13871: a3 = s1 + 0x1030\n 13875: a0 = u64 [a3 + 0x28]\n 13878: a1 = u64 [a3 + 0x20]\n 13881: a2 = u64 [a3 + 0x18]\n 13884: a4 = u64 [a3 + 0x10]\n 13887: a0 = a0 | a2\n 13890: a2 = a4 | a1\n 13893: a2 = a2 | a0\n 13896: a2 = a2 >> 0x20\n 13899: a0 = a0 | a1\n 13902: a0 = a0 << 0x20\n 13905: a0 = a0 | a2\n 13908: jump @525 if a0 != 0\n      : @450 (gas: 15)\n 13912: a0 = s1 + 0x7ff\n 13916: a0 = a0 + 0x31\n 13919: a1 = u64 [s1 + 0xa0]\n 13923: u64 [a0 + 0x7f0] = a1\n 13927: a1 = u64 [s1 + 0xa8]\n 13931: u64 [a0 + 0x7f8] = a1\n 13935: a0 = u64 [s1 + 0xb0]\n 13939: u64 [a3] = a0\n 13941: a1 = s1 + 0x1020\n 13945: a0 = u64 [s1 + 0xb8]\n 13949: u64 [a3 + 0x8] = a0\n 13952: a0 = a4\n 13954: u64 [s1 + 0xb8] = a4\n 13958: ra = 0x24a\n 13962: jump @19\n      : @451 (gas: 10)\n 13965: u64 [a2 + 872] = 0\n 13969: u64 [a2 + 864] = 0\n 13973: u64 [a2 + 856] = 0\n 13977: u64 [a2 + 848] = 0\n 13981: a0 = s1 + 0x1000\n 13985: i32 a0 = a0 + 0x380\n 13989: ra = 0x1b8\n 13993: ecalli 10 // 'value_transferred'\n 13995: t0 = 0x1ba\n 13999: jump @725\n      : @452 [@dyn 220] (gas: 1)\n 14002: t0 = 442, jump @725\n      : @453 [@dyn 221] (gas: 8)\n 14008: a0 = u64 [a4 + 0x60]\n 14011: a1 = u64 [a4 + 0x68]\n 14014: a2 = u64 [a4 + 0x58]\n 14017: a3 = u64 [a4 + 0x50]\n 14020: a1 = a1 | a2\n 14023: a0 = a0 | a3\n 14026: a0 = a0 | a1\n 14029: jump @574 if a0 != 0\n      : @454 (gas: 3)\n 14033: a0 = u64 [s1 + 0xb8]\n 14037: a0 = i32 [a0]\n 14039: jump @575 if a0 <=u 3\n      : @455 (gas: 4)\n 14044: a0 = s1 + 0x7ff\n 14048: a0 = a0 + 0x501\n 14052: a1 = 0x40\n 14055: ra = 444, jump @17\n      : @456 [@dyn 222] (gas: 20)\n 14061: a1 = s1 + 0x7ff\n 14065: a1 = a1 + 0x31\n 14068: a2 = a1 + 0x400\n 14072: a0 = u64 [a2 + 0xe8]\n 14076: u64 [s1 + 0x20] = a0\n 14079: a0 = u64 [a2 + 0xe0]\n 14083: u64 [s1 + 0x30] = a0\n 14086: a0 = u64 [a2 + 0xd8]\n 14090: u64 [s1 + 0x18] = a0\n 14093: a0 = u64 [a2 + 0xd0]\n 14097: u64 [s1 + 0x28] = a0\n 14100: a1 = s1 + 0x1030\n 14104: u64 [a1 + 904] = 0\n 14108: u64 [a1 + 896] = 0\n 14112: u64 [a1 + 888] = 0\n 14116: u64 [a1 + 880] = 0x1\n 14121: a0 = s1 + 0x7ff\n 14125: a0 = a0 + 0x4e1\n 14129: a1 = s1 + 0x13a0\n 14133: ra = 446, jump @21\n      : @457 [@dyn 223] (gas: 36)\n 14139: a0 = s1 + 0x7ff\n 14143: a0 = a0 + 0x31\n 14146: t2 = u64 [a0 + 0x4c0]\n 14150: ra = u64 [a0 + 0x4b8]\n 14154: t1 = u64 [a0 + 0x4c8]\n 14158: a4 = u64 [a0 + 0x4b0]\n 14162: a0 = t2 << 0x3f\n 14165: a1 = ra >> 0x1\n 14168: a0 = a0 | a1\n 14171: a1 = t1 << 0x3f\n 14174: a2 = t2 >> 0x1\n 14177: a1 = a1 | a2\n 14180: a2 = ra << 0x3f\n 14183: a3 = a4 >> 0x1\n 14186: a5 = a3 | a2\n 14189: a2 = t1 >> 0x1\n 14192: u64 [s1 + 0xb0] = a4\n 14196: a4 = a4 & 0x1\n 14199: a3 = -a4\n 14201: a1 = a1 & a3\n 14204: t0 = a3 & a0\n 14207: a2 = a2 & a3\n 14210: a0 = a5 & 0x7f\n 14213: u64 [s1 + 0xa0] = a0\n 14217: a5 = a0 if a4 == 0\n 14220: u64 [s1 + 0x78] = a5\n 14223: a0 = a5 <u 0x20\n 14226: u64 [s1 + 0x68] = t0\n 14229: a0 = 0 if t0 != 0\n 14231: u64 [s1 + 0x70] = a1\n 14234: u64 [s1 + 0x60] = a2\n 14237: a1 = a1 | a2\n 14240: a0 = 0 if a1 != 0\n 14242: u64 [s1 + 0xb8] = a4\n 14246: a1 = a4 <u 0x1\n 14249: jump @576 if a1 != a0\n      : @458 (gas: 12)\n 14253: a2 = u64 [s1 + 0x30]\n 14256: a4 = u64 [s1 + 0x28]\n 14259: a0 = a4 | a2\n 14262: a1 = u64 [s1 + 0x20]\n 14265: a3 = u64 [s1 + 0x18]\n 14268: a1 = a1 | a3\n 14271: a0 = a0 | a1\n 14274: a0 = a0 >> 0x20\n 14277: a1 = a1 | a2\n 14280: a1 = a1 << 0x20\n 14283: a1 = a1 | a0\n 14286: jump @525 if a1 != 0\n      : @459 (gas: 18)\n 14290: a0 = a4\n 14292: u64 [s1 + 0x90] = ra\n 14296: u64 [s1 + 0x98] = t2\n 14300: u64 [s1 + 0xa8] = t1\n 14304: a1 = u64 [s1 + 0x78]\n 14307: a3 = s1 + 0x7ff\n 14311: a3 = a3 + 0x31\n 14314: a4 = a3 + 0x400\n 14318: u64 [a4 + 0x90] = a1\n 14322: a1 = u64 [s1 + 0x68]\n 14325: u64 [a4 + 0x98] = a1\n 14329: a1 = u64 [s1 + 0x70]\n 14332: u64 [a4 + 0xa0] = a1\n 14336: a1 = s1 + 0x7ff\n 14340: a1 = a1 + 0x4c1\n 14344: a2 = u64 [s1 + 0x60]\n 14347: u64 [a4 + 0xa8] = a2\n 14351: ra = 448, jump @19\n      : @460 [@dyn 224] (gas: 2)\n 14357: a0 = u64 [s1 + 0xb8]\n 14361: jump @538 if a0 != 0\n      : @461 (gas: 1)\n 14365: t0 = 450, jump @714\n      : @462 [@dyn 225] (gas: 1)\n 14371: jump @525 if a1 == 0\n      : @463 (gas: 16)\n 14375: a0 = u64 [s1 + 0xb0]\n 14379: a1 = a0 & 0xffffffffffffff00\n 14383: i32 a0 = a3 + 0x20\n 14386: a2 = s1 + 0x7ff\n 14390: a2 = a2 + 0x31\n 14393: a3 = u64 [s1 + 0x90]\n 14397: a4 = a2 + 0x400\n 14401: u64 [a4 + 0x18] = a3\n 14404: u64 [a4 + 0x10] = a1\n 14407: a1 = u64 [s1 + 0x98]\n 14411: u64 [a4 + 0x20] = a1\n 14414: a1 = s1 + 0x7ff\n 14418: a1 = a1 + 0x441\n 14422: a3 = u64 [s1 + 0xa8]\n 14426: u64 [a4 + 0x28] = a3\n 14429: ra = 452, jump @19\n      : @464 [@dyn 226] (gas: 8)\n 14435: t1 = 0\n 14437: u64 [s1 + 168] = 0\n 14441: u64 [s1 + 176] = 0\n 14445: a0 = u64 [s1 + 0xa0]\n 14449: a0 = a0 >u 0\n 14451: a0 = a0 << 0x5\n 14454: u64 [s1 + 0xb8] = a0\n 14458: fallthrough\n      : @465 (gas: 18)\n 14459: a1 = u64 [s1 + 0xb8]\n 14463: a0 = a1 + 0x3f\n 14466: t0 = a0 <u a1\n 14469: a3 = t1 + t0\n 14472: a1 = a0 & 0xffffffffffffffe0\n 14475: a0 = t1\n 14477: t1 = u64 [s1 + 0x28]\n 14480: t1 = t1 + a1\n 14483: a4 = t1 <u a1\n 14486: ra = u64 [s1 + 0x18]\n 14489: a1 = a3 + ra\n 14492: t2 = a1 + a4\n 14495: a5 = t2 ^ a3\n 14498: a2 = t2 <u a3\n 14501: a2 = a4 if a5 == 0\n 14504: a3 = a3 <u a0\n 14507: a3 = t0 if t0 == 0\n 14510: t0 = 454, jump @699\n      : @466 [@dyn 227] (gas: 1)\n 14516: jump @587 if a5 != 0\n      : @467 (gas: 1)\n 14520: t0 = 456, jump @723\n      : @468 [@dyn 228] (gas: 10)\n 14526: t0 = a2 <u a0\n 14529: a0 = u64 [s1 + 0x20]\n 14532: a4 = a3 ^ a0\n 14535: a0 = a3 <u a0\n 14538: a0 = t0 if a4 == 0\n 14541: t0 = u64 [s1 + 0x30]\n 14544: a1 = a2 ^ t0\n 14547: a1 = a1 | a4\n 14550: a0 = a5 if a1 == 0\n 14553: jump @587 if a0 != 0\n      : @469 (gas: 10)\n 14557: a4 = s1 + 0x7ff\n 14561: a4 = a4 + 0x31\n 14564: u64 [a4 + 0x3f0] = t1\n 14568: u64 [a4 + 0x3f8] = t2\n 14572: u64 [a4 + 0x400] = a2\n 14576: a0 = 0x40\n 14579: a1 = s1 + 0x7ff\n 14583: a1 = a1 + 0x421\n 14587: u64 [a4 + 0x408] = a3\n 14591: ra = 458, jump @19\n      : @470 [@dyn 229] (gas: 4)\n 14597: a0 = s1 + 0x7ff\n 14601: a0 = a0 + 0x401\n 14605: a1 = 0x40\n 14608: ra = 460, jump @17\n      : @471 [@dyn 230] (gas: 31)\n 14614: a1 = s1 + 0x7ff\n 14618: a1 = a1 + 0x31\n 14621: a3 = u64 [a1 + 0x3e8]\n 14625: u64 [s1 + 0xb8] = a3\n 14629: a2 = u64 [a1 + 0x3e0]\n 14633: u64 [s1 + 0xb0] = a2\n 14637: a4 = u64 [a1 + 0x3d8]\n 14641: u64 [s1 + 0xa8] = a4\n 14645: a5 = u64 [a1 + 0x3d0]\n 14649: u64 [s1 + 0xa0] = a5\n 14653: a0 = u64 [s1 + 0x20]\n 14656: u64 [a1 + 0x388] = a0\n 14660: a0 = u64 [s1 + 0x30]\n 14663: u64 [a1 + 0x380] = a0\n 14667: a0 = u64 [s1 + 0x18]\n 14670: u64 [a1 + 0x378] = a0\n 14674: a0 = u64 [s1 + 0x28]\n 14677: u64 [a1 + 0x370] = a0\n 14681: a0 = a1 + 0x300\n 14685: u64 [a0 + 0xa8] = a3\n 14689: u64 [a0 + 0xa0] = a2\n 14693: u64 [a0 + 0x98] = a4\n 14697: a3 = a1\n 14699: a0 = s1 + 0x7ff\n 14703: a0 = a0 + 0x3e1\n 14707: a1 = s1 + 0x7ff\n 14711: a1 = a1 + 0x3c1\n 14715: a2 = s1 + 0x7ff\n 14719: a2 = a2 + 0x3a1\n 14723: u64 [a3 + 0x390] = a5\n 14727: ra = 462, jump @634\n      : @472 [@dyn 231] (gas: 1)\n 14733: t0 = 464, jump @720\n      : @473 [@dyn 232] (gas: 1)\n 14739: jump @525 if a0 != 0\n      : @474 (gas: 10)\n 14743: t0 = a3\n 14745: a1 = s1 + 0x7ff\n 14749: a1 = a1 + 0x31\n 14752: a5 = a1 + 0x300\n 14756: a0 = u64 [a5 + 0xb8]\n 14760: a3 = u64 [a5 + 0xc8]\n 14764: u64 [s1 + 0x98] = a3\n 14768: t1 = u64 [a1 + 0x3b0]\n 14772: a3 = u64 [a5 + 0xc0]\n 14776: fallthrough\n      : @475 (gas: 26)\n 14777: t2 = a0 ^ a4\n 14780: a5 = a0 <u a4\n 14783: ra = t1 <u a2\n 14786: a5 = ra if t2 == 0\n 14789: a1 = a3 - t0\n 14792: t2 = a1 - a5\n 14795: a1 = a1 <u a5\n 14798: u64 [s1 + 0x90] = a1\n 14802: a3 = a3 <u t0\n 14805: a5 = u64 [s1 + 0xb8]\n 14809: a1 = u64 [s1 + 0x98]\n 14813: a5 = a1 - a5\n 14816: a5 = a5 - a3\n 14819: a1 = u64 [s1 + 0x90]\n 14823: a5 = a5 - a1\n 14826: a0 = a0 - a4\n 14829: a0 = a0 - ra\n 14832: a1 = t1 - a2\n 14835: a0 = a0 | a5\n 14838: a3 = a1 | t2\n 14841: a3 = a3 | a0\n 14844: a0 = a0 | t2\n 14847: a3 = a3 >> 0x20\n 14850: a0 = a0 << 0x20\n 14853: a0 = a0 | a3\n 14856: jump @525 if a0 != 0\n      : @476 (gas: 3)\n 14860: a0 = a2\n 14862: u64 [s1 + 0xb8] = a1\n 14866: ra = 466, jump @26\n      : @477 [@dyn 233] (gas: 6)\n 14872: i32 a1 = a0 + 0\n 14874: a2 = i32 [s1 + 0xb8]\n 14878: a0 = 0\n 14880: ra = 0x24e\n 14884: ecalli 7 // 'seal_return'\n 14886: jump @596\n      : @478 (gas: 14)\n 14889: a0 = 0xffffffff\n 14899: u64 [s1 + 0x60] = a0\n 14902: u64 [t0 + 104] = 0\n 14905: a0 = u64 [s1 + 0x88]\n 14909: a2 = t0\n 14911: u64 [a2 + 0x50] = a0\n 14914: a0 = u64 [s1 + 0x80]\n 14918: u64 [a2 + 0x58] = a0\n 14921: a1 = s1 + 0x7ff\n 14925: a1 = a1 + 0x81\n 14929: a0 = u64 [s1 + 0x78]\n 14932: u64 [a2 + 0x60] = a0\n 14935: a0 = 0\n 14937: ra = 468, jump @19\n      : @479 [@dyn 234] (gas: 11)\n 14943: a0 = s1 + 0x7ff\n 14947: a0 = a0 + 0x31\n 14950: u64 [a0 + 72] = 0\n 14953: u64 [a0 + 64] = 0\n 14956: u64 [a0 + 56] = 0\n 14959: a3 = a0\n 14961: a0 = 0x20\n 14964: a1 = s1 + 0x7ff\n 14968: a1 = a1 + 0x61\n 14971: u64 [a3 + 48] = 0x4\n 14975: ra = 470, jump @19\n      : @480 [@dyn 235] (gas: 7)\n 14981: a0 = sp + 0xffffffffffffffe0\n 14984: a0 = a0 & 0xffffffffffffffe0\n 14987: u64 [s1 + 0x68] = a0\n 14990: sp = a0\n 14992: a1 = u64 [s1 + 0xb8]\n 14996: a0 = i32 [a1]\n 14998: jump @482 if a0 >u 63\n      : @481 (gas: 2)\n 15002: u32 [a1 + 0] = 0x40\n 15005: fallthrough\n      : @482 (gas: 4)\n 15006: a0 = sp + 0xffffffffffffffe0\n 15009: a0 = a0 & 0xffffffffffffffe0\n 15012: u64 [s1 + 0x58] = a0\n 15015: t0 = 472, jump @713\n      : @483 [@dyn 236] (gas: 5)\n 15021: ra = 0x1da\n 15025: ecalli 6 // 'hash_keccak_256'\n 15027: a3 = u64 [s1 + 0x58]\n 15030: t0 = 0x1dc\n 15034: jump @703\n      : @484 [@dyn 237] (gas: 2)\n 15037: a3 = u64 [s1 + 0x58]\n 15040: t0 = 476, jump @703\n      : @485 [@dyn 238] (gas: 2)\n 15046: a0 = a0 + 0x41\n 15049: ra = 478, jump @21\n      : @486 [@dyn 239] (gas: 28)\n 15055: a2 = s1 + 0x7ff\n 15059: a2 = a2 + 0x31\n 15062: a3 = u64 [a2 + 0x10]\n 15065: a0 = u64 [a2 + 0x18]\n 15068: a1 = u64 [a2 + 0x20]\n 15071: a2 = u64 [a2 + 0x28]\n 15074: a4 = u64 [s1 + 0xa8]\n 15078: u64 [s1 + 0x7f8] = a4\n 15082: a4 = u64 [s1 + 0xa0]\n 15086: u64 [s1 + 0x7f0] = a4\n 15090: a4 = u64 [s1 + 0x98]\n 15094: u64 [s1 + 0x7e8] = a4\n 15098: a4 = u64 [s1 + 0x90]\n 15102: u64 [s1 + 0x7e0] = a4\n 15106: a4 = s1 + 0x1000\n 15110: u64 [a4 + 0xfffffffffffff818] = a2\n 15114: a2 = s1 + 0x1000\n 15118: u64 [a2 + 0xfffffffffffff810] = a1\n 15122: a1 = s1 + 0x1000\n 15126: u64 [a1 + 0xfffffffffffff808] = a0\n 15130: a0 = s1 + 0x7ff\n 15134: a0 = a0 + 0x21\n 15137: a1 = s1 + 0x7ff\n 15141: a1 = a1 + 0x1\n 15144: a2 = s1 + 0x7e0\n 15148: a4 = s1 + 0x1000\n 15152: u64 [a4 + 0xfffffffffffff800] = a3\n 15156: ra = 480, jump @677\n      : @487 [@dyn 240] (gas: 17)\n 15162: a1 = s1 + 0x7ff\n 15166: a1 = a1 + 0x31\n 15169: a0 = u64 [a1 + 0x8]\n 15172: a1 = u64 [a1]\n 15174: a2 = s1 + 0x1000\n 15178: a2 = u64 [a2 + 0xfffffffffffff828]\n 15182: a3 = s1 + 0x1000\n 15186: a3 = u64 [a3 + 0xfffffffffffff820]\n 15190: a4 = s1 + 0x1030\n 15194: a5 = a4 + 0x200\n 15198: u64 [a5 + 0x88] = a0\n 15202: u64 [a5 + 0x80] = a1\n 15206: u64 [a5 + 0x78] = a2\n 15209: u64 [a5 + 0x70] = a3\n 15212: a1 = s1 + 0x12a0\n 15216: a0 = u64 [s1 + 0x68]\n 15219: ra = 482, jump @22\n      : @488 [@dyn 241] (gas: 17)\n 15225: a0 = u64 [s1 + 0x30]\n 15228: a2 = a0 & 0xffffffffffffffff\n 15231: a0 = u64 [s1 + 0x38]\n 15234: a1 = a0 & 0xffffffffffffffff\n 15237: a0 = u64 [s1 + 0x40]\n 15240: a3 = u64 [s1 + 0x60]\n 15243: a0 = a0 & a3\n 15246: u64 [s1 + 2008] = 0\n 15250: u64 [s1 + 0x30] = a0\n 15253: u64 [s1 + 0x7d0] = a0\n 15257: u64 [s1 + 0x38] = a1\n 15260: u64 [s1 + 0x7c8] = a1\n 15264: a1 = s1 + 0x7c0\n 15268: u64 [s1 + 0x40] = a2\n 15271: u64 [s1 + 0x7c0] = a2\n 15275: a0 = 0\n 15277: ra = 484, jump @19\n      : @489 [@dyn 242] (gas: 7)\n 15283: u64 [s1 + 1976] = 0\n 15287: u64 [s1 + 1968] = 0\n 15291: u64 [s1 + 1952] = 0x4\n 15296: a0 = 0x20\n 15299: a1 = s1 + 0x7a0\n 15303: u64 [s1 + 1960] = 0\n 15307: ra = 486, jump @19\n      : @490 [@dyn 243] (gas: 7)\n 15313: a1 = u64 [s1 + 0xb8]\n 15317: a0 = sp + 0xffffffffffffffe0\n 15320: a0 = a0 & 0xffffffffffffffe0\n 15323: u64 [s1 + 0x68] = a0\n 15326: sp = a0\n 15328: a0 = i32 [a1]\n 15330: jump @492 if a0 >u 63\n      : @491 (gas: 2)\n 15334: u32 [a1 + 0] = 0x40\n 15337: fallthrough\n      : @492 (gas: 4)\n 15338: a0 = sp + 0xffffffffffffffe0\n 15341: a0 = a0 & 0xffffffffffffffe0\n 15344: u64 [s1 + 0x60] = a0\n 15347: t0 = 488, jump @713\n      : @493 [@dyn 244] (gas: 5)\n 15353: ra = 0x1ea\n 15357: ecalli 6 // 'hash_keccak_256'\n 15359: a3 = u64 [s1 + 0x60]\n 15362: t0 = 0x1ec\n 15366: jump @707\n      : @494 [@dyn 245] (gas: 2)\n 15369: a3 = u64 [s1 + 0x60]\n 15372: t0 = 492, jump @707\n      : @495 [@dyn 246] (gas: 2)\n 15378: a0 = s1 + 0x780\n 15382: ra = 494, jump @21\n      : @496 [@dyn 247] (gas: 20)\n 15388: a3 = u64 [s1 + 0x780]\n 15392: a0 = u64 [s1 + 0x788]\n 15396: a1 = u64 [s1 + 0x790]\n 15400: a2 = u64 [s1 + 0x798]\n 15404: a4 = u64 [s1 + 0xa8]\n 15408: u64 [s1 + 0x738] = a4\n 15412: a4 = u64 [s1 + 0xa0]\n 15416: u64 [s1 + 0x730] = a4\n 15420: a4 = u64 [s1 + 0x98]\n 15424: u64 [s1 + 0x728] = a4\n 15428: a4 = u64 [s1 + 0x90]\n 15432: u64 [s1 + 0x720] = a4\n 15436: u64 [s1 + 0x758] = a2\n 15440: u64 [s1 + 0x750] = a1\n 15444: u64 [s1 + 0x748] = a0\n 15448: a0 = s1 + 0x760\n 15452: a1 = s1 + 0x740\n 15456: a2 = s1 + 0x720\n 15460: u64 [s1 + 0x740] = a3\n 15464: ra = 496, jump @685\n      : @497 [@dyn 248] (gas: 13)\n 15470: a0 = u64 [s1 + 0x778]\n 15474: a1 = u64 [s1 + 0x770]\n 15478: a2 = u64 [s1 + 0x768]\n 15482: a3 = u64 [s1 + 0x760]\n 15486: a4 = s1 + 0x1030\n 15490: a5 = a4 + 0x200\n 15494: u64 [a5 + 0xa8] = a0\n 15498: u64 [a5 + 0xa0] = a1\n 15502: u64 [a5 + 0x98] = a2\n 15506: u64 [a5 + 0x90] = a3\n 15510: a1 = s1 + 0x12c0\n 15514: a0 = u64 [s1 + 0x68]\n 15517: ra = 498, jump @22\n      : @498 [@dyn 249] (gas: 11)\n 15523: u64 [s1 + 1816] = 0\n 15527: a0 = u64 [s1 + 0x78]\n 15530: a2 = s1 + 0x700\n 15534: u64 [a2 + 0x10] = a0\n 15537: a0 = u64 [s1 + 0x80]\n 15541: u64 [a2 + 0x8] = a0\n 15544: a1 = s1 + 0x700\n 15548: a0 = u64 [s1 + 0x88]\n 15552: u64 [a2] = a0\n 15554: a0 = 0\n 15556: ra = 500, jump @19\n      : @499 [@dyn 250] (gas: 7)\n 15562: u64 [s1 + 1784] = 0\n 15566: u64 [s1 + 1776] = 0\n 15570: u64 [s1 + 1760] = 0x5\n 15575: a0 = 0x20\n 15578: a1 = s1 + 0x6e0\n 15582: u64 [s1 + 1768] = 0\n 15586: ra = 502, jump @19\n      : @500 [@dyn 251] (gas: 3)\n 15592: a1 = u64 [s1 + 0xb8]\n 15596: a0 = i32 [a1]\n 15598: jump @502 if a0 >u 63\n      : @501 (gas: 2)\n 15602: u32 [a1 + 0] = 0x40\n 15605: fallthrough\n      : @502 (gas: 4)\n 15606: a0 = sp + 0xffffffffffffffe0\n 15609: a0 = a0 & 0xffffffffffffffe0\n 15612: u64 [s1 + 0x68] = a0\n 15615: t0 = 504, jump @713\n      : @503 [@dyn 252] (gas: 5)\n 15621: ra = 0x1fa\n 15625: ecalli 6 // 'hash_keccak_256'\n 15627: a3 = u64 [s1 + 0x68]\n 15630: t0 = 0x1fc\n 15634: jump @701\n      : @504 [@dyn 253] (gas: 2)\n 15637: a3 = u64 [s1 + 0x68]\n 15640: t0 = 508, jump @701\n      : @505 [@dyn 254] (gas: 6)\n 15646: a0 = u64 [s1 + 0x28]\n 15649: ra = 0x1fe\n 15653: ecalli 3 // 'caller'\n 15655: a2 = u64 [s1 + 0x70]\n 15658: t0 = 0x200\n 15662: jump @698\n      : @506 [@dyn 255] (gas: 2)\n 15665: a2 = u64 [s1 + 0x70]\n 15668: t0 = 512, jump @698\n      : @507 [@dyn 256] (gas: 7)\n 15674: u64 [s1 + 1752] = 0\n 15678: u64 [s1 + 0x6d0] = a1\n 15682: u64 [s1 + 0x6c8] = a0\n 15686: a1 = s1 + 0x6c0\n 15690: u64 [s1 + 0x6c0] = a3\n 15694: a0 = 0\n 15696: ra = 514, jump @19\n      : @508 [@dyn 257] (gas: 12)\n 15702: a0 = u64 [s1 + 0x48]\n 15705: a3 = s1 + 0x600\n 15709: u64 [a3 + 0xb8] = a0\n 15713: a0 = u64 [s1 + 0x50]\n 15716: u64 [a3 + 0xb0] = a0\n 15720: a0 = u64 [s1 + 0x58]\n 15723: u64 [a3 + 0xa8] = a0\n 15727: a0 = 0x20\n 15730: a1 = s1 + 0x6a0\n 15734: a2 = u64 [s1 + 0x60]\n 15737: u64 [a3 + 0xa0] = a2\n 15741: ra = 516, jump @19\n      : @509 [@dyn 258] (gas: 3)\n 15747: a1 = u64 [s1 + 0xb8]\n 15751: a0 = i32 [a1]\n 15753: jump @511 if a0 >u 63\n      : @510 (gas: 2)\n 15757: u32 [a1 + 0] = 0x40\n 15760: fallthrough\n      : @511 (gas: 4)\n 15761: a0 = sp + 0xffffffffffffffe0\n 15764: a0 = a0 & 0xffffffffffffffe0\n 15767: u64 [s1 + 0xb8] = a0\n 15771: t0 = 518, jump @713\n      : @512 [@dyn 259] (gas: 5)\n 15777: ra = 0x208\n 15781: ecalli 6 // 'hash_keccak_256'\n 15783: a3 = u64 [s1 + 0xb8]\n 15787: t0 = 0x20a\n 15791: jump @707\n      : @513 [@dyn 260] (gas: 2)\n 15794: a3 = u64 [s1 + 0xb8]\n 15798: t0 = 522, jump @707\n      : @514 [@dyn 261] (gas: 2)\n 15804: a0 = s1 + 0x680\n 15808: ra = 524, jump @21\n      : @515 [@dyn 262] (gas: 20)\n 15814: a3 = u64 [s1 + 0x680]\n 15818: a0 = u64 [s1 + 0x688]\n 15822: a1 = u64 [s1 + 0x690]\n 15826: a2 = u64 [s1 + 0x698]\n 15830: a4 = u64 [s1 + 0xa8]\n 15834: u64 [s1 + 0x638] = a4\n 15838: a4 = u64 [s1 + 0xa0]\n 15842: u64 [s1 + 0x630] = a4\n 15846: a4 = u64 [s1 + 0x98]\n 15850: u64 [s1 + 0x628] = a4\n 15854: a4 = u64 [s1 + 0x90]\n 15858: u64 [s1 + 0x620] = a4\n 15862: u64 [s1 + 0x658] = a2\n 15866: u64 [s1 + 0x650] = a1\n 15870: u64 [s1 + 0x648] = a0\n 15874: a0 = s1 + 0x660\n 15878: a1 = s1 + 0x640\n 15882: a2 = s1 + 0x620\n 15886: u64 [s1 + 0x640] = a3\n 15890: ra = 526, jump @677\n      : @516 [@dyn 263] (gas: 13)\n 15896: a0 = u64 [s1 + 0x678]\n 15900: a1 = u64 [s1 + 0x670]\n 15904: a2 = u64 [s1 + 0x668]\n 15908: a3 = u64 [s1 + 0x660]\n 15912: a4 = s1 + 0x1030\n 15916: a5 = a4 + 0x200\n 15920: u64 [a5 + 0xc8] = a0\n 15924: u64 [a5 + 0xc0] = a1\n 15928: u64 [a5 + 0xb8] = a2\n 15932: u64 [a5 + 0xb0] = a3\n 15936: a1 = s1 + 0x12e0\n 15940: a0 = u64 [s1 + 0x68]\n 15943: ra = 528, jump @22\n      : @517 [@dyn 264] (gas: 3)\n 15949: a0 = s1 + 0x600\n 15953: a1 = 0x40\n 15956: ra = 530, jump @17\n      : @518 [@dyn 265] (gas: 6)\n 15962: a4 = s1 + 0x600\n 15966: a0 = u64 [a4 + 0x18]\n 15969: a1 = u64 [a4 + 0x10]\n 15972: a2 = u64 [a4 + 0x8]\n 15975: a3 = u64 [a4]\n 15977: t0 = 532, jump @710\n      : @519 [@dyn 266] (gas: 1)\n 15983: jump @525 if a0 != 0\n      : @520 (gas: 12)\n 15987: a0 = u64 [s1 + 0x90]\n 15991: u64 [s1 + 0x5e0] = a0\n 15995: a0 = u64 [s1 + 0x98]\n 15999: u64 [s1 + 0x5e8] = a0\n 16003: a0 = u64 [s1 + 0xa0]\n 16007: u64 [s1 + 0x5f0] = a0\n 16011: a1 = s1 + 0x5e0\n 16015: a0 = u64 [s1 + 0xa8]\n 16019: u64 [s1 + 0x5f8] = a0\n 16023: a0 = a3\n 16025: u64 [s1 + 0xb8] = a3\n 16029: ra = 534, jump @19\n      : @521 [@dyn 267] (gas: 28)\n 16035: u64 [s1 + 1432] = 0\n 16039: a0 = u64 [s1 + 0x30]\n 16042: u64 [s1 + 0x590] = a0\n 16046: a0 = u64 [s1 + 0x38]\n 16049: u64 [s1 + 0x588] = a0\n 16053: a0 = u64 [s1 + 0x40]\n 16056: u64 [s1 + 0x580] = a0\n 16060: u64 [s1 + 1464] = 0\n 16064: a0 = u64 [s1 + 0x78]\n 16067: u64 [s1 + 0x5b0] = a0\n 16071: a0 = u64 [s1 + 0x80]\n 16075: u64 [s1 + 0x5a8] = a0\n 16079: a0 = u64 [0x20020]\n 16084: a1 = u64 [0x20028]\n 16089: a2 = u64 [0x20030]\n 16094: a3 = u64 [s1 + 0x88]\n 16098: u64 [s1 + 0x5a0] = a3\n 16102: u64 [s1 + 0x5d8] = a0\n 16106: u64 [s1 + 0x5d0] = a1\n 16110: u64 [s1 + 0x5c8] = a2\n 16114: a0 = u64 [0x20038]\n 16119: a1 = 0x20\n 16122: a2 = s1 + 0x5c0\n 16126: a3 = s1 + 0x5a0\n 16130: a4 = s1 + 0x580\n 16134: u64 [s1 + 0x5c0] = a0\n 16138: a0 = u64 [s1 + 0xb8]\n 16142: ra = 536, jump @23\n      : @522 [@dyn 268] (gas: 3)\n 16148: a0 = s1 + 0x560\n 16152: a1 = 0x40\n 16155: ra = 538, jump @17\n      : @523 [@dyn 269] (gas: 6)\n 16161: a4 = s1 + 0x500\n 16165: a3 = u64 [a4 + 0x78]\n 16168: a1 = u64 [a4 + 0x70]\n 16171: a2 = u64 [a4 + 0x68]\n 16174: a0 = u64 [a4 + 0x60]\n 16177: t0 = 540, jump @718\n      : @524 [@dyn 270] (gas: 1)\n 16183: jump @593 if a1 == 0\n      : @525 (gas: 1)\n 16187: trap\n      : @526 (gas: 7)\n 16188: u64 [s1 + 600] = 0\n 16192: u64 [s1 + 592] = 0\n 16196: u64 [s1 + 584] = 0\n 16200: a1 = s1 + 0x240\n 16204: u64 [s1 + 576] = 0\n 16208: a0 = 0\n 16210: ra = 542, jump @19\n      : @527 [@dyn 271] (gas: 6)\n 16216: a0 = sp + 0xffffffffffffffe0\n 16219: a0 = a0 & 0xffffffffffffffe0\n 16222: u64 [s1 + 0x58] = a0\n 16225: sp = a0\n 16227: a1 = i32 [0x2008c]\n 16232: jump @529 if a1 >u 31\n      : @528 (gas: 2)\n 16236: u32 [0x2008c] = 0x20\n 16242: fallthrough\n      : @529 (gas: 10)\n 16243: a0 = sp + 0xffffffffffffffe0\n 16246: a2 = a0 & 0xffffffffffffffe0\n 16249: u64 [s1 + 0xa8] = a2\n 16253: sp = a2\n 16255: a0 = 0x200a0\n 16260: i32 a0 = a0 + 0\n 16262: i32 a2 = a2 + 0\n 16264: a1 = 0x20\n 16267: ecalli 6 // 'hash_keccak_256'\n 16269: t0 = 544, jump @697\n      : @530 [@dyn 272] (gas: 18)\n 16275: t0 = u64 [s1 + 0x58]\n 16278: a3 = a2\n 16280: a5 = t0\n 16282: u64 [a5 + 0x18] = a2\n 16285: u64 [s1 + 0x80] = t2\n 16289: u64 [t0 + 0x10] = t2\n 16292: u64 [s1 + 0x90] = a1\n 16296: u64 [a5 + 0x8] = a1\n 16299: a2 = a0\n 16301: u64 [a5] = a0\n 16303: a0 = u64 [s1 + 0x30]\n 16306: a4 = a4 + a0\n 16309: u64 [s1 + 0x40] = a4\n 16312: a0 = a4 <u a0\n 16315: a1 = u64 [s1 + 0x20]\n 16318: a0 = a0 + a1\n 16321: u64 [s1 + 0x38] = a0\n 16324: fallthrough\n      : @531 (gas: 21)\n 16325: u64 [s1 + 0xa8] = ra\n 16329: u64 [s1 + 0x88] = a3\n 16333: u64 [s1 + 0x98] = a2\n 16337: a0 = u64 [s1 + 0x78]\n 16340: a1 = u64 [s1 + 0xb8]\n 16344: a0 = a1 <u a0\n 16347: a2 = u64 [s1 + 0x68]\n 16350: a1 = t1 ^ a2\n 16353: a2 = t1 <u a2\n 16356: a2 = a0 if a1 == 0\n 16359: a4 = u64 [s1 + 0x70]\n 16362: a0 = ra <u a4\n 16365: a3 = u64 [s1 + 0x60]\n 16368: a1 = u64 [s1 + 0xb0]\n 16372: a5 = a1 ^ a3\n 16375: a3 = a1 <u a3\n 16378: a3 = a0 if a5 == 0\n 16381: a0 = ra ^ a4\n 16384: a0 = a0 | a5\n 16387: a3 = a2 if a0 == 0\n 16390: jump @420 if a3 == 0\n      : @532 (gas: 4)\n 16394: a0 = s1 + 0x220\n 16398: a1 = t0\n 16400: u64 [s1 + 0xa0] = t1\n 16404: ra = 546, jump @21\n      : @533 [@dyn 273] (gas: 20)\n 16410: t1 = u64 [s1 + 0xb8]\n 16414: t2 = u64 [s1 + 0xa0]\n 16418: a1 = u64 [s1 + 0x50]\n 16421: a0 = a1 + t1\n 16424: a1 = a0 <u a1\n 16427: a4 = u64 [s1 + 0x48]\n 16430: a2 = a4 + t2\n 16433: a2 = a2 + a1\n 16436: a5 = a2 ^ a4\n 16439: a4 = a2 <u a4\n 16442: a4 = a1 if a5 == 0\n 16445: a5 = u64 [s1 + 0x40]\n 16448: ra = u64 [s1 + 0xa8]\n 16452: a1 = a5 + ra\n 16455: t0 = a1 <u a5\n 16458: a5 = u64 [s1 + 0xb0]\n 16462: a3 = u64 [s1 + 0x38]\n 16465: a5 = a5 + a3\n 16468: a5 = a5 + t0\n 16471: t0 = 548, jump @716\n      : @534 [@dyn 274] (gas: 1)\n 16477: jump @525 if a1 != 0\n      : @535 (gas: 12)\n 16481: t0 = u64 [s1 + 0x238]\n 16485: a3 = s1 + 0x200\n 16489: a1 = u64 [a3 + 0x30]\n 16492: a2 = u64 [a3 + 0x28]\n 16495: a4 = u64 [a3 + 0x20]\n 16498: u64 [a3] = a4\n 16500: u64 [a3 + 0x8] = a2\n 16503: u64 [a3 + 0x10] = a1\n 16506: a1 = s1 + 0x200\n 16510: u64 [s1 + 0x218] = t0\n 16514: u64 [s1 + 0xb8] = t1\n 16518: ra = 550, jump @19\n      : @536 [@dyn 275] (gas: 1)\n 16524: t0 = 552, jump @696\n      : @537 [@dyn 276] (gas: 13)\n 16530: t0 = u64 [s1 + 0x58]\n 16533: a1 = t0\n 16535: u64 [a1 + 0x8] = a3\n 16538: a2 = a5\n 16540: u64 [a1] = a5\n 16542: u64 [t0 + 0x10] = t1\n 16545: a3 = a0\n 16547: u64 [a1 + 0x18] = a0\n 16550: u64 [s1 + 0x80] = t1\n 16554: u64 [s1 + 0xb8] = ra\n 16558: t1 = t2\n 16560: ra = a4\n 16562: jump @531\n      : @538 (gas: 10)\n 16565: a2 = s1 + 0x7ff\n 16569: a2 = a2 + 0x31\n 16572: u64 [a2 + 1160] = 0\n 16576: u64 [a2 + 1152] = 0\n 16580: u64 [a2 + 1144] = 0\n 16584: a1 = s1 + 0x7ff\n 16588: a1 = a1 + 0x4a1\n 16592: u64 [a2 + 1136] = 0x1\n 16597: a0 = 0\n 16599: ra = 554, jump @19\n      : @539 [@dyn 277] (gas: 6)\n 16605: a0 = sp + 0xffffffffffffffe0\n 16608: a0 = a0 & 0xffffffffffffffe0\n 16611: u64 [s1 + 0x58] = a0\n 16614: sp = a0\n 16616: a1 = i32 [0x2008c]\n 16621: jump @541 if a1 >u 31\n      : @540 (gas: 2)\n 16625: u32 [0x2008c] = 0x20\n 16631: fallthrough\n      : @541 (gas: 10)\n 16632: a0 = sp + 0xffffffffffffffe0\n 16635: a2 = a0 & 0xffffffffffffffe0\n 16638: u64 [s1 + 0xa8] = a2\n 16642: sp = a2\n 16644: a0 = 0x200a0\n 16649: i32 a0 = a0 + 0\n 16651: i32 a2 = a2 + 0\n 16653: a1 = 0x20\n 16656: ecalli 6 // 'hash_keccak_256'\n 16658: t0 = 556, jump @697\n      : @542 [@dyn 278] (gas: 18)\n 16664: t0 = u64 [s1 + 0x58]\n 16667: a3 = a2\n 16669: a5 = t0\n 16671: u64 [a5 + 0x18] = a2\n 16674: u64 [s1 + 0x80] = t2\n 16678: u64 [t0 + 0x10] = t2\n 16681: u64 [s1 + 0x90] = a1\n 16685: u64 [a5 + 0x8] = a1\n 16688: a2 = a0\n 16690: u64 [a5] = a0\n 16692: a0 = u64 [s1 + 0x30]\n 16695: a4 = a4 + a0\n 16698: u64 [s1 + 0x40] = a4\n 16701: a0 = a4 <u a0\n 16704: a1 = u64 [s1 + 0x20]\n 16707: a0 = a0 + a1\n 16710: u64 [s1 + 0x38] = a0\n 16713: fallthrough\n      : @543 (gas: 21)\n 16714: u64 [s1 + 0xa8] = ra\n 16718: u64 [s1 + 0x88] = a3\n 16722: u64 [s1 + 0x98] = a2\n 16726: a0 = u64 [s1 + 0x78]\n 16729: a1 = u64 [s1 + 0xb8]\n 16733: a0 = a1 <u a0\n 16736: a2 = u64 [s1 + 0x68]\n 16739: a1 = t1 ^ a2\n 16742: a2 = t1 <u a2\n 16745: a2 = a0 if a1 == 0\n 16748: a4 = u64 [s1 + 0x70]\n 16751: a0 = ra <u a4\n 16754: a3 = u64 [s1 + 0x60]\n 16757: a1 = u64 [s1 + 0xb0]\n 16761: a5 = a1 ^ a3\n 16764: a3 = a1 <u a3\n 16767: a3 = a0 if a5 == 0\n 16770: a0 = ra ^ a4\n 16773: a0 = a0 | a5\n 16776: a3 = a2 if a0 == 0\n 16779: jump @465 if a3 == 0\n      : @544 (gas: 5)\n 16783: a0 = s1 + 0x7ff\n 16787: a0 = a0 + 0x481\n 16791: a1 = t0\n 16793: u64 [s1 + 0xa0] = t1\n 16797: ra = 558, jump @21\n      : @545 [@dyn 279] (gas: 20)\n 16803: t2 = u64 [s1 + 0xb8]\n 16807: ra = u64 [s1 + 0xa0]\n 16811: a1 = u64 [s1 + 0x50]\n 16814: a0 = a1 + t2\n 16817: a1 = a0 <u a1\n 16820: a4 = u64 [s1 + 0x48]\n 16823: a2 = a4 + ra\n 16826: a2 = a2 + a1\n 16829: a5 = a2 ^ a4\n 16832: a4 = a2 <u a4\n 16835: a4 = a1 if a5 == 0\n 16838: a5 = u64 [s1 + 0x40]\n 16841: t1 = u64 [s1 + 0xa8]\n 16845: a1 = a5 + t1\n 16848: t0 = a1 <u a5\n 16851: a5 = u64 [s1 + 0xb0]\n 16855: a3 = u64 [s1 + 0x38]\n 16858: a5 = a5 + a3\n 16861: a5 = a5 + t0\n 16864: t0 = 560, jump @716\n      : @546 [@dyn 280] (gas: 1)\n 16870: jump @525 if a1 != 0\n      : @547 (gas: 15)\n 16874: a5 = s1 + 0x7ff\n 16878: a5 = a5 + 0x31\n 16881: t0 = u64 [a5 + 0x468]\n 16885: t1 = u64 [a5 + 0x460]\n 16889: a2 = a5 + 0x400\n 16893: a1 = u64 [a2 + 0x58]\n 16896: a4 = u64 [a2 + 0x50]\n 16899: u64 [a2 + 0x30] = a4\n 16902: u64 [a2 + 0x38] = a1\n 16905: u64 [a5 + 0x440] = t1\n 16909: a1 = s1 + 0x7ff\n 16913: a1 = a1 + 0x461\n 16917: u64 [a5 + 0x448] = t0\n 16921: u64 [s1 + 0xb8] = t2\n 16925: ra = 562, jump @19\n      : @548 [@dyn 281] (gas: 1)\n 16931: t0 = 564, jump @696\n      : @549 [@dyn 282] (gas: 13)\n 16937: t0 = u64 [s1 + 0x58]\n 16940: a1 = t0\n 16942: u64 [a1 + 0x8] = a3\n 16945: a2 = a5\n 16947: u64 [a1] = a5\n 16949: u64 [t0 + 0x10] = t1\n 16952: a3 = a0\n 16954: u64 [a1 + 0x18] = a0\n 16957: u64 [s1 + 0x80] = t1\n 16961: u64 [s1 + 0xb8] = ra\n 16965: t1 = t2\n 16967: ra = a4\n 16969: jump @543\n      : @550 (gas: 2)\n 16972: a1 = 0x200a0\n 16977: fallthrough\n      : @551 (gas: 6)\n 16978: i32 a1 = a1 + 0\n 16980: a0 = 0x1\n 16983: a2 = 0\n 16985: ecalli 7 // 'seal_return'\n 16987: a1 = 0x200a0\n 16992: jump @551\n      : @552 (gas: 2)\n 16994: a1 = 0x200a0\n 16999: jump @551\n      : @553 (gas: 2)\n 17001: a1 = 0x200a0\n 17006: jump @551\n      : @554 (gas: 2)\n 17008: a1 = 0x200a0\n 17013: jump @551\n      : @555 (gas: 2)\n 17015: a1 = 0x200a0\n 17020: jump @551\n      : @556 (gas: 2)\n 17022: a1 = 0x200a0\n 17027: jump @551\n      : @557 (gas: 2)\n 17029: a1 = 0x200a0\n 17034: jump @551\n      : @558 (gas: 2)\n 17036: a1 = 0x200a0\n 17041: jump @551\n      : @559 (gas: 2)\n 17043: a1 = 0x200a0\n 17048: jump @551\n      : @560 (gas: 2)\n 17050: a1 = 0x200a0\n 17055: jump @551\n      : @561 (gas: 2)\n 17057: a1 = 0x200a0\n 17062: jump @551\n      : @562 (gas: 2)\n 17064: a1 = 0x200a0\n 17069: jump @551\n      : @563 (gas: 2)\n 17071: a1 = 0x200a0\n 17076: jump @551\n      : @564 (gas: 2)\n 17078: a1 = 0x200a0\n 17083: jump @551\n      : @565 (gas: 2)\n 17085: a1 = 0x200a0\n 17090: jump @551\n      : @566 (gas: 6)\n 17092: u64 [s1 + 240] = 0\n 17096: u64 [s1 + 232] = 0\n 17100: u64 [s1 + 224] = 0\n 17104: t0 = 0x236\n 17108: a0 = 0x4e487b7100000000\n 17118: fallthrough\n      : @567 [@dyn 283] (gas: 4)\n 17119: a1 = s1 + 0xe0\n 17123: u64 [s1 + 0xf8] = a0\n 17127: a0 = 0\n 17129: ra = 568, jump @19\n      : @568 [@dyn 284] (gas: 7)\n 17135: u64 [s1 + 216] = 0\n 17139: u64 [s1 + 208] = 0\n 17143: u64 [s1 + 192] = 0x22\n 17148: a0 = 0x4\n 17151: a1 = s1 + 0xc0\n 17155: u64 [s1 + 200] = 0\n 17159: ra = 570, jump @19\n      : @569 [@dyn 285] (gas: 2)\n 17165: a1 = i32 [0x2008c]\n 17170: jump @571 if a1 >u 63\n      : @570 (gas: 3)\n 17174: u32 [0x2008c] = 0x40\n 17180: a1 = 0x200a0\n 17185: jump @592\n      : @571 (gas: 2)\n 17188: a1 = 0x200a0\n 17193: jump @592\n      : @572 (gas: 2)\n 17196: a1 = 0x200a0\n 17201: jump @551\n      : @573 (gas: 2)\n 17204: a1 = 0x200a0\n 17209: jump @551\n      : @574 (gas: 2)\n 17212: a1 = 0x200a0\n 17217: jump @551\n      : @575 (gas: 2)\n 17220: a1 = 0x200a0\n 17225: jump @551\n      : @576 (gas: 11)\n 17228: a2 = s1 + 0x7ff\n 17232: a2 = a2 + 0x31\n 17235: u64 [a2 + 800] = 0\n 17239: u64 [a2 + 792] = 0\n 17243: u64 [a2 + 784] = 0\n 17247: a0 = 0x4e487b7100000000\n 17257: a1 = s1 + 0x7ff\n 17261: a1 = a1 + 0x341\n 17265: u64 [a2 + 0x328] = a0\n 17269: a0 = 0\n 17271: ra = 572, jump @19\n      : @577 [@dyn 286] (gas: 11)\n 17277: a1 = s1 + 0x7ff\n 17281: a1 = a1 + 0x31\n 17284: u64 [a1 + 776] = 0\n 17288: u64 [a1 + 768] = 0\n 17292: u64 [a1 + 752] = 0x22\n 17297: a2 = a1\n 17299: a0 = 0x4\n 17302: a1 = s1 + 0x7ff\n 17306: a1 = a1 + 0x321\n 17310: u64 [a2 + 760] = 0\n 17314: ra = 574, jump @19\n      : @578 [@dyn 287] (gas: 2)\n 17320: a1 = i32 [0x2008c]\n 17325: jump @580 if a1 >u 63\n      : @579 (gas: 3)\n 17329: u32 [0x2008c] = 0x40\n 17335: a1 = 0x200a0\n 17340: jump @592\n      : @580 (gas: 2)\n 17343: a1 = 0x200a0\n 17348: jump @592\n      : @581 (gas: 6)\n 17351: u64 [s1 + 304] = 0\n 17355: u64 [s1 + 296] = 0\n 17359: u64 [s1 + 288] = 0\n 17363: t0 = 0x240\n 17367: a0 = 0x4e487b7100000000\n 17377: fallthrough\n      : @582 [@dyn 288] (gas: 4)\n 17378: a1 = s1 + 0x120\n 17382: u64 [s1 + 0x138] = a0\n 17386: a0 = 0\n 17388: ra = 578, jump @19\n      : @583 [@dyn 289] (gas: 7)\n 17394: u64 [s1 + 280] = 0\n 17398: u64 [s1 + 272] = 0\n 17402: u64 [s1 + 256] = 0x41\n 17407: a0 = 0x4\n 17410: a1 = s1 + 0x100\n 17414: u64 [s1 + 264] = 0\n 17418: ra = 580, jump @19\n      : @584 [@dyn 290] (gas: 2)\n 17424: a1 = i32 [0x2008c]\n 17429: jump @586 if a1 >u 63\n      : @585 (gas: 3)\n 17433: u32 [0x2008c] = 0x40\n 17439: a1 = 0x200a0\n 17444: jump @592\n      : @586 (gas: 2)\n 17447: a1 = 0x200a0\n 17452: jump @592\n      : @587 (gas: 12)\n 17454: a0 = s1 + 0x7ff\n 17458: a0 = a0 + 0x31\n 17461: u64 [a0 + 864] = 0\n 17465: u64 [a0 + 856] = 0\n 17469: u64 [a0 + 848] = 0\n 17473: a2 = a0\n 17475: a0 = 0x4e487b7100000000\n 17485: a1 = s1 + 0x7ff\n 17489: a1 = a1 + 0x381\n 17493: u64 [a2 + 0x368] = a0\n 17497: a0 = 0\n 17499: ra = 582, jump @19\n      : @588 [@dyn 291] (gas: 11)\n 17505: a1 = s1 + 0x7ff\n 17509: a1 = a1 + 0x31\n 17512: u64 [a1 + 840] = 0\n 17516: u64 [a1 + 832] = 0\n 17520: u64 [a1 + 816] = 0x41\n 17525: a2 = a1\n 17527: a0 = 0x4\n 17530: a1 = s1 + 0x7ff\n 17534: a1 = a1 + 0x361\n 17538: u64 [a2 + 824] = 0\n 17542: ra = 584, jump @19\n      : @589 [@dyn 292] (gas: 2)\n 17548: a1 = i32 [0x2008c]\n 17553: jump @591 if a1 >u 63\n      : @590 (gas: 3)\n 17557: u32 [0x2008c] = 0x40\n 17563: a1 = 0x200a0\n 17568: jump @592\n      : @591 (gas: 2)\n 17570: a1 = 0x200a0\n 17575: fallthrough\n      : @592 (gas: 5)\n 17576: i32 a1 = a1 + 0\n 17578: a0 = 0x1\n 17581: a2 = 0x24\n 17584: ecalli 7 // 'seal_return'\n 17586: fallthrough\n      : @593 (gas: 7)\n 17587: u64 [s1 + 1368] = 0\n 17591: u64 [s1 + 1360] = 0\n 17595: u64 [s1 + 1352] = 0\n 17599: a1 = s1 + 0x540\n 17603: u64 [s1 + 1344] = 0x1\n 17608: u64 [s1 + 0xb8] = a0\n 17612: ra = 586, jump @19\n      : @594 [@dyn 293] (gas: 3)\n 17618: a1 = 0x20\n 17621: a0 = u64 [s1 + 0xb8]\n 17625: ra = 588, jump @26\n      : @595 [@dyn 294] (gas: 6)\n 17631: i32 a1 = a0 + 0\n 17633: a2 = 0x20\n 17636: a0 = 0\n 17638: ra = 0x24e\n 17642: ecalli 7 // 'seal_return'\n 17644: fallthrough\n      : @596 [@dyn 295] (gas: 17)\n 17645: sp = sp + 0xffffffffffffff30\n 17649: u64 [sp + 0xc8] = ra\n 17653: u64 [sp + 0xc0] = s0\n 17657: u64 [sp + 0xb8] = s1\n 17661: s0 = sp + 0xd0\n 17665: sp = sp & 0xfffffffffffffff0\n 17668: a2 = u64 [a1 + 0x18]\n 17671: u64 [sp + 0x10] = a2\n 17674: a2 = u64 [a1 + 0x10]\n 17677: u64 [sp + 0x8] = a2\n 17680: a2 = u64 [a1 + 0x8]\n 17683: u64 [sp] = a2\n 17685: s1 = u64 [a1]\n 17687: u64 [sp + 0x28] = a0\n 17690: a0 = sp + 0x90\n 17694: a1 = 0x40\n 17697: ra = 592, jump @17\n      : @597 [@dyn 296] (gas: 39)\n 17703: a1 = u64 [sp + 0x98]\n 17707: a2 = u64 [sp + 0x90]\n 17711: a0 = s1 + 0x1f\n 17714: ra = a0 <u s1\n 17717: a3 = u64 [sp]\n 17719: a4 = a3 + ra\n 17722: a0 = a0 & 0xffffffffffffffe0\n 17725: t1 = a1 + a4\n 17728: t0 = a2 + a0\n 17731: u64 [sp + 0x20] = a2\n 17734: a5 = t0 <u a2\n 17737: t1 = t1 + a5\n 17740: s1 = t1 ^ a1\n 17743: u64 [sp + 0x18] = a1\n 17746: a2 = t1 <u a1\n 17749: a2 = a5 if s1 == 0\n 17752: t2 = u64 [sp + 0xa8]\n 17756: a4 = a4 <u a3\n 17759: s1 = u64 [sp + 0xa0]\n 17763: a4 = ra if ra == 0\n 17766: a0 = u64 [sp + 0x8]\n 17769: a4 = a4 + a0\n 17772: a5 = a4 <u a0\n 17775: a4 = a4 + s1\n 17778: a3 = a4 + a2\n 17781: a0 = u64 [sp + 0x10]\n 17784: a0 = a0 + t2\n 17787: a0 = a0 + a5\n 17790: a5 = a3 <u a4\n 17793: a4 = a4 <u s1\n 17796: a0 = a0 + a4\n 17799: a4 = a0 + a5\n 17802: a0 = a4 >u 0\n 17804: a5 = a3 >u 0\n 17806: a5 = a0 if a4 != 0\n 17809: a0 = a3 | a4\n 17812: a1 = t1 >u 0\n 17814: a1 = a5 if a0 != 0\n 17817: jump @601 if a1 != 0\n      : @598 (gas: 8)\n 17820: a0 = a3 <u s1\n 17823: a1 = a4 ^ t2\n 17826: a5 = a4 <u t2\n 17829: a5 = a0 if a1 == 0\n 17832: a0 = a3 ^ s1\n 17835: a0 = a0 | a1\n 17838: a2 = a5 if a0 != 0\n 17841: jump @601 if a2 != 0\n      : @599 (gas: 8)\n 17844: u64 [sp + 0x70] = t0\n 17847: u64 [sp + 0x78] = t1\n 17850: u64 [sp + 0x80] = a3\n 17854: a0 = 0x40\n 17857: a1 = sp + 0x70\n 17860: u64 [sp + 0x88] = a4\n 17864: u64 [sp + 0x10] = t2\n 17867: ra = 594, jump @19\n      : @600 [@dyn 297] (gas: 14)\n 17873: a0 = u64 [sp + 0x28]\n 17876: a1 = u64 [sp + 0x10]\n 17879: u64 [a0 + 0x18] = a1\n 17882: u64 [a0 + 0x10] = s1\n 17885: a1 = u64 [sp + 0x18]\n 17888: u64 [a0 + 0x8] = a1\n 17891: a1 = u64 [sp + 0x20]\n 17894: u64 [a0] = a1\n 17896: sp = s0 + 0xffffffffffffff30\n 17900: ra = u64 [sp + 0xc8]\n 17904: s0 = u64 [sp + 0xc0]\n 17908: s1 = u64 [sp + 0xb8]\n 17912: sp = sp + 0xd0\n 17916: ret\n      : @601 (gas: 6)\n 17918: u64 [sp + 96] = 0\n 17921: u64 [sp + 88] = 0\n 17924: u64 [sp + 80] = 0\n 17927: t0 = 0x254\n 17931: a0 = 0x4e487b7100000000\n 17941: fallthrough\n      : @602 [@dyn 298] (gas: 4)\n 17942: a1 = sp + 0x50\n 17945: u64 [sp + 0x68] = a0\n 17948: a0 = 0\n 17950: ra = 598, jump @19\n      : @603 [@dyn 299] (gas: 7)\n 17956: u64 [sp + 72] = 0\n 17959: u64 [sp + 64] = 0\n 17962: u64 [sp + 48] = 0x41\n 17966: a0 = 0x4\n 17969: a1 = sp + 0x30\n 17972: u64 [sp + 56] = 0\n 17975: ra = 600, jump @19\n      : @604 [@dyn 300] (gas: 2)\n 17981: a1 = i32 [0x2008c]\n 17986: jump @606 if a1 >u 63\n      : @605 (gas: 2)\n 17990: u32 [0x2008c] = 0x40\n 17996: fallthrough\n      : @606 (gas: 7)\n 17997: a1 = 0x200a0\n 18002: i32 a1 = a1 + 0\n 18004: a0 = 0x1\n 18007: a2 = 0x24\n 18010: ra = 0x25a\n 18014: ecalli 7 // 'seal_return'\n 18016: fallthrough\n      : @607 [@dyn 301] (gas: 37)\n 18017: sp = sp + 0xfffffffffffffe70\n 18021: u64 [sp + 0x188] = ra\n 18025: u64 [sp + 0x180] = s0\n 18029: u64 [sp + 0x178] = s1\n 18033: s0 = sp + 0x190\n 18037: sp = sp & 0xfffffffffffffff0\n 18040: t2 = u64 [a1]\n 18042: a4 = u64 [a2 + 0x8]\n 18045: ra = u64 [a1 + 0x8]\n 18048: s1 = u64 [a2]\n 18050: a3 = t2 + 0x1f\n 18053: t0 = a3 <u t2\n 18056: a5 = ra + t0\n 18059: u64 [sp + 0x20] = s1\n 18062: t1 = a3 <u s1\n 18065: a3 = a5 ^ a4\n 18068: u64 [sp + 0x28] = a4\n 18071: a4 = a5 <u a4\n 18074: a4 = t1 if a3 == 0\n 18077: s1 = u64 [a1 + 0x10]\n 18080: a3 = a5 <u ra\n 18083: a3 = t0 if t0 == 0\n 18086: a5 = u64 [a2 + 0x18]\n 18089: t0 = u64 [a1 + 0x18]\n 18092: t1 = u64 [a2 + 0x10]\n 18095: a3 = a3 + s1\n 18098: a1 = a3 <u s1\n 18101: a1 = a1 + t0\n 18104: a2 = a1 ^ a5\n 18107: u64 [sp + 0x10] = a5\n 18110: a1 = a1 <s a5\n 18113: a5 = a3 <u t1\n 18116: a1 = a5 if a2 == 0\n 18119: a3 = a3 ^ t1\n 18122: a2 = a2 | a3\n 18125: a4 = a1 if a2 != 0\n 18128: jump @625 if a4 == 0\n      : @608 (gas: 13)\n 18132: u64 [sp + 0x8] = a0\n 18135: u64 [sp + 0x18] = t1\n 18138: a0 = t2 | s1\n 18141: u64 [sp + 0x38] = ra\n 18144: u64 [sp + 0x30] = t0\n 18147: a1 = ra | t0\n 18150: a0 = a0 | a1\n 18153: a0 = a0 >> 0x20\n 18156: u64 [sp + 0x58] = s1\n 18159: a1 = a1 | s1\n 18162: a1 = a1 << 0x20\n 18165: a0 = a0 | a1\n 18168: jump @624 if a0 != 0\n      : @609 (gas: 4)\n 18172: a0 = sp + 0x150\n 18176: u64 [sp + 0x50] = t2\n 18179: a1 = t2\n 18181: ra = 604, jump @17\n      : @610 [@dyn 302] (gas: 12)\n 18187: a3 = u64 [sp + 0x168]\n 18191: a2 = u64 [sp + 0x160]\n 18195: a4 = u64 [sp + 0x158]\n 18199: a0 = a3 >u 0\n 18201: a1 = a2 >u 0\n 18203: a1 = a0 if a3 != 0\n 18206: u64 [sp + 0x80] = a2\n 18210: u64 [sp + 0x88] = a3\n 18214: a0 = a2 | a3\n 18217: a2 = a4 >u 0\n 18219: a2 = a1 if a0 != 0\n 18222: jump @626 if a2 != 0\n      : @611 (gas: 20)\n 18226: a1 = u64 [sp + 0x150]\n 18230: a0 = a1 + 0x1f\n 18233: u64 [sp + 0x48] = a1\n 18236: a1 = a0 <u a1\n 18239: u64 [sp + 0x78] = a4\n 18242: a1 = a1 + a4\n 18245: a1 = a1 & 0x1\n 18248: a0 = a0 & 0xffffffffffffffe0\n 18251: a2 = a0 + 0x20\n 18254: a0 = a2 <u a0\n 18257: a3 = a1 + a0\n 18260: a4 = a3 <u a1\n 18263: a4 = a0 if a0 == 0\n 18266: u64 [sp + 296] = 0\n 18270: u64 [sp + 0x110] = a2\n 18274: u64 [sp + 0x118] = a3\n 18278: a0 = sp + 0x130\n 18282: a1 = sp + 0x110\n 18286: u64 [sp + 0x120] = a4\n 18290: ra = 606, jump @596\n      : @612 [@dyn 303] (gas: 15)\n 18296: a2 = u64 [sp + 0x148]\n 18300: a3 = u64 [sp + 0x140]\n 18304: a1 = u64 [sp + 0x138]\n 18308: a0 = u64 [sp + 0x130]\n 18312: u64 [sp + 0x40] = a1\n 18315: u64 [sp + 0x68] = a2\n 18318: a2 = a2 | a1\n 18321: a1 = a0 | a3\n 18324: a1 = a1 | a2\n 18327: a1 = a1 >> 0x20\n 18330: u64 [sp + 0x70] = a3\n 18333: a2 = a2 | a3\n 18336: a2 = a2 << 0x20\n 18339: a1 = a1 | a2\n 18342: jump @624 if a1 != 0\n      : @613 (gas: 11)\n 18346: s1 = u64 [sp + 0x48]\n 18349: u64 [sp + 0xf0] = s1\n 18353: a1 = u64 [sp + 0x78]\n 18356: u64 [sp + 0xf8] = a1\n 18360: a1 = u64 [sp + 0x80]\n 18364: u64 [sp + 0x100] = a1\n 18368: a1 = sp + 0xf0\n 18372: a2 = u64 [sp + 0x88]\n 18376: u64 [sp + 0x108] = a2\n 18380: u64 [sp + 0x60] = a0\n 18383: ra = 608, jump @19\n      : @614 [@dyn 304] (gas: 45)\n 18389: a0 = u64 [sp + 0x50]\n 18392: a3 = a0 + s1\n 18395: a2 = a3 <u a0\n 18398: t2 = u64 [sp + 0x38]\n 18401: a0 = u64 [sp + 0x78]\n 18404: a0 = a0 + t2\n 18407: a0 = a0 + a2\n 18410: a4 = a0 ^ t2\n 18413: a1 = a0 <u t2\n 18416: a1 = a2 if a4 == 0\n 18419: t1 = u64 [sp + 0x58]\n 18422: a2 = u64 [sp + 0x80]\n 18426: a2 = a2 + t1\n 18429: a5 = a3 + 0x20\n 18432: t0 = a5 <u a3\n 18435: a4 = a0 + t0\n 18438: a3 = u64 [sp + 0x20]\n 18441: a5 = a3 <u a5\n 18444: a3 = u64 [sp + 0x28]\n 18447: s1 = a4 ^ a3\n 18450: a3 = a3 <u a4\n 18453: a5 = a3 if s1 != 0\n 18456: a3 = a2 <u t1\n 18459: t1 = u64 [sp + 0x30]\n 18462: s1 = u64 [sp + 0x88]\n 18466: s1 = s1 + t1\n 18469: a3 = a3 + s1\n 18472: a1 = a1 + a2\n 18475: a2 = a1 <u a2\n 18478: a2 = a2 + a3\n 18481: a0 = a4 <u a0\n 18484: a0 = t0 if t0 == 0\n 18487: a0 = a0 + a1\n 18490: a1 = a0 <u a1\n 18493: a1 = a1 + a2\n 18496: a3 = u64 [sp + 0x10]\n 18499: a2 = a1 ^ a3\n 18502: a1 = a3 <u a1\n 18505: a4 = u64 [sp + 0x18]\n 18508: a3 = a4 <u a0\n 18511: a1 = a3 if a2 == 0\n 18514: a0 = a0 ^ a4\n 18517: a0 = a0 | a2\n 18520: a5 = a1 if a0 != 0\n 18523: jump @632 if a5 != 0\n      : @615 (gas: 10)\n 18527: a0 = u64 [sp + 0x70]\n 18530: a1 = u64 [sp + 0x68]\n 18533: a1 = a1 | a0\n 18536: a0 = 0xffffffe0\n 18546: a4 = u64 [sp + 0x60]\n 18549: a2 = a4 <u a0\n 18552: a3 = u64 [sp + 0x40]\n 18555: a2 = 0 if a3 != 0\n 18557: a2 = 0 if a1 != 0\n 18559: jump @624 if a2 == 0\n      : @616 (gas: 12)\n 18563: a3 = a4\n 18565: a1 = u64 [sp + 0x58]\n 18568: a1 = a1 | t1\n 18571: a5 = u64 [sp + 0x50]\n 18574: a0 = a5 <u a0\n 18577: a0 = 0 if t2 != 0\n 18579: a0 = 0 if a1 != 0\n 18581: ra = u64 [sp + 0x88]\n 18585: a2 = u64 [sp + 0x80]\n 18589: a4 = u64 [sp + 0x78]\n 18592: s1 = u64 [sp + 0x48]\n 18595: jump @624 if a0 == 0\n      : @617 (gas: 8)\n 18599: a0 = s1 | a2\n 18602: a1 = a4 | ra\n 18605: a0 = a0 | a1\n 18608: a0 = a0 >> 0x20\n 18611: a1 = a1 | a2\n 18614: a1 = a1 << 0x20\n 18617: a0 = a0 | a1\n 18620: jump @624 if a0 != 0\n      : @618 (gas: 5)\n 18624: i32 a0 = a3 + 0x20\n 18627: i32 a1 = a5 + 0x20\n 18630: u64 [sp + 0x58] = a1\n 18633: a1 = s1\n 18635: ra = 610, jump @26\n      : @619 [@dyn 305] (gas: 4)\n 18641: u64 [sp + 0x50] = a0\n 18644: a0 = u64 [sp + 0x58]\n 18647: a1 = s1\n 18649: ra = 612, jump @26\n      : @620 [@dyn 306] (gas: 4)\n 18655: a1 = a0\n 18657: a0 = u64 [sp + 0x50]\n 18660: a2 = s1\n 18662: ra = 614, jump @0\n      : @621 [@dyn 307] (gas: 27)\n 18668: a1 = u64 [sp + 0x60]\n 18671: a0 = a1 + s1\n 18674: a1 = a0 <u a1\n 18677: s1 = u64 [sp + 0x40]\n 18680: a2 = u64 [sp + 0x78]\n 18683: a2 = a2 + s1\n 18686: a2 = a2 + a1\n 18689: a3 = a2 ^ s1\n 18692: a4 = a2 <u s1\n 18695: a4 = a1 if a3 == 0\n 18698: a5 = u64 [sp + 0x70]\n 18701: a1 = u64 [sp + 0x80]\n 18705: a1 = a1 + a5\n 18708: a4 = a4 + a1\n 18711: t0 = a4 <u a1\n 18714: a1 = a1 <u a5\n 18717: a5 = u64 [sp + 0x88]\n 18721: a3 = u64 [sp + 0x68]\n 18724: a5 = a5 + a3\n 18727: a1 = a1 + a5\n 18730: a1 = a1 + t0\n 18733: a1 = a1 | a4\n 18736: a3 = 0xffffffe0\n 18746: a3 = a0 <u a3\n 18749: a3 = 0 if a2 != 0\n 18751: a3 = 0 if a1 != 0\n 18753: jump @624 if a3 == 0\n      : @622 (gas: 7)\n 18756: i32 a0 = a0 + 0x20\n 18759: u64 [sp + 232] = 0\n 18763: u64 [sp + 224] = 0\n 18767: u64 [sp + 216] = 0\n 18771: a1 = sp + 0xd0\n 18775: u64 [sp + 208] = 0\n 18779: ra = 616, jump @19\n      : @623 [@dyn 308] (gas: 14)\n 18785: a0 = u64 [sp + 0x8]\n 18788: a1 = u64 [sp + 0x68]\n 18791: u64 [a0 + 0x18] = a1\n 18794: a1 = u64 [sp + 0x70]\n 18797: u64 [a0 + 0x10] = a1\n 18800: u64 [a0 + 0x8] = s1\n 18803: a1 = u64 [sp + 0x60]\n 18806: u64 [a0] = a1\n 18808: sp = s0 + 0xfffffffffffffe70\n 18812: ra = u64 [sp + 0x188]\n 18816: s0 = u64 [sp + 0x180]\n 18820: s1 = u64 [sp + 0x178]\n 18824: sp = sp + 0x190\n 18828: ret\n      : @624 (gas: 1)\n 18830: trap\n      : @625 (gas: 2)\n 18831: a1 = 0x200a0\n 18836: jump @633\n      : @626 (gas: 6)\n 18838: u64 [sp + 192] = 0\n 18842: u64 [sp + 184] = 0\n 18846: u64 [sp + 176] = 0\n 18850: t0 = 0x26a\n 18854: a0 = 0x4e487b7100000000\n 18864: fallthrough\n      : @627 [@dyn 309] (gas: 4)\n 18865: a1 = sp + 0xb0\n 18869: u64 [sp + 0xc8] = a0\n 18873: a0 = 0\n 18875: ra = 620, jump @19\n      : @628 [@dyn 310] (gas: 7)\n 18881: u64 [sp + 168] = 0\n 18885: u64 [sp + 160] = 0\n 18889: u64 [sp + 144] = 0x41\n 18894: a0 = 0x4\n 18897: a1 = sp + 0x90\n 18901: u64 [sp + 152] = 0\n 18905: ra = 622, jump @19\n      : @629 [@dyn 311] (gas: 2)\n 18911: a1 = i32 [0x2008c]\n 18916: jump @631 if a1 >u 63\n      : @630 (gas: 2)\n 18920: u32 [0x2008c] = 0x40\n 18926: fallthrough\n      : @631 (gas: 7)\n 18927: a1 = 0x200a0\n 18932: i32 a1 = a1 + 0\n 18934: a0 = 0x1\n 18937: a2 = 0x24\n 18940: ecalli 7 // 'seal_return'\n 18942: a1 = 0x200a0\n 18947: jump @633\n      : @632 (gas: 2)\n 18949: a1 = 0x200a0\n 18954: fallthrough\n      : @633 (gas: 6)\n 18955: i32 a1 = a1 + 0\n 18957: a0 = 0x1\n 18960: a2 = 0\n 18962: ra = 0x270\n 18966: ecalli 7 // 'seal_return'\n 18968: fallthrough\n      : @634 [@dyn 312] (gas: 22)\n 18969: sp = sp + 0xfffffffffffffee0\n 18973: u64 [sp + 0x118] = ra\n 18977: u64 [sp + 0x110] = s0\n 18981: u64 [sp + 0x108] = s1\n 18985: s0 = sp + 0x120\n 18989: sp = sp & 0xfffffffffffffff0\n 18992: a4 = u64 [a1 + 0x10]\n 18995: a3 = u64 [a1 + 0x18]\n 18998: a5 = u64 [a1 + 0x8]\n 19001: t0 = u64 [a1]\n 19003: u64 [sp + 0x68] = a3\n 19006: u64 [sp + 0x78] = a5\n 19009: a1 = a5 | a3\n 19012: a3 = t0 | a4\n 19015: a3 = a3 | a1\n 19018: a3 = a3 >> 0x20\n 19021: u64 [sp + 0x70] = a4\n 19024: a1 = a1 | a4\n 19027: a1 = a1 << 0x20\n 19030: a1 = a1 | a3\n 19033: u64 [sp + 0x8] = a0\n 19036: jump @649 if a1 != 0\n      : @635 (gas: 15)\n 19040: a0 = u64 [a2 + 0x18]\n 19043: u64 [sp + 0x48] = a0\n 19046: s1 = u64 [a2 + 0x10]\n 19049: a0 = u64 [a2 + 0x8]\n 19052: u64 [sp + 0x50] = a0\n 19055: a0 = u64 [a2]\n 19057: u64 [sp + 0x58] = a0\n 19060: u64 [sp + 248] = 0\n 19064: u64 [sp + 240] = 0\n 19068: u64 [sp + 232] = 0\n 19072: a1 = sp + 0xe0\n 19076: u64 [sp + 224] = 0x20\n 19081: a0 = t0\n 19083: u64 [sp + 0x60] = t0\n 19086: ra = 626, jump @19\n      : @636 [@dyn 313] (gas: 12)\n 19092: a1 = u64 [sp + 0x58]\n 19095: a0 = a1 | s1\n 19098: a2 = u64 [sp + 0x48]\n 19101: a3 = u64 [sp + 0x50]\n 19104: a2 = a2 | a3\n 19107: a0 = a0 | a2\n 19110: a0 = a0 >> 0x20\n 19113: u64 [sp + 0x20] = s1\n 19116: a2 = a2 | s1\n 19119: a2 = a2 << 0x20\n 19122: a0 = a0 | a2\n 19125: jump @649 if a0 != 0\n      : @637 (gas: 2)\n 19129: a0 = sp + 0xc0\n 19133: ra = 628, jump @17\n      : @638 [@dyn 314] (gas: 13)\n 19139: a0 = u64 [sp + 0x70]\n 19142: a1 = u64 [sp + 0x68]\n 19145: a1 = a1 | a0\n 19148: a0 = 0x100000000\n 19158: u64 [sp + 0x10] = a0\n 19161: a0 = 0xffffffe0\n 19171: a2 = u64 [sp + 0x60]\n 19174: a0 = a2 <u a0\n 19177: a3 = u64 [sp + 0x78]\n 19180: a0 = 0 if a3 != 0\n 19182: u64 [sp + 0x18] = a1\n 19185: a0 = 0 if a1 != 0\n 19187: jump @649 if a0 == 0\n      : @639 (gas: 16)\n 19191: a3 = u64 [sp + 0xd8]\n 19195: a4 = u64 [sp + 0xd0]\n 19199: a5 = u64 [sp + 0xc8]\n 19203: a1 = u64 [sp + 0xc0]\n 19207: i32 a0 = a2 + 0x20\n 19210: u64 [sp + 0x28] = a1\n 19213: u64 [sp + 0xa0] = a1\n 19217: u64 [sp + 0x30] = a5\n 19220: u64 [sp + 0xa8] = a5\n 19224: u64 [sp + 0x38] = a4\n 19227: u64 [sp + 0xb0] = a4\n 19231: a1 = sp + 0xa0\n 19235: u64 [sp + 0x40] = a3\n 19238: u64 [sp + 0xb8] = a3\n 19242: s1 = a2\n 19244: ra = 630, jump @19\n      : @640 [@dyn 315] (gas: 8)\n 19250: a0 = u64 [sp + 0x10]\n 19253: a0 = a0 + 0xffffffffffffffc0\n 19256: a0 = s1 <u a0\n 19259: a1 = u64 [sp + 0x78]\n 19262: a0 = 0 if a1 != 0\n 19264: a1 = u64 [sp + 0x18]\n 19267: a0 = 0 if a1 != 0\n 19269: jump @649 if a0 == 0\n      : @641 (gas: 10)\n 19273: a0 = u64 [sp + 0x48]\n 19276: a1 = u64 [sp + 0x20]\n 19279: a0 = a0 | a1\n 19282: a1 = 0xffffffe0\n 19292: a3 = u64 [sp + 0x58]\n 19295: a1 = a3 <u a1\n 19298: a4 = u64 [sp + 0x50]\n 19301: a1 = 0 if a4 != 0\n 19303: a1 = 0 if a0 != 0\n 19305: jump @649 if a1 == 0\n      : @642 (gas: 13)\n 19309: a2 = s1\n 19311: a1 = u64 [sp + 0x28]\n 19314: a5 = u64 [sp + 0x38]\n 19317: a0 = a1 | a5\n 19320: a4 = u64 [sp + 0x40]\n 19323: s1 = u64 [sp + 0x30]\n 19326: a4 = a4 | s1\n 19329: a0 = a0 | a4\n 19332: a0 = a0 >> 0x20\n 19335: a4 = a4 | a5\n 19338: a4 = a4 << 0x20\n 19341: a0 = a0 | a4\n 19344: jump @649 if a0 != 0\n      : @643 (gas: 5)\n 19348: i32 a0 = a2 + 0x40\n 19351: i32 a3 = a3 + 0x20\n 19354: u64 [sp + 0x58] = a3\n 19357: s1 = a1\n 19359: ra = 632, jump @26\n      : @644 [@dyn 316] (gas: 4)\n 19365: u64 [sp + 0x50] = a0\n 19368: a0 = u64 [sp + 0x58]\n 19371: a1 = s1\n 19373: ra = 634, jump @26\n      : @645 [@dyn 317] (gas: 4)\n 19379: a1 = a0\n 19381: a0 = u64 [sp + 0x50]\n 19384: a2 = s1\n 19386: ra = 636, jump @0\n      : @646 [@dyn 318] (gas: 27)\n 19392: a0 = u64 [sp + 0x60]\n 19395: a0 = a0 + s1\n 19398: a1 = a0 <u s1\n 19401: a2 = u64 [sp + 0x78]\n 19404: a4 = u64 [sp + 0x30]\n 19407: a2 = a2 + a4\n 19410: a2 = a2 + a1\n 19413: a3 = a2 ^ a4\n 19416: a4 = a2 <u a4\n 19419: a4 = a1 if a3 == 0\n 19422: a1 = u64 [sp + 0x70]\n 19425: a3 = u64 [sp + 0x38]\n 19428: a1 = a1 + a3\n 19431: a3 = a1 <u a3\n 19434: a5 = u64 [sp + 0x68]\n 19437: s1 = u64 [sp + 0x40]\n 19440: a5 = a5 + s1\n 19443: a3 = a3 + a5\n 19446: a4 = a4 + a1\n 19449: a1 = a4 <u a1\n 19452: a1 = a1 + a3\n 19455: a1 = a1 | a4\n 19458: a3 = 0xffffffc0\n 19468: a3 = a0 <u a3\n 19471: a3 = 0 if a2 != 0\n 19473: a3 = 0 if a1 != 0\n 19475: jump @649 if a3 == 0\n      : @647 (gas: 7)\n 19479: i32 a0 = a0 + 0x40\n 19482: u64 [sp + 152] = 0\n 19486: u64 [sp + 144] = 0\n 19490: u64 [sp + 136] = 0\n 19494: a1 = sp + 0x80\n 19498: u64 [sp + 128] = 0\n 19502: ra = 638, jump @19\n      : @648 [@dyn 319] (gas: 35)\n 19508: s1 = u64 [sp + 0x28]\n 19511: s1 = s1 + 0x1f\n 19514: a0 = 0x1ffffffe0\n 19524: a0 = a0 & s1\n 19527: a1 = u64 [sp + 0x60]\n 19530: a0 = a0 + a1\n 19533: a1 = a0 <u a1\n 19536: a3 = u64 [sp + 0x78]\n 19539: a2 = a3 + a1\n 19542: a3 = a2 <u a3\n 19545: a3 = a1 if a1 == 0\n 19548: a1 = u64 [sp + 0x70]\n 19551: a3 = a3 + a1\n 19554: a1 = a3 <u a1\n 19557: a4 = u64 [sp + 0x68]\n 19560: a1 = a1 + a4\n 19563: a4 = a0 + 0x40\n 19566: a0 = a4 <u a0\n 19569: a5 = a2 + a0\n 19572: a2 = a5 <u a2\n 19575: a2 = a0 if a0 == 0\n 19578: a2 = a2 + a3\n 19581: a0 = a2 <u a3\n 19584: a0 = a0 + a1\n 19587: a1 = u64 [sp + 0x8]\n 19590: u64 [a1] = a4\n 19592: u64 [a1 + 0x8] = a5\n 19595: u64 [a1 + 0x10] = a2\n 19598: u64 [a1 + 0x18] = a0\n 19601: sp = s0 + 0xfffffffffffffee0\n 19605: ra = u64 [sp + 0x118]\n 19609: s0 = u64 [sp + 0x110]\n 19613: s1 = u64 [sp + 0x108]\n 19617: sp = sp + 0x120\n 19621: ret\n      : @649 (gas: 1)\n 19623: trap\n      : @650 [@dyn 320] (gas: 5)\n 19624: a1 = 0x4\n 19627: ra = 0x282\n 19631: ecalli 1 // 'call_data_load'\n 19633: t0 = 0x284\n 19637: jump @711\n      : @651 [@dyn 321] (gas: 1)\n 19640: t0 = 644, jump @711\n      : @652 [@dyn 322] (gas: 1)\n 19646: jump @655 if a3 == 0\n      : @653 (gas: 1)\n 19649: t0 = 646, jump @717\n      : @654 [@dyn 323] (gas: 1)\n 19655: ret\n      : @655 (gas: 8)\n 19657: a1 = 0x200a0\n 19662: i32 a1 = a1 + 0\n 19664: a0 = 0x1\n 19667: a2 = 0\n 19669: ra = 0x288\n 19673: ecalli 7 // 'seal_return'\n 19675: t0 = 0x28a\n 19679: jump @724\n      : @656 [@dyn 324] (gas: 1)\n 19682: t0 = 650, jump @724\n      : @657 [@dyn 325] (gas: 5)\n 19688: a1 = 0x24\n 19691: ra = 0x28c\n 19695: ecalli 1 // 'call_data_load'\n 19697: t0 = 0x28e\n 19701: jump @711\n      : @658 [@dyn 326] (gas: 1)\n 19704: t0 = 654, jump @711\n      : @659 [@dyn 327] (gas: 1)\n 19710: jump @662 if a3 == 0\n      : @660 (gas: 1)\n 19713: t0 = 656, jump @717\n      : @661 [@dyn 328] (gas: 1)\n 19719: ret\n      : @662 (gas: 7)\n 19721: a1 = 0x200a0\n 19726: i32 a1 = a1 + 0\n 19728: a0 = 0x1\n 19731: a2 = 0\n 19733: ra = 0x292\n 19737: ecalli 7 // 'seal_return'\n 19739: fallthrough\n      : @663 [@dyn 329] (gas: 14)\n 19740: sp = sp + 0xffffffffffffff20\n 19744: u64 [sp + 0xd8] = ra\n 19748: u64 [sp + 0xd0] = s0\n 19752: u64 [sp + 0xc8] = s1\n 19756: s0 = sp + 0xe0\n 19760: sp = sp & 0xfffffffffffffff0\n 19763: a1 = u64 [a0 + 0x10]\n 19766: a2 = u64 [a0 + 0x18]\n 19769: a3 = u64 [a0 + 0x8]\n 19772: a0 = u64 [a0]\n 19774: a2 = a2 | a3\n 19777: a0 = a0 | a1\n 19780: a0 = a0 | a2\n 19783: jump @665 if a0 == 0\n      : @664 (gas: 6)\n 19786: sp = s0 + 0xffffffffffffff20\n 19790: ra = u64 [sp + 0xd8]\n 19794: s0 = u64 [sp + 0xd0]\n 19798: s1 = u64 [sp + 0xc8]\n 19802: sp = sp + 0xe0\n 19806: ret\n      : @665 (gas: 3)\n 19808: a0 = sp + 0xa0\n 19812: a1 = 0x40\n 19815: ra = 660, jump @17\n      : @666 [@dyn 330] (gas: 15)\n 19821: a2 = u64 [sp + 0xb8]\n 19825: s1 = u64 [sp + 0xb0]\n 19829: a0 = u64 [sp + 0xa8]\n 19833: a1 = u64 [sp + 0xa0]\n 19837: u64 [sp + 0x10] = a0\n 19840: u64 [sp + 0x8] = a2\n 19843: a0 = a0 | a2\n 19846: u64 [sp + 0x18] = a1\n 19849: a1 = a1 | s1\n 19852: a1 = a1 | a0\n 19855: a1 = a1 >> 0x20\n 19858: a0 = a0 | s1\n 19861: a0 = a0 << 0x20\n 19864: a0 = a0 | a1\n 19867: jump @673 if a0 != 0\n      : @667 (gas: 8)\n 19871: u64 [sp + 144] = 0\n 19875: u64 [sp + 136] = 0\n 19879: u64 [sp + 128] = 0\n 19883: a0 = 0x8c379a000000000\n 19893: a1 = sp + 0x80\n 19897: u64 [sp + 0x98] = a0\n 19901: a0 = u64 [sp + 0x18]\n 19904: ra = 662, jump @19\n      : @668 [@dyn 331] (gas: 11)\n 19910: a2 = u64 [sp + 0x8]\n 19913: a2 = a2 | s1\n 19916: s1 = 0x100000000\n 19926: a0 = 0xfffffffc\n 19936: a1 = u64 [sp + 0x18]\n 19939: a0 = a1 <u a0\n 19942: a1 = u64 [sp + 0x10]\n 19945: a0 = 0 if a1 != 0\n 19947: u64 [sp + 0x8] = a2\n 19950: a0 = 0 if a2 != 0\n 19952: jump @673 if a0 == 0\n      : @669 (gas: 8)\n 19955: a0 = u64 [sp + 0x18]\n 19958: i32 a0 = a0 + 0x4\n 19961: u64 [sp + 120] = 0\n 19964: u64 [sp + 112] = 0\n 19967: u64 [sp + 96] = 0x20\n 19971: a1 = sp + 0x60\n 19974: u64 [sp + 104] = 0\n 19977: ra = 664, jump @19\n      : @670 [@dyn 332] (gas: 8)\n 19983: a0 = s1 + 0xffffffffffffffdc\n 19986: a1 = u64 [sp + 0x18]\n 19989: a0 = a1 <u a0\n 19992: a1 = u64 [sp + 0x10]\n 19995: a0 = 0 if a1 != 0\n 19997: a1 = u64 [sp + 0x8]\n 20000: a0 = 0 if a1 != 0\n 20002: jump @673 if a0 == 0\n      : @671 (gas: 8)\n 20005: s1 = u64 [sp + 0x18]\n 20008: i32 a0 = s1 + 0x24\n 20011: u64 [sp + 88] = 0\n 20014: u64 [sp + 80] = 0\n 20017: u64 [sp + 64] = 0x14\n 20021: a1 = sp + 0x40\n 20024: u64 [sp + 72] = 0\n 20027: ra = 666, jump @19\n      : @672 [@dyn 333] (gas: 7)\n 20033: a0 = 0xffffffbc\n 20043: a0 = s1 <u a0\n 20046: a1 = u64 [sp + 0x10]\n 20049: a0 = 0 if a1 != 0\n 20051: a1 = u64 [sp + 0x8]\n 20054: a0 = 0 if a1 != 0\n 20056: jump @674 if a0 != 0\n      : @673 (gas: 1)\n 20059: trap\n      : @674 (gas: 11)\n 20060: s1 = u64 [sp + 0x18]\n 20063: i32 a0 = s1 + 0x44\n 20066: a1 = u64 [0x20078]\n 20071: a2 = u64 [0x20080]\n 20076: u64 [sp + 0x38] = a1\n 20079: u64 [sp + 0x30] = a2\n 20082: a1 = 0x616e636500000000\n 20092: u64 [sp + 0x28] = a1\n 20095: a1 = sp + 0x20\n 20098: u64 [sp + 32] = 0\n 20101: ra = 668, jump @19\n      : @675 [@dyn 334] (gas: 3)\n 20107: a1 = 0x64\n 20110: a0 = s1\n 20112: ra = 670, jump @26\n      : @676 [@dyn 335] (gas: 6)\n 20118: i32 a1 = a0 + 0\n 20120: a0 = 0x1\n 20123: a2 = 0x64\n 20126: ra = 0x2a0\n 20130: ecalli 7 // 'seal_return'\n 20132: fallthrough\n      : @677 [@dyn 336] (gas: 30)\n 20133: sp = sp + 0xffffffffffffff80\n 20136: u64 [sp + 0x78] = ra\n 20139: u64 [sp + 0x70] = s0\n 20142: u64 [sp + 0x68] = s1\n 20145: s0 = sp + 0x80\n 20149: sp = sp & 0xfffffffffffffff0\n 20152: a4 = u64 [a2]\n 20154: a3 = u64 [a1]\n 20156: s1 = u64 [a2 + 0x8]\n 20159: t1 = u64 [a1 + 0x8]\n 20162: t2 = u64 [a2 + 0x10]\n 20165: a5 = u64 [a1 + 0x10]\n 20168: a2 = u64 [a2 + 0x18]\n 20171: a1 = u64 [a1 + 0x18]\n 20174: t0 = t1 ^ s1\n 20177: u64 [sp + 0x8] = s1\n 20180: s1 = t1 <u s1\n 20183: u64 [sp + 0x18] = a4\n 20186: u64 [sp + 0x10] = a3\n 20189: a3 = a3 <u a4\n 20192: u64 [sp] = a3\n 20194: s1 = a3 if t0 == 0\n 20197: a3 = a1 ^ a2\n 20200: ra = a1 <u a2\n 20203: t0 = a5 <u t2\n 20206: ra = t0 if a3 == 0\n 20209: a4 = a5 ^ t2\n 20212: a3 = a3 | a4\n 20215: ra = s1 if a3 == 0\n 20218: jump @679 if ra != 0\n      : @678 (gas: 23)\n 20221: a3 = a5 - t2\n 20224: a1 = a1 - a2\n 20227: a1 = a1 - t0\n 20230: a2 = a3 <u s1\n 20233: a1 = a1 - a2\n 20236: a3 = a3 - s1\n 20239: a2 = u64 [sp + 0x8]\n 20242: a2 = t1 - a2\n 20245: a4 = u64 [sp]\n 20247: a2 = a2 - a4\n 20250: a4 = u64 [sp + 0x18]\n 20253: a5 = u64 [sp + 0x10]\n 20256: a4 = a5 - a4\n 20259: u64 [a0] = a4\n 20261: u64 [a0 + 0x8] = a2\n 20264: u64 [a0 + 0x10] = a3\n 20267: u64 [a0 + 0x18] = a1\n 20270: sp = s0 + 0xffffffffffffff80\n 20273: ra = u64 [sp + 0x78]\n 20276: s0 = u64 [sp + 0x70]\n 20279: s1 = u64 [sp + 0x68]\n 20282: sp = sp + 0x80\n 20286: ret\n      : @679 (gas: 6)\n 20288: u64 [sp + 80] = 0\n 20291: u64 [sp + 72] = 0\n 20294: u64 [sp + 64] = 0\n 20297: t0 = 0x2a2\n 20301: a0 = 0x4e487b7100000000\n 20311: fallthrough\n      : @680 [@dyn 337] (gas: 4)\n 20312: a1 = sp + 0x40\n 20315: u64 [sp + 0x58] = a0\n 20318: a0 = 0\n 20320: ra = 676, jump @19\n      : @681 [@dyn 338] (gas: 7)\n 20326: u64 [sp + 56] = 0\n 20329: u64 [sp + 48] = 0\n 20332: u64 [sp + 32] = 0x11\n 20336: a0 = 0x4\n 20339: a1 = sp + 0x20\n 20342: u64 [sp + 40] = 0\n 20345: ra = 678, jump @19\n      : @682 [@dyn 339] (gas: 2)\n 20351: a1 = i32 [0x2008c]\n 20356: jump @684 if a1 >u 63\n      : @683 (gas: 2)\n 20360: u32 [0x2008c] = 0x40\n 20366: fallthrough\n      : @684 (gas: 7)\n 20367: a1 = 0x200a0\n 20372: i32 a1 = a1 + 0\n 20374: a0 = 0x1\n 20377: a2 = 0x24\n 20380: ra = 0x2a8\n 20384: ecalli 7 // 'seal_return'\n 20386: fallthrough\n      : @685 [@dyn 340] (gas: 45)\n 20387: sp = sp + 0xffffffffffffff90\n 20390: u64 [sp + 0x68] = ra\n 20393: u64 [sp + 0x60] = s0\n 20396: u64 [sp + 0x58] = s1\n 20399: s0 = sp + 0x70\n 20402: sp = sp & 0xfffffffffffffff0\n 20405: a3 = u64 [a1 + 0x18]\n 20408: u64 [sp + 0x8] = a3\n 20411: a4 = u64 [a2 + 0x18]\n 20414: t2 = u64 [a1]\n 20416: u64 [sp] = t2\n 20418: a3 = u64 [a1 + 0x8]\n 20421: s1 = u64 [a2 + 0x8]\n 20424: a5 = u64 [a2]\n 20426: t1 = u64 [a1 + 0x10]\n 20429: t0 = u64 [a2 + 0x10]\n 20432: a2 = s1 + a3\n 20435: t2 = t2 + a5\n 20438: a5 = t2 <u a5\n 20441: a2 = a2 + a5\n 20444: ra = a2 ^ s1\n 20447: s1 = a2 <u s1\n 20450: s1 = a5 if ra == 0\n 20453: a1 = t0 + t1\n 20456: a5 = u64 [sp + 0x8]\n 20459: a5 = a5 + a4\n 20462: a4 = a1 <u t0\n 20465: a4 = a4 + a5\n 20468: a5 = a1 + s1\n 20471: a1 = a5 <u a1\n 20474: ra = a4 + a1\n 20477: a4 = a2 ^ a3\n 20480: a3 = a2 <u a3\n 20483: a1 = u64 [sp]\n 20485: s1 = t2 <u a1\n 20488: s1 = a3 if a4 != 0\n 20491: t0 = a5 <u t1\n 20494: a1 = u64 [sp + 0x8]\n 20497: a4 = ra ^ a1\n 20500: a3 = ra <u a1\n 20503: a3 = t0 if a4 == 0\n 20506: a1 = a5 ^ t1\n 20509: a1 = a1 | a4\n 20512: s1 = a3 if a1 != 0\n 20515: jump @687 if s1 != 0\n      : @686 (gas: 10)\n 20518: u64 [a0] = t2\n 20520: u64 [a0 + 0x8] = a2\n 20523: u64 [a0 + 0x10] = a5\n 20526: u64 [a0 + 0x18] = ra\n 20529: sp = s0 + 0xffffffffffffff90\n 20532: ra = u64 [sp + 0x68]\n 20535: s0 = u64 [sp + 0x60]\n 20538: s1 = u64 [sp + 0x58]\n 20541: sp = sp + 0x70\n 20544: ret\n      : @687 (gas: 6)\n 20546: u64 [sp + 64] = 0\n 20549: u64 [sp + 56] = 0\n 20552: u64 [sp + 48] = 0\n 20555: t0 = 0x2aa\n 20559: a0 = 0x4e487b7100000000\n 20569: fallthrough\n      : @688 [@dyn 341] (gas: 4)\n 20570: a1 = sp + 0x30\n 20573: u64 [sp + 0x48] = a0\n 20576: a0 = 0\n 20578: ra = 684, jump @19\n      : @689 [@dyn 342] (gas: 7)\n 20584: u64 [sp + 40] = 0\n 20587: u64 [sp + 32] = 0\n 20590: u64 [sp + 16] = 0x11\n 20594: a0 = 0x4\n 20597: a1 = sp + 0x10\n 20600: u64 [sp + 24] = 0\n 20603: ra = 686, jump @19\n      : @690 [@dyn 343] (gas: 2)\n 20609: a1 = i32 [0x2008c]\n 20614: jump @692 if a1 >u 63\n      : @691 (gas: 2)\n 20618: u32 [0x2008c] = 0x40\n 20624: fallthrough\n      : @692 (gas: 8)\n 20625: a1 = 0x200a0\n 20630: i32 a1 = a1 + 0\n 20632: a0 = 0x1\n 20635: a2 = 0x24\n 20638: ecalli 7 // 'seal_return'\n 20640: a0 = 0\n 20642: ra = 0x2b0\n 20646: jump @32\n      : @693 [export #0: 'call'] (gas: 2)\n 20649: a0 = 0\n 20651: ra = 688, jump @32\n      : @694 [@dyn 344] [export #1: 'deploy'] (gas: 2)\n 20657: a0 = 0x1\n 20660: ra = 690, jump @32\n      : @695 [@dyn 345] (gas: 16)\n 20666: a0 = u64 [a2 + 0x8]\n 20669: a1 = i32 [a2 + 0x10]\n 20672: a2 = u64 [a2]\n 20674: a0 = reverse a0\n 20676: a3 = a0 << 0x20\n 20679: a1 = reverse a1\n 20681: a1 = a1 >> 0x20\n 20684: a3 = a3 | a1\n 20687: a0 = a0 >> 0x20\n 20690: a1 = reverse a2\n 20692: a2 = a1 << 0x20\n 20695: a0 = a0 | a2\n 20698: a1 = a1 >> 0x20\n 20701: a2 = s1 + 0x7ff\n 20705: a2 = a2 + 0x31\n 20708: jump [t0]\n      : @696 (gas: 27)\n 20710: a5 = u64 [s1 + 0x98]\n 20714: a5 = a5 + 0x1\n 20717: a0 = a5 <u 0x1\n 20720: a3 = u64 [s1 + 0x90]\n 20724: a3 = a3 + a0\n 20727: a0 = a5 | a3\n 20730: a0 = a0 <u 0x1\n 20733: a1 = u64 [s1 + 0x80]\n 20737: t1 = a1 + a0\n 20740: a1 = t1 <u a1\n 20743: a0 = u64 [s1 + 0x88]\n 20747: a0 = a0 + a1\n 20750: a1 = u64 [s1 + 0xb8]\n 20754: ra = a1 + 0x20\n 20757: a2 = ra <u a1\n 20760: a1 = u64 [s1 + 0xa0]\n 20764: t2 = a1 + a2\n 20767: a4 = t2 <u a1\n 20770: a4 = a2 if a2 == 0\n 20773: a1 = u64 [s1 + 0xa8]\n 20777: a4 = a4 + a1\n 20780: a2 = a4 <u a1\n 20783: a1 = u64 [s1 + 0xb0]\n 20787: a1 = a1 + a2\n 20790: u64 [s1 + 0xb0] = a1\n 20794: u64 [s1 + 0x90] = a3\n 20798: jump [t0]\n      : @697 (gas: 23)\n 20800: u64 [s1 + 184] = 0\n 20804: t1 = 0\n 20806: ra = 0\n 20808: u64 [s1 + 176] = 0\n 20812: a5 = u64 [s1 + 0xa8]\n 20816: a0 = u64 [a5 + 0x18]\n 20819: a1 = u64 [s1 + 0x28]\n 20822: a2 = a1 + 0x20\n 20825: u64 [s1 + 0x50] = a2\n 20828: a1 = a2 <u a1\n 20831: a2 = u64 [s1 + 0x18]\n 20834: a3 = a2 + a1\n 20837: u64 [s1 + 0x48] = a3\n 20840: a4 = a3 <u a2\n 20843: a4 = a1 if a1 == 0\n 20846: a1 = u64 [a5 + 0x10]\n 20849: a2 = u64 [a5 + 0x8]\n 20852: a3 = u64 [a5]\n 20854: a0 = reverse a0\n 20856: a1 = reverse a1\n 20858: t2 = reverse a2\n 20860: a2 = reverse a3\n 20862: jump [t0]\n      : @698 (gas: 14)\n 20864: a0 = u64 [a2 + 0x8]\n 20867: a1 = i32 [a2 + 0x10]\n 20870: a2 = u64 [a2]\n 20872: a0 = reverse a0\n 20874: a3 = a0 << 0x20\n 20877: a1 = reverse a1\n 20879: a1 = a1 >> 0x20\n 20882: a3 = a3 | a1\n 20885: a0 = a0 >> 0x20\n 20888: a1 = reverse a2\n 20890: a2 = a1 << 0x20\n 20893: a0 = a0 | a2\n 20896: a1 = a1 >> 0x20\n 20899: jump [t0]\n      : @699 (gas: 21)\n 20901: a0 = u64 [s1 + 0xa8]\n 20905: a3 = a3 + a0\n 20908: a4 = a3 <u a0\n 20911: a5 = u64 [s1 + 0x30]\n 20914: a5 = a5 + a3\n 20917: a2 = a2 + a5\n 20920: a3 = a5 <u a3\n 20923: a5 = a2 <u a5\n 20926: a0 = u64 [s1 + 0xb0]\n 20930: a1 = u64 [s1 + 0x20]\n 20933: a0 = a0 + a1\n 20936: a0 = a0 + a4\n 20939: a0 = a0 + a3\n 20942: a3 = a0 + a5\n 20945: a0 = a3 >u 0\n 20947: a4 = a2 >u 0\n 20949: a4 = a0 if a3 != 0\n 20952: a0 = a2 | a3\n 20955: a5 = t2 >u 0\n 20957: a5 = a4 if a0 != 0\n 20960: jump [t0]\n      : @700 (gas: 15)\n 20962: a4 = u64 [s1 + 0x138]\n 20966: a2 = a4 <u 0x80\n 20970: a3 = u64 [s1 + 0xf0]\n 20974: a1 = a3 if a2 != 0\n 20977: a5 = u64 [s1 + 0xf8]\n 20981: a3 = u64 [s1 + 0x108]\n 20985: a3 = a3 | a5\n 20988: a3 = a0 if a2 == 0\n 20991: a0 = 0xffffffffffffffff\n 20994: a1 = a0 if a4 == 0\n 20997: a3 = a0 if a4 == 0\n 21000: a4 = u64 [s1 + 0x100]\n 21004: a4 = 0 if a2 == 0\n 21006: a5 = 0 if a2 == 0\n 21008: jump [t0]\n      : @701 (gas: 17)\n 21010: a0 = u64 [a3 + 0x18]\n 21013: a1 = u64 [a3 + 0x10]\n 21016: a2 = u64 [a3 + 0x8]\n 21019: a3 = u64 [a3]\n 21021: a0 = reverse a0\n 21023: u64 [s1 + 0x60] = a0\n 21026: a0 = reverse a1\n 21028: u64 [s1 + 0x58] = a0\n 21031: a0 = reverse a2\n 21033: u64 [s1 + 0x50] = a0\n 21036: a0 = reverse a3\n 21038: u64 [s1 + 0x48] = a0\n 21041: a0 = sp + 0xffffffffffffffe0\n 21044: a0 = a0 & 0xffffffffffffffe0\n 21047: u64 [s1 + 0x68] = a0\n 21050: sp = a0\n 21052: jump [t0]\n      : @702 (gas: 15)\n 21054: a0 = u64 [a3 + 0x18]\n 21057: a1 = u64 [a3 + 0x10]\n 21060: a2 = u64 [a3 + 0x8]\n 21063: a3 = u64 [a3]\n 21065: a0 = reverse a0\n 21067: a4 = reverse a1\n 21069: a2 = reverse a2\n 21071: a3 = reverse a3\n 21073: a1 = u64 [s1 + 0x80]\n 21077: u64 [a1 + 0x18] = a3\n 21080: u64 [a1 + 0x10] = a2\n 21083: u64 [a1 + 0x8] = a4\n 21086: u64 [a1] = a0\n 21088: a0 = s1 + 0x7ff\n 21092: jump [t0]\n      : @703 (gas: 15)\n 21094: a0 = u64 [a3 + 0x18]\n 21097: a1 = u64 [a3 + 0x10]\n 21100: a2 = u64 [a3 + 0x8]\n 21103: a3 = u64 [a3]\n 21105: a0 = reverse a0\n 21107: a4 = reverse a1\n 21109: a2 = reverse a2\n 21111: a3 = reverse a3\n 21113: a1 = u64 [s1 + 0x68]\n 21116: u64 [a1 + 0x18] = a3\n 21119: u64 [a1 + 0x10] = a2\n 21122: u64 [a1 + 0x8] = a4\n 21125: u64 [a1] = a0\n 21127: a0 = s1 + 0x7ff\n 21131: jump [t0]\n      : @704 (gas: 10)\n 21133: a4 = 0 if a2 == 0\n 21135: a1 = u64 [s1 + 0x118]\n 21139: a1 = a1 & ~a3\n 21142: a2 = u64 [s1 + 0x120]\n 21146: a0 = a2 & ~a0\n 21149: a2 = u64 [s1 + 0x128]\n 21153: a2 = a2 & ~a4\n 21156: a3 = u64 [s1 + 0x130]\n 21160: a3 = a3 & ~a5\n 21163: jump [t0]\n      : @705 (gas: 13)\n 21165: a4 = a0 << 0x3f\n 21168: a5 = a1 >> 0x1\n 21171: t1 = a5 | a4\n 21174: a5 = a3 << 0x3f\n 21177: a0 = a0 >> 0x1\n 21180: a0 = a0 | a5\n 21183: a1 = a1 << 0x3f\n 21186: a5 = a2 >> 0x1\n 21189: a1 = a1 | a5\n 21192: a3 = a3 >> 0x1\n 21195: a2 = a2 & 0x1\n 21198: a5 = -a2\n 21200: jump [t0]\n      : @706 (gas: 11)\n 21202: a0 = u64 [a3 + 0x18]\n 21205: a1 = u64 [a3 + 0x10]\n 21208: a2 = u64 [a3 + 0x8]\n 21211: a3 = u64 [a3]\n 21213: a0 = reverse a0\n 21215: a1 = reverse a1\n 21217: a2 = reverse a2\n 21219: a3 = reverse a3\n 21221: a4 = s1 + 0x1030\n 21225: a5 = a4 + 0x300\n 21229: jump [t0]\n      : @707 (gas: 14)\n 21231: a0 = u64 [a3 + 0x18]\n 21234: a1 = u64 [a3 + 0x10]\n 21237: a2 = u64 [a3 + 0x8]\n 21240: a3 = u64 [a3]\n 21242: a0 = reverse a0\n 21244: a4 = reverse a1\n 21246: a2 = reverse a2\n 21248: a3 = reverse a3\n 21250: a1 = u64 [s1 + 0x68]\n 21253: u64 [a1 + 0x18] = a3\n 21256: u64 [a1 + 0x10] = a2\n 21259: u64 [a1 + 0x8] = a4\n 21262: u64 [a1] = a0\n 21264: jump [t0]\n      : @708 (gas: 13)\n 21266: a5 = a5 + a2\n 21269: a3 = a5 <u a2\n 21272: a2 = a2 <u t2\n 21275: a0 = t1 + a2\n 21278: a0 = a0 + a3\n 21281: a2 = a1 | a5\n 21284: a0 = a0 | a4\n 21287: a2 = a2 | a0\n 21290: a2 = a2 >> 0x20\n 21293: a0 = a0 | a5\n 21296: a0 = a0 << 0x20\n 21299: a0 = a0 | a2\n 21302: jump [t0]\n      : @709 (gas: 8)\n 21304: a0 = u64 [a2 + 0x8]\n 21307: a1 = i32 [a2 + 0x10]\n 21310: a2 = u64 [a2]\n 21312: a3 = reverse a0\n 21314: a0 = a3 << 0x20\n 21317: a1 = reverse a1\n 21319: a1 = a1 >> 0x20\n 21322: jump [t0]\n      : @710 (gas: 8)\n 21324: a0 = a0 | a2\n 21327: a2 = a3 | a1\n 21330: a2 = a2 | a0\n 21333: a2 = a2 >> 0x20\n 21336: a0 = a0 | a1\n 21339: a0 = a0 << 0x20\n 21342: a0 = a0 | a2\n 21345: jump [t0]\n      : @711 (gas: 10)\n 21347: a0 = u64 [sp + 0x10]\n 21350: a1 = u64 [sp + 0x18]\n 21353: a2 = 0x100000000\n 21363: a2 = a2 ^ a0\n 21366: a2 = a2 | a1\n 21369: a3 = a0 >> 0x20\n 21372: a3 = a3 <u 0x1\n 21375: a3 = 0 if a1 != 0\n 21377: a3 = 0 if a2 == 0\n 21379: jump [t0]\n      : @712 (gas: 8)\n 21381: a2 = a4 >u 0\n 21383: a1 = a1 ^ 0x1\n 21386: a1 = a2 if a4 != 0\n 21389: a2 = t2 >u 0\n 21391: a3 = a5 >u 0\n 21393: a3 = a2 if a5 == 0\n 21396: a3 = a1 if a0 == 0\n 21399: jump [t0]\n      : @713 (gas: 5)\n 21401: sp = a0\n 21403: i32 a2 = a0 + 0\n 21405: a1 = 0x40\n 21408: a0 = u64 [s1 + 0xb0]\n 21412: jump [t0]\n      : @714 (gas: 10)\n 21414: a0 = u64 [s1 + 0x30]\n 21417: a1 = u64 [s1 + 0x20]\n 21420: a0 = a0 | a1\n 21423: a1 = 0xffffffe0\n 21433: a3 = u64 [s1 + 0x28]\n 21436: a1 = a3 <u a1\n 21439: a2 = u64 [s1 + 0x18]\n 21442: a1 = 0 if a2 != 0\n 21444: a1 = 0 if a0 != 0\n 21446: jump [t0]\n      : @715 (gas: 10)\n 21448: u64 [s1 + 0xf8] = a0\n 21452: u64 [s1 + 0x100] = a1\n 21456: a0 = u64 [s1 + 0xf0]\n 21460: a0 = a0 | a1\n 21463: u64 [s1 + 0xf0] = a0\n 21467: a0 = u64 [s1 + 0x138]\n 21471: a2 = a0 + 0xffffffffffffff80\n 21474: a0 = 0xffffffffffffffff\n 21477: a1 = 0xffffffffffffffff\n 21480: jump [t0]\n      : @716 (gas: 11)\n 21482: a4 = a4 + a1\n 21485: a1 = a4 <u a1\n 21488: a1 = a1 + a5\n 21491: a1 = a1 | a2\n 21494: a2 = a0 | a4\n 21497: a2 = a2 | a1\n 21500: a1 = a1 | a4\n 21503: a2 = a2 >> 0x20\n 21506: a1 = a1 << 0x20\n 21509: a1 = a1 | a2\n 21512: jump [t0]\n      : @717 (gas: 12)\n 21514: a2 = u64 [sp]\n 21516: a3 = u64 [sp + 0x8]\n 21519: u64 [s1] = a2\n 21521: u64 [s1 + 0x8] = a3\n 21524: u64 [s1 + 0x10] = a0\n 21527: u64 [s1 + 0x18] = a1\n 21530: sp = s0 + 0xffffffffffffffc0\n 21533: ra = u64 [sp + 0x38]\n 21536: s0 = u64 [sp + 0x30]\n 21539: s1 = u64 [sp + 0x28]\n 21542: sp = sp + 0x40\n 21545: jump [t0]\n      : @718 (gas: 8)\n 21547: a3 = a3 | a2\n 21550: a2 = a0 | a1\n 21553: a2 = a2 | a3\n 21556: a2 = a2 >> 0x20\n 21559: a1 = a1 | a3\n 21562: a1 = a1 << 0x20\n 21565: a1 = a1 | a2\n 21568: jump [t0]\n      : @719 (gas: 8)\n 21570: a4 = a4 | a2\n 21573: a2 = a0 | a1\n 21576: a2 = a2 | a4\n 21579: a2 = a2 >> 0x20\n 21582: a1 = a1 | a4\n 21585: a1 = a1 << 0x20\n 21588: a1 = a1 | a2\n 21591: jump [t0]\n      : @720 (gas: 12)\n 21593: a4 = u64 [s1 + 0xa8]\n 21597: a2 = u64 [s1 + 0xa0]\n 21601: a0 = u64 [s1 + 0xb8]\n 21605: a0 = a0 | a4\n 21608: a3 = u64 [s1 + 0xb0]\n 21612: a1 = a2 | a3\n 21615: a1 = a1 | a0\n 21618: a1 = a1 >> 0x20\n 21621: a0 = a0 | a3\n 21624: a0 = a0 << 0x20\n 21627: a0 = a0 | a1\n 21630: jump [t0]\n      : @721 (gas: 7)\n 21632: a0 = a0 << 0x3b\n 21635: a1 = a0 >> 0x38\n 21638: u64 [s1 + 0x138] = a1\n 21642: a2 = 0x80 - a1\n 21646: a0 = 0xffffffffffffffff\n 21649: a1 = 0xffffffffffffffff\n 21652: jump [t0]\n      : @722 (gas: 7)\n 21654: a3 = a3 | a5\n 21657: a3 = a1 if a2 == 0\n 21660: a1 = 0xffffffffffffffff\n 21663: a0 = a1 if a4 == 0\n 21666: a3 = a1 if a4 == 0\n 21669: a5 = 0 if a2 == 0\n 21671: jump [t0]\n      : @723 (gas: 7)\n 21673: a0 = u64 [s1 + 0x28]\n 21676: a0 = t1 <u a0\n 21679: a4 = t2 ^ ra\n 21682: a5 = t2 <u ra\n 21685: a5 = a0 if a4 == 0\n 21688: a0 = u64 [s1 + 0x30]\n 21691: jump [t0]\n      : @724 (gas: 9)\n 21693: sp = sp + 0xffffffffffffffc0\n 21696: u64 [sp + 0x38] = ra\n 21699: u64 [sp + 0x30] = s0\n 21702: u64 [sp + 0x28] = s1\n 21705: s0 = sp + 0x40\n 21708: sp = sp & 0xffffffffffffffe0\n 21711: s1 = a0\n 21713: i32 a0 = sp + 0\n 21715: jump [t0]\n      : @725 (gas: 4)\n 21717: a0 = 0x1030\n 21721: a3 = s1 + a0\n 21724: a4 = a3 + 0x300\n 21728: jump [t0]\n      : @726 (gas: 4)\n 21730: a0 = 0x1030\n 21734: a3 = s1 + a0\n 21737: a4 = a3 + 0x100\n 21741: jump [t0]\n      : @727 (gas: 8)\n 21743: a0 = a0 + a4\n 21746: a3 = a3 + a1\n 21749: a5 = a3 <u a1\n 21752: a0 = a0 + a5\n 21755: ra = u64 [s1 + 0x100]\n 21759: ra = ra + a3\n 21762: a3 = ra <u a3\n 21765: jump [t0]\n      : @728 (gas: 6)\n 21767: a1 = a2 & ~a1\n 21770: a2 = u64 [s1 + 0x128]\n 21774: a2 = a2 & ~a5\n 21777: a3 = u64 [s1 + 0x130]\n 21781: a3 = a3 & ~a4\n 21784: jump [t0]\n      : @729 (gas: 2)\n 21786: a3 = a2 & 0x40\n 21789: jump @733 if a3 != 0\n      : @730 (gas: 1)\n 21792: jump @732 if a2 == 0\n      : @731 (gas: 6)\n 21795: i32 a3 = 0x40 - a2\n 21798: a3 = a1 << a3\n 21801: a1 = a1 >> a2\n 21804: a0 = a0 >> a2\n 21807: a0 = a0 | a3\n 21810: ret\n      : @732 (gas: 1)\n 21812: ret\n      : @733 (gas: 4)\n 21814: a0 = a2 + 0xffffffffffffffc0\n 21817: a0 = a1 >> a0\n 21820: a1 = 0\n 21822: ret\n      : @734 (gas: 2)\n 21824: a3 = a2 & 0x40\n 21827: jump @738 if a3 != 0\n      : @735 (gas: 1)\n 21830: jump @737 if a2 == 0\n      : @736 (gas: 6)\n 21833: i32 a3 = 0x40 - a2\n 21836: a3 = a0 >> a3\n 21839: a0 = a0 << a2\n 21842: a1 = a1 << a2\n 21845: a1 = a1 | a3\n 21848: ret\n      : @737 (gas: 1)\n 21850: ret\n      : @738 (gas: 4)\n 21852: a1 = a2 + 0xffffffffffffffc0\n 21855: a1 = a0 << a1\n 21858: a0 = 0\n 21860: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "decimals()": "313ce567",
              "name()": "06fdde03",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": "/// @use-src 0:\"contracts/MockERC20.sol\"\nobject \"MockERC20_208\" {\n    code {\n        {\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"MockERC20_208\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            let _1 := add(memoryDataOffset, argSize)\n            if slt(sub(_1, memoryDataOffset), 96)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            let offset := mload(memoryDataOffset)\n            if gt(offset, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            let value0 := abi_decode_string_fromMemory(add(memoryDataOffset, offset), _1)\n            let offset_1 := mload(add(memoryDataOffset, 32))\n            if gt(offset_1, sub(shl(64, 1), 1))\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            let value1 := abi_decode_string_fromMemory(add(memoryDataOffset, offset_1), _1)\n            let value := mload(add(memoryDataOffset, 64))\n            sstore(/** @src 0:157:159  \"18\" */ 0x02, /** @src 0:58:1680  \"contract MockERC20 {...\" */ or(and(sload(/** @src 0:157:159  \"18\" */ 0x02), /** @src 0:58:1680  \"contract MockERC20 {...\" */ not(255)), /** @src 0:157:159  \"18\" */ 0x12))\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            let newLen := mload(value0)\n            if gt(newLen, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0x24)\n            }\n            let _2 := sload(/** @src -1:-1:-1 */ 0)\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            length := shr(1, _2)\n            let outOfPlaceEncoding := and(_2, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0x24)\n            }\n            if gt(length, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 0:58:1680  \"contract MockERC20 {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 32)\n                let deleteStart := add(data, shr(5, add(newLen, 31)))\n                if lt(newLen, 32) { deleteStart := data }\n                let _3 := add(data, shr(5, add(length, 31)))\n                let start := deleteStart\n                for { } lt(start, _3) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            srcOffset := 32\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, 0)\n                /// @src 0:58:1680  \"contract MockERC20 {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ srcOffset)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 0:58:1680  \"contract MockERC20 {...\"\n                for { } lt(i, loopEnd) { i := add(i, 32) }\n                {\n                    sstore(dstPtr, mload(add(value0, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, 32)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(value0, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                }\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ add(shl(1, newLen), 1))\n            }\n            default {\n                let value_1 := /** @src -1:-1:-1 */ 0\n                /// @src 0:58:1680  \"contract MockERC20 {...\"\n                if newLen\n                {\n                    value_1 := mload(add(value0, srcOffset))\n                }\n                sstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ or(and(value_1, not(shr(shl(3, newLen), not(0)))), shl(1, newLen)))\n            }\n            let newLen_1 := mload(value1)\n            if gt(newLen_1, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0x24)\n            }\n            let _4 := sload(1)\n            let length_1 := /** @src -1:-1:-1 */ 0\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            length_1 := shr(1, _4)\n            let outOfPlaceEncoding_1 := and(_4, 1)\n            if iszero(outOfPlaceEncoding_1)\n            {\n                length_1 := and(length_1, 0x7f)\n            }\n            if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0x24)\n            }\n            if gt(length_1, 31)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 1)\n                let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 32)\n                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, 31)))\n                if lt(newLen_1, 32) { deleteStart_1 := data_1 }\n                let _5 := add(data_1, shr(5, add(length_1, 31)))\n                let start_1 := deleteStart_1\n                for { } lt(start_1, _5) { start_1 := add(start_1, 1) }\n                {\n                    sstore(start_1, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            let srcOffset_1 := /** @src -1:-1:-1 */ 0\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            srcOffset_1 := 32\n            switch gt(newLen_1, 31)\n            case 1 {\n                let loopEnd_1 := and(newLen_1, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 1)\n                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ srcOffset_1)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 0:58:1680  \"contract MockERC20 {...\"\n                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, 32) }\n                {\n                    sstore(dstPtr_1, mload(add(value1, srcOffset_1)))\n                    dstPtr_1 := add(dstPtr_1, 1)\n                    srcOffset_1 := add(srcOffset_1, 32)\n                }\n                if lt(loopEnd_1, newLen_1)\n                {\n                    let lastValue_1 := mload(add(value1, srcOffset_1))\n                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                }\n                sstore(1, add(shl(1, newLen_1), 1))\n            }\n            default {\n                let value_2 := /** @src -1:-1:-1 */ 0\n                /// @src 0:58:1680  \"contract MockERC20 {...\"\n                if newLen_1\n                {\n                    value_2 := mload(add(value1, srcOffset_1))\n                }\n                sstore(1, or(and(value_2, not(shr(shl(3, newLen_1), not(0)))), shl(1, newLen_1)))\n            }\n            sstore(/** @src 0:617:645  \"totalSupply = _initialSupply\" */ 0x03, /** @src 0:58:1680  \"contract MockERC20 {...\" */ value)\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:665:675  \"msg.sender\" */ caller())\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            mstore(32, /** @src 0:655:664  \"balanceOf\" */ 0x04)\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            sstore(keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 64), value)\n            /// @src 0:708:756  \"Transfer(address(0), msg.sender, _initialSupply)\"\n            let _6 := /** @src 0:58:1680  \"contract MockERC20 {...\" */ mload(64)\n            mstore(_6, value)\n            /// @src 0:708:756  \"Transfer(address(0), msg.sender, _initialSupply)\"\n            log3(_6, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 32, /** @src 0:708:756  \"Transfer(address(0), msg.sender, _initialSupply)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src -1:-1:-1 */ 0, /** @src 0:665:675  \"msg.sender\" */ caller())\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            let _7 := mload(64)\n            let _8 := datasize(\"MockERC20_208_deployed\")\n            codecopy(_7, dataoffset(\"MockERC20_208_deployed\"), _8)\n            return(_7, _8)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := mload(64)\n            let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n        }\n        function abi_decode_string_fromMemory(offset, end) -> array\n        {\n            if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n            let length := mload(offset)\n            if gt(length, sub(shl(64, 1), 1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0x24)\n            }\n            let array_1 := allocate_memory(add(and(add(length, 0x1f), not(31)), 0x20))\n            mstore(array_1, length)\n            if gt(add(add(offset, length), 0x20), end)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            mcopy(add(array_1, 0x20), add(offset, 0x20), length)\n            mstore(add(add(array_1, length), 0x20), /** @src -1:-1:-1 */ 0)\n            /// @src 0:58:1680  \"contract MockERC20 {...\"\n            array := array_1\n        }\n    }\n    /// @use-src 0:\"contracts/MockERC20.sol\"\n    object \"MockERC20_208_deployed\" {\n        code {\n            {\n                /// @src 0:58:1680  \"contract MockERC20 {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x06fdde03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 0:83:101  \"string public name\"\n                        let value := /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0\n                        let slot := 0\n                        slot := 0\n                        let memPtr := mload(64)\n                        let ret := 0\n                        let slotValue := sload(0)\n                        let length := 0\n                        length := shr(1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(memPtr, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(memPtr, 32), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, 0)\n                            let dataPos := keccak256(0, 32)\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, 32) }\n                            {\n                                mstore(add(add(memPtr, i), 32), sload(dataPos))\n                                dataPos := add(dataPos, 1)\n                            }\n                            ret := add(add(memPtr, i), 32)\n                        }\n                        let newFreePtr := add(memPtr, and(add(sub(ret, memPtr), 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                        value := memPtr\n                        let memPos := mload(64)\n                        return(memPos, sub(abi_encode_string(memPos, memPtr), memPos))\n                    }\n                    case 0x095ea7b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value_1 := calldataload(36)\n                        mstore(0, /** @src 0:1152:1162  \"msg.sender\" */ caller())\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        mstore(32, /** @src 0:1142:1151  \"allowance\" */ 0x05)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let dataSlot := keccak256(0, 64)\n                        /// @src 0:1142:1172  \"allowance[msg.sender][spender]\"\n                        let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ and(/** @src 0:1142:1172  \"allowance[msg.sender][spender]\" */ value0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:1142:1163  \"allowance[msg.sender]\" */ dataSlot)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0x40)\n                        sstore(/** @src 0:1142:1172  \"allowance[msg.sender][spender]\" */ dataSlot_1, /** @src 0:58:1680  \"contract MockERC20 {...\" */ value_1)\n                        /// @src 0:1195:1231  \"Approval(msg.sender, spender, value)\"\n                        let _1 := /** @src 0:58:1680  \"contract MockERC20 {...\" */ mload(64)\n                        mstore(_1, value_1)\n                        /// @src 0:1195:1231  \"Approval(msg.sender, spender, value)\"\n                        log3(_1, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 32, /** @src 0:1195:1231  \"Approval(msg.sender, spender, value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 0:1152:1162  \"msg.sender\" */ caller(), /** @src 0:58:1680  \"contract MockERC20 {...\" */ and(/** @src 0:1195:1231  \"Approval(msg.sender, spender, value)\" */ value0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ sub(shl(160, 1), 1)))\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, 1)\n                        return(memPos_1, 32)\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _2 := sload(/** @src 0:165:191  \"uint256 public totalSupply\" */ 3)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, _2)\n                        return(memPos_2, 32)\n                    }\n                    case 0x23b872dd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        let value1 := abi_decode_address_3426()\n                        let value_2 := calldataload(68)\n                        let _3 := and(value0_1, sub(shl(160, 1), 1))\n                        mstore(0, _3)\n                        mstore(32, 4)\n                        /// @src 0:1360:1417  \"require(balanceOf[from] >= value, \\\"Insufficient balance\\\")\"\n                        require_helper_stringliteral(/** @src 0:1368:1392  \"balanceOf[from] >= value\" */ iszero(lt(/** @src 0:58:1680  \"contract MockERC20 {...\" */ sload(keccak256(0, 64)), /** @src 0:1368:1392  \"balanceOf[from] >= value\" */ value_2)))\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        mstore(0, _3)\n                        mstore(32, /** @src 0:1435:1444  \"allowance\" */ 0x05)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let dataSlot_2 := keccak256(0, 64)\n                        /// @src 0:1435:1462  \"allowance[from][msg.sender]\"\n                        let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ and(/** @src 0:1451:1461  \"msg.sender\" */ caller(), /** @src 0:58:1680  \"contract MockERC20 {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:1435:1462  \"allowance[from][msg.sender]\" */ dataSlot_2)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0x40)\n                        if /** @src 0:1435:1471  \"allowance[from][msg.sender] >= value\" */ lt(/** @src 0:58:1680  \"contract MockERC20 {...\" */ sload(/** @src 0:1435:1462  \"allowance[from][msg.sender]\" */ dataSlot_3), /** @src 0:1435:1471  \"allowance[from][msg.sender] >= value\" */ value_2)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        {\n                            let memPtr_1 := mload(64)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, 4), 32)\n                            mstore(add(memPtr_1, 36), 22)\n                            mstore(add(memPtr_1, 68), \"Insufficient allowance\")\n                            revert(memPtr_1, 100)\n                        }\n                        mstore(0, _3)\n                        mstore(32, 4)\n                        let dataSlot_4 := keccak256(0, 64)\n                        sstore(dataSlot_4, /** @src 0:1508:1532  \"balanceOf[from] -= value\" */ checked_sub_uint256(/** @src 0:58:1680  \"contract MockERC20 {...\" */ sload(/** @src 0:1508:1532  \"balanceOf[from] -= value\" */ dataSlot_4), value_2))\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let _4 := and(value1, sub(shl(160, 1), 1))\n                        mstore(0, _4)\n                        mstore(32, 4)\n                        let dataSlot_5 := keccak256(0, 64)\n                        sstore(dataSlot_5, /** @src 0:1542:1564  \"balanceOf[to] += value\" */ checked_add_uint256(/** @src 0:58:1680  \"contract MockERC20 {...\" */ sload(/** @src 0:1542:1564  \"balanceOf[to] += value\" */ dataSlot_5), value_2))\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        mstore(0, _3)\n                        mstore(32, /** @src 0:1435:1444  \"allowance\" */ 0x05)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let dataSlot_6 := keccak256(0, 64)\n                        /// @src 0:1574:1601  \"allowance[from][msg.sender]\"\n                        let dataSlot_7 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ and(/** @src 0:1451:1461  \"msg.sender\" */ caller(), /** @src 0:58:1680  \"contract MockERC20 {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:1574:1589  \"allowance[from]\" */ dataSlot_6)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        dataSlot_7 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0x40)\n                        sstore(/** @src 0:1574:1601  \"allowance[from][msg.sender]\" */ dataSlot_7, /** @src 0:1574:1610  \"allowance[from][msg.sender] -= value\" */ checked_sub_uint256(/** @src 0:58:1680  \"contract MockERC20 {...\" */ sload(/** @src 0:1574:1601  \"allowance[from][msg.sender]\" */ dataSlot_7), /** @src 0:1574:1610  \"allowance[from][msg.sender] -= value\" */ value_2))\n                        /// @src 0:1625:1650  \"Transfer(from, to, value)\"\n                        let _5 := /** @src 0:58:1680  \"contract MockERC20 {...\" */ mload(64)\n                        mstore(_5, value_2)\n                        /// @src 0:1625:1650  \"Transfer(from, to, value)\"\n                        log3(_5, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 32, /** @src 0:1625:1650  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _3, _4)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, 1)\n                        return(memPos_3, 32)\n                    }\n                    case 0x313ce567 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_3 := and(sload(/** @src 0:133:159  \"uint8 public decimals = 18\" */ 2), /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0xff)\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, value_3)\n                        return(memPos_4, 32)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 4)\n                        let _6 := sload(keccak256(0, 64))\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, _6)\n                        return(memPos_5, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 0:107:127  \"string public symbol\"\n                        let value_4 := /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0\n                        let offset := 0\n                        offset := 0\n                        let memPtr_2 := mload(64)\n                        let ret_1 := 0\n                        let slotValue_1 := sload(/** @src 0:107:127  \"string public symbol\" */ 1)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let length_1 := 0\n                        length_1 := shr(/** @src 0:107:127  \"string public symbol\" */ 1, /** @src 0:58:1680  \"contract MockERC20 {...\" */ slotValue_1)\n                        let outOfPlaceEncoding_1 := and(slotValue_1, /** @src 0:107:127  \"string public symbol\" */ 1)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        if iszero(outOfPlaceEncoding_1)\n                        {\n                            length_1 := and(length_1, 0x7f)\n                        }\n                        if eq(outOfPlaceEncoding_1, lt(length_1, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(memPtr_2, length_1)\n                        switch outOfPlaceEncoding_1\n                        case 0 {\n                            mstore(add(memPtr_2, 32), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_2, shl(5, iszero(iszero(length_1)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, /** @src 0:107:127  \"string public symbol\" */ 1)\n                            /// @src 0:58:1680  \"contract MockERC20 {...\"\n                            let dataPos_1 := keccak256(0, 32)\n                            let i_1 := 0\n                            for { } lt(i_1, length_1) { i_1 := add(i_1, 32) }\n                            {\n                                mstore(add(add(memPtr_2, i_1), 32), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, /** @src 0:107:127  \"string public symbol\" */ 1)\n                            }\n                            /// @src 0:58:1680  \"contract MockERC20 {...\"\n                            ret_1 := add(add(memPtr_2, i_1), 32)\n                        }\n                        let newFreePtr_1 := add(memPtr_2, and(add(sub(ret_1, memPtr_2), 31), not(31)))\n                        if or(gt(newFreePtr_1, 0xffffffffffffffff), lt(newFreePtr_1, memPtr_2))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr_1)\n                        value_4 := memPtr_2\n                        let memPos_6 := mload(64)\n                        return(memPos_6, sub(abi_encode_string(memPos_6, memPtr_2), memPos_6))\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        let value_5 := calldataload(36)\n                        mstore(0, /** @src 0:864:874  \"msg.sender\" */ caller())\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        mstore(32, 4)\n                        /// @src 0:846:909  \"require(balanceOf[msg.sender] >= value, \\\"Insufficient balance\\\")\"\n                        require_helper_stringliteral(/** @src 0:854:884  \"balanceOf[msg.sender] >= value\" */ iszero(lt(/** @src 0:58:1680  \"contract MockERC20 {...\" */ sload(keccak256(0, 64)), /** @src 0:854:884  \"balanceOf[msg.sender] >= value\" */ value_5)))\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        mstore(0, /** @src 0:864:874  \"msg.sender\" */ caller())\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        mstore(32, 4)\n                        let dataSlot_8 := keccak256(0, 64)\n                        sstore(dataSlot_8, /** @src 0:919:949  \"balanceOf[msg.sender] -= value\" */ checked_sub_uint256(/** @src 0:58:1680  \"contract MockERC20 {...\" */ sload(/** @src 0:919:949  \"balanceOf[msg.sender] -= value\" */ dataSlot_8), value_5))\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let _7 := and(value0_2, sub(shl(160, 1), 1))\n                        mstore(0, _7)\n                        mstore(32, 4)\n                        let dataSlot_9 := keccak256(0, 64)\n                        sstore(dataSlot_9, /** @src 0:959:981  \"balanceOf[to] += value\" */ checked_add_uint256(/** @src 0:58:1680  \"contract MockERC20 {...\" */ sload(/** @src 0:959:981  \"balanceOf[to] += value\" */ dataSlot_9), value_5))\n                        /// @src 0:996:1027  \"Transfer(msg.sender, to, value)\"\n                        let _8 := /** @src 0:58:1680  \"contract MockERC20 {...\" */ mload(64)\n                        mstore(_8, value_5)\n                        /// @src 0:996:1027  \"Transfer(msg.sender, to, value)\"\n                        log3(_8, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 32, /** @src 0:996:1027  \"Transfer(msg.sender, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 0:864:874  \"msg.sender\" */ caller(), /** @src 0:996:1027  \"Transfer(msg.sender, to, value)\" */ _7)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, 1)\n                        return(memPos_7, 32)\n                    }\n                    case 0xdd62ed3e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_3 := abi_decode_address()\n                        let value1_1 := abi_decode_address_3426()\n                        mstore(0, and(value0_3, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:247:311  \"mapping(address => mapping(address => uint256)) public allowance\" */ 5)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let dataSlot_10 := keccak256(0, 64)\n                        /// @src 0:247:311  \"mapping(address => mapping(address => uint256)) public allowance\"\n                        let dataSlot_11 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ and(/** @src 0:247:311  \"mapping(address => mapping(address => uint256)) public allowance\" */ value1_1, /** @src 0:58:1680  \"contract MockERC20 {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:247:311  \"mapping(address => mapping(address => uint256)) public allowance\" */ dataSlot_10)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        dataSlot_11 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:1680  \"contract MockERC20 {...\" */ 0x40)\n                        let _9 := sload(/** @src 0:247:311  \"mapping(address => mapping(address => uint256)) public allowance\" */ dataSlot_11)\n                        /// @src 0:58:1680  \"contract MockERC20 {...\"\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, _9)\n                        return(memPos_8, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                mcopy(add(headStart, 64), add(value0, 32), length)\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address_3426() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 20)\n                    mstore(add(memPtr, 68), \"Insufficient balance\")\n                    revert(memPtr, 100)\n                }\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                diff := sub(x, y)\n                if gt(diff, x)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220279815e3122cb36cb0d5a394589f6055c9bfb59ad7793685f3ac34ce37af0b3a64736f6c634300081c0033\"\n    }\n}\n",
          "hash": "5a508dc72c24ec44d95336a76966ef9db9b877b37b5763d3ea08b090f4b0f48a",
          "factoryDependencies": {}
        }
      },
      "contracts/UniswapV2Pair.sol": {
        "IERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "recipient",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV2Pair.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniswapV2Pair.sol\":{\"keccak256\":\"0x573293b4e11013732fa54faf9016c69c9ad621f93260c3855a5d3e00f2947fc4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e9e67335a6a5e33ee648b003ebe4f38acb86594e4f37fb21dee289363b88761\",\"dweb:/ipfs/QmXR65bo739x789AzCLgGf2DBeRP2RLR1nPLKVRFRxADrV\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "balanceOf(address)": "70a08231",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        },
        "UniswapV2Pair": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_token0",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_token1",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount0",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount1",
                  "type": "uint256"
                }
              ],
              "name": "Mint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount0In",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount1In",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount0Out",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount1Out",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                }
              ],
              "name": "Swap",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getReserves",
              "outputs": [
                {
                  "internalType": "uint112",
                  "name": "_reserve0",
                  "type": "uint112"
                },
                {
                  "internalType": "uint112",
                  "name": "_reserve1",
                  "type": "uint112"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                }
              ],
              "name": "mint",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "liquidity",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount0Out",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amount1Out",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                }
              ],
              "name": "swap",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token0",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "token1",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniswapV2Pair.sol\":\"UniswapV2Pair\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniswapV2Pair.sol\":{\"keccak256\":\"0x573293b4e11013732fa54faf9016c69c9ad621f93260c3855a5d3e00f2947fc4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e9e67335a6a5e33ee648b003ebe4f38acb86594e4f37fb21dee289363b88761\",\"dweb:/ipfs/QmXR65bo739x789AzCLgGf2DBeRP2RLR1nPLKVRFRxADrV\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 160/65744 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 6210\n// Code size = 21678 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x200a8]\n     5: jump @41 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x300d0\n    14: i32 a0 = a0 + 0\n    16: ecalli 13 // 'set_immutable_data'\n    18: jump @41\n      : @2 (gas: 8)\n    21: sp = sp + 0xfffffffffffffff0\n    24: u64 [sp + 0x8] = ra\n    27: u64 [sp] = s0\n    29: a2 = a1\n    31: s0 = a0\n    33: a1 = 0x20\n    36: a0 = a2\n    38: ra = 2, jump @12\n      : @3 [@dyn 1] (gas: 100)\n    43: a1 = u8 [a0 + 0x1]\n    46: a2 = u8 [a0]\n    48: a3 = u8 [a0 + 0x2]\n    51: a4 = u8 [a0 + 0x3]\n    54: a1 = a1 << 0x8\n    57: a1 = a1 | a2\n    60: a3 = a3 << 0x10\n    63: a4 = a4 << 0x18\n    66: a3 = a3 | a4\n    69: a1 = a1 | a3\n    72: a2 = u8 [a0 + 0x5]\n    75: a3 = u8 [a0 + 0x4]\n    78: a4 = u8 [a0 + 0x6]\n    81: a5 = u8 [a0 + 0x7]\n    84: a2 = a2 << 0x8\n    87: a2 = a2 | a3\n    90: a4 = a4 << 0x10\n    93: a5 = a5 << 0x18\n    96: a4 = a4 | a5\n    99: a2 = a2 | a4\n   102: a2 = a2 << 0x20\n   105: t0 = a2 | a1\n   108: a2 = u8 [a0 + 0x9]\n   111: a3 = u8 [a0 + 0x8]\n   114: a4 = u8 [a0 + 0xa]\n   117: a5 = u8 [a0 + 0xb]\n   120: a2 = a2 << 0x8\n   123: a2 = a2 | a3\n   126: a4 = a4 << 0x10\n   129: a5 = a5 << 0x18\n   132: a4 = a4 | a5\n   135: a2 = a2 | a4\n   138: a3 = u8 [a0 + 0xd]\n   141: a4 = u8 [a0 + 0xc]\n   144: a5 = u8 [a0 + 0xe]\n   147: a1 = u8 [a0 + 0xf]\n   150: a3 = a3 << 0x8\n   153: a3 = a3 | a4\n   156: a5 = a5 << 0x10\n   159: a1 = a1 << 0x18\n   162: a1 = a1 | a5\n   165: a1 = a1 | a3\n   168: a1 = a1 << 0x20\n   171: t1 = a1 | a2\n   174: a1 = u8 [a0 + 0x11]\n   177: a3 = u8 [a0 + 0x10]\n   180: a4 = u8 [a0 + 0x12]\n   183: a5 = u8 [a0 + 0x13]\n   186: a1 = a1 << 0x8\n   189: a1 = a1 | a3\n   192: a4 = a4 << 0x10\n   195: a5 = a5 << 0x18\n   198: a4 = a4 | a5\n   201: a1 = a1 | a4\n   204: a3 = u8 [a0 + 0x15]\n   207: a4 = u8 [a0 + 0x14]\n   210: a5 = u8 [a0 + 0x16]\n   213: a2 = u8 [a0 + 0x17]\n   216: a3 = a3 << 0x8\n   219: a3 = a3 | a4\n   222: a5 = a5 << 0x10\n   225: a2 = a2 << 0x18\n   228: a2 = a2 | a5\n   231: a2 = a2 | a3\n   234: a2 = a2 << 0x20\n   237: a3 = a2 | a1\n   240: a1 = u8 [a0 + 0x19]\n   243: a2 = u8 [a0 + 0x18]\n   246: a4 = u8 [a0 + 0x1a]\n   249: a5 = u8 [a0 + 0x1b]\n   252: a1 = a1 << 0x8\n   255: a1 = a1 | a2\n   258: a4 = a4 << 0x10\n   261: a5 = a5 << 0x18\n   264: a4 = a4 | a5\n   267: a1 = a1 | a4\n   270: a2 = u8 [a0 + 0x1d]\n   273: a4 = u8 [a0 + 0x1c]\n   276: a5 = u8 [a0 + 0x1e]\n   279: a0 = u8 [a0 + 0x1f]\n   282: a2 = a2 << 0x8\n   285: a2 = a2 | a4\n   288: a5 = a5 << 0x10\n   291: a0 = a0 << 0x18\n   294: a0 = a0 | a5\n   297: a0 = a0 | a2\n   300: a0 = a0 << 0x20\n   303: a0 = a0 | a1\n   306: a0 = reverse a0\n   308: a1 = reverse a3\n   310: a2 = reverse t1\n   312: a3 = reverse t0\n   314: u64 [s0 + 0x18] = a3\n   317: u64 [s0 + 0x10] = a2\n   320: u64 [s0 + 0x8] = a1\n   323: u64 [s0] = a0\n   325: ra = u64 [sp + 0x8]\n   328: s0 = u64 [sp]\n   330: sp = sp + 0x10\n   333: ret\n      : @4 (gas: 12)\n   335: sp = sp + 0xffffffffffffffd8\n   338: u64 [sp + 0x20] = ra\n   341: u64 [sp + 0x18] = s0\n   344: u64 [sp + 0x10] = s1\n   347: a2 = u64 [a1]\n   349: u64 [sp + 0x8] = a2\n   352: a2 = u64 [a1 + 0x8]\n   355: u64 [sp] = a2\n   357: s0 = u64 [a1 + 0x10]\n   360: s1 = u64 [a1 + 0x18]\n   363: a1 = 0x20\n   366: ra = 4, jump @12\n      : @5 [@dyn 2] (gas: 71)\n   371: a1 = reverse s1\n   373: a2 = reverse s0\n   375: a3 = u64 [sp]\n   377: a3 = reverse a3\n   379: a4 = u64 [sp + 0x8]\n   382: a4 = reverse a4\n   384: u8 [a0 + 0x18] = a4\n   387: u8 [a0 + 0x10] = a3\n   390: u8 [a0 + 0x8] = a2\n   393: u8 [a0] = a1\n   395: a5 = a4 >> 0x38\n   398: u8 [a0 + 0x1f] = a5\n   401: a5 = a4 >> 0x30\n   404: u8 [a0 + 0x1e] = a5\n   407: a5 = a4 >> 0x28\n   410: u8 [a0 + 0x1d] = a5\n   413: a5 = a4 >> 0x20\n   416: u8 [a0 + 0x1c] = a5\n   419: a5 = a4 >> 0x18\n   422: u8 [a0 + 0x1b] = a5\n   425: a5 = a4 >> 0x10\n   428: u8 [a0 + 0x1a] = a5\n   431: a4 = a4 >> 0x8\n   434: u8 [a0 + 0x19] = a4\n   437: a4 = a3 >> 0x38\n   440: u8 [a0 + 0x17] = a4\n   443: a4 = a3 >> 0x30\n   446: u8 [a0 + 0x16] = a4\n   449: a4 = a3 >> 0x28\n   452: u8 [a0 + 0x15] = a4\n   455: a4 = a3 >> 0x20\n   458: u8 [a0 + 0x14] = a4\n   461: a4 = a3 >> 0x18\n   464: u8 [a0 + 0x13] = a4\n   467: a4 = a3 >> 0x10\n   470: u8 [a0 + 0x12] = a4\n   473: a3 = a3 >> 0x8\n   476: u8 [a0 + 0x11] = a3\n   479: a3 = a2 >> 0x38\n   482: u8 [a0 + 0xf] = a3\n   485: a3 = a2 >> 0x30\n   488: u8 [a0 + 0xe] = a3\n   491: a3 = a2 >> 0x28\n   494: u8 [a0 + 0xd] = a3\n   497: a3 = a2 >> 0x20\n   500: u8 [a0 + 0xc] = a3\n   503: a3 = a2 >> 0x18\n   506: u8 [a0 + 0xb] = a3\n   509: a3 = a2 >> 0x10\n   512: u8 [a0 + 0xa] = a3\n   515: a2 = a2 >> 0x8\n   518: u8 [a0 + 0x9] = a2\n   521: a2 = a1 >> 0x38\n   524: u8 [a0 + 0x7] = a2\n   527: a2 = a1 >> 0x30\n   530: u8 [a0 + 0x6] = a2\n   533: a2 = a1 >> 0x28\n   536: u8 [a0 + 0x5] = a2\n   539: a2 = a1 >> 0x20\n   542: u8 [a0 + 0x4] = a2\n   545: a2 = a1 >> 0x18\n   548: u8 [a0 + 0x3] = a2\n   551: a2 = a1 >> 0x10\n   554: u8 [a0 + 0x2] = a2\n   557: a1 = a1 >> 0x8\n   560: u8 [a0 + 0x1] = a1\n   563: ra = u64 [sp + 0x20]\n   566: s0 = u64 [sp + 0x18]\n   569: s1 = u64 [sp + 0x10]\n   572: sp = sp + 0x28\n   575: ret\n      : @6 (gas: 43)\n   577: sp = sp + 0xffffffffffffffa0\n   580: u64 [sp + 0x58] = ra\n   583: u64 [sp + 0x50] = s0\n   586: u64 [sp + 0x48] = s1\n   589: s0 = sp + 0x60\n   592: sp = sp & 0xffffffffffffffe0\n   595: s1 = a0\n   597: a0 = u64 [a1 + 0x18]\n   600: a2 = u64 [a1 + 0x10]\n   603: a3 = u64 [a1 + 0x8]\n   606: a1 = u64 [a1]\n   608: a0 = reverse a0\n   610: a2 = reverse a2\n   612: a3 = reverse a3\n   614: a1 = reverse a1\n   616: u64 [sp + 0x18] = a1\n   619: u64 [sp + 0x10] = a3\n   622: u64 [sp + 0x8] = a2\n   625: u64 [sp] = a0\n   627: u64 [sp + 56] = 0\n   630: u64 [sp + 48] = 0\n   633: u64 [sp + 40] = 0\n   636: u64 [sp + 32] = 0\n   639: u32 [sp + 64] = 0x20\n   643: i32 a1 = sp + 0\n   645: i32 a3 = sp + 0x20\n   648: i32 a4 = sp + 0x40\n   651: a2 = 0xffffffffffffffff\n   654: a0 = 0\n   656: ecalli 7 // 'get_storage'\n   658: a0 = u64 [sp + 0x38]\n   661: a1 = u64 [sp + 0x30]\n   664: a2 = u64 [sp + 0x28]\n   667: a3 = u64 [sp + 0x20]\n   670: a0 = reverse a0\n   672: a1 = reverse a1\n   674: a2 = reverse a2\n   676: a3 = reverse a3\n   678: u64 [s1 + 0x18] = a3\n   681: u64 [s1 + 0x10] = a2\n   684: u64 [s1 + 0x8] = a1\n   687: u64 [s1] = a0\n   689: t0 = 6, jump @676\n      : @7 [@dyn 3] (gas: 1)\n   694: ret\n      : @8 (gas: 40)\n   696: sp = sp + 0xffffffffffffffa0\n   699: u64 [sp + 0x58] = ra\n   702: u64 [sp + 0x50] = s0\n   705: s0 = sp + 0x60\n   708: sp = sp & 0xffffffffffffffe0\n   711: t0 = u64 [a0]\n   713: a3 = u64 [a0 + 0x8]\n   716: a4 = u64 [a0 + 0x10]\n   719: a0 = u64 [a0 + 0x18]\n   722: t1 = u64 [a1]\n   724: a2 = u64 [a1 + 0x8]\n   727: a5 = u64 [a1 + 0x10]\n   730: a1 = u64 [a1 + 0x18]\n   733: t2 = reverse a0\n   735: a4 = reverse a4\n   737: a3 = reverse a3\n   739: a0 = reverse t0\n   741: t0 = reverse a1\n   743: a5 = reverse a5\n   745: a2 = reverse a2\n   747: a1 = reverse t1\n   749: u64 [sp + 0x18] = a0\n   752: u64 [sp + 0x10] = a3\n   755: u64 [sp + 0x8] = a4\n   758: u64 [sp] = t2\n   760: u64 [sp + 0x38] = a1\n   763: u64 [sp + 0x30] = a2\n   766: u64 [sp + 0x28] = a5\n   769: u64 [sp + 0x20] = t0\n   772: i32 a1 = sp + 0\n   774: i32 a3 = sp + 0x20\n   777: a2 = 0xffffffffffffffff\n   780: a4 = 0x20\n   783: a0 = 0\n   785: ecalli 14 // 'set_storage'\n   787: sp = s0 + 0xffffffffffffffa0\n   790: ra = u64 [sp + 0x58]\n   793: s0 = u64 [sp + 0x50]\n   796: sp = sp + 0x60\n   799: ret\n      : @9 [@dyn 4] (gas: 35)\n   801: a1 = u64 [sp]\n   803: a1 = reverse a1\n   805: a2 = u64 [sp + 0x8]\n   808: a2 = reverse a2\n   810: a3 = u64 [sp + 0x10]\n   813: a3 = reverse a3\n   815: a4 = u64 [sp + 0x18]\n   818: a4 = reverse a4\n   820: u64 [sp + 0x58] = a4\n   823: u64 [sp + 0x50] = a3\n   826: u64 [sp + 0x48] = a2\n   829: u64 [sp + 0x40] = a1\n   832: a1 = u64 [sp + 0x20]\n   835: a1 = reverse a1\n   837: a2 = u64 [sp + 0x28]\n   840: a2 = reverse a2\n   842: a3 = u64 [sp + 0x30]\n   845: a3 = reverse a3\n   847: a4 = u64 [sp + 0x38]\n   850: a4 = reverse a4\n   852: u64 [sp + 0x78] = a4\n   855: u64 [sp + 0x70] = a3\n   858: u64 [sp + 0x68] = a2\n   861: u64 [sp + 0x60] = a1\n   864: i32 a2 = a0 + 0\n   866: i32 a3 = s1 + 0\n   868: i32 a0 = sp + 0x40\n   871: a1 = 0x2\n   874: ecalli 6 // 'deposit_event'\n   876: sp = s0 + 0xffffffffffffff60\n   880: ra = u64 [sp + 0x98]\n   884: s0 = u64 [sp + 0x90]\n   888: s1 = u64 [sp + 0x88]\n   892: sp = sp + 0xa0\n   896: ret\n      : @10 [@dyn 5] (gas: 2)\n   898: u64 [sp + 0x38] = a1\n   901: ra = 12, jump @12\n      : @11 [@dyn 6] (gas: 46)\n   906: a1 = reverse s1\n   908: u64 [sp + 0x78] = a1\n   911: a1 = u64 [sp]\n   913: a1 = reverse a1\n   915: u64 [sp + 0x70] = a1\n   918: a1 = u64 [sp + 0x8]\n   921: a1 = reverse a1\n   923: u64 [sp + 0x68] = a1\n   926: a1 = u64 [sp + 0x10]\n   929: a1 = reverse a1\n   931: u64 [sp + 0x60] = a1\n   934: a1 = u64 [sp + 0x18]\n   937: a1 = reverse a1\n   939: u64 [sp + 0x98] = a1\n   943: a1 = u64 [sp + 0x20]\n   946: a1 = reverse a1\n   948: u64 [sp + 0x90] = a1\n   952: a1 = u64 [sp + 0x28]\n   955: a1 = reverse a1\n   957: u64 [sp + 0x88] = a1\n   961: a1 = u64 [sp + 0x30]\n   964: a1 = reverse a1\n   966: u64 [sp + 0x80] = a1\n   970: a1 = u64 [sp + 0x40]\n   973: a1 = reverse a1\n   975: u64 [sp + 0xb8] = a1\n   979: a1 = u64 [sp + 0x48]\n   982: a1 = reverse a1\n   984: u64 [sp + 0xb0] = a1\n   988: a1 = u64 [sp + 0x50]\n   991: a1 = reverse a1\n   993: u64 [sp + 0xa8] = a1\n   997: a1 = u64 [sp + 0x58]\n  1000: a1 = reverse a1\n  1002: u64 [sp + 0xa0] = a1\n  1006: i32 a2 = a0 + 0\n  1008: a3 = i32 [sp + 0x38]\n  1011: i32 a0 = sp + 0x60\n  1014: a1 = 0x3\n  1017: ecalli 6 // 'deposit_event'\n  1019: sp = s0 + 0xffffffffffffff20\n  1023: ra = u64 [sp + 0xd8]\n  1027: s0 = u64 [sp + 0xd0]\n  1031: s1 = u64 [sp + 0xc8]\n  1035: sp = sp + 0xe0\n  1039: ret\n      : @12 (gas: 2)\n  1041: i32 a2 = a0 >> 0x10\n  1044: jump @17 if a2 != 0\n      : @13 (gas: 4)\n  1047: a1 = a1 + a0\n  1050: i32 a1 = a1 + 0x1f\n  1053: a1 = a1 & 0xffffffffffffffe0\n  1056: jump @17 if a1 >u 65536\n      : @14 (gas: 3)\n  1062: a2 = 0x200a4\n  1067: a3 = i32 [0x200a4]\n  1072: jump @16 if a3 >=u a1\n      : @15 (gas: 2)\n  1075: u32 [0x200a4] = a1\n  1080: fallthrough\n      : @16 (gas: 4)\n  1081: a1 = 0x200b0\n  1086: i32 a0 = a0 + 0\n  1088: a0 = a0 + a1\n  1091: ret\n      : @17 (gas: 1)\n  1093: trap\n      : @18 (gas: 6)\n  1094: sp = sp + 0xfffffffffffffff0\n  1097: u64 [sp + 0x8] = ra\n  1100: u64 [sp] = s0\n  1102: s0 = a0 & 0x1\n  1105: ecalli 4 // 'call_data_size'\n  1107: fallthrough\n      : @19 (gas: 2)\n  1108: u32 [0x200a0] = a0\n  1113: jump @21 if s0 == 0\n      : @20 (gas: 1)\n  1116: ra = 14, jump @22\n      : @21 [@dyn 7] (gas: 1)\n  1120: ra = 16, jump @44\n      : @22 [@dyn 8] (gas: 14)\n  1125: sp = sp + 0xfffffffffffffdc0\n  1129: a0 = sp + 0x200\n  1133: u64 [a0 + 0x38] = ra\n  1136: u64 [a0 + 0x30] = s0\n  1139: u64 [a0 + 0x28] = s1\n  1142: s0 = sp + 0x240\n  1146: sp = sp & 0xffffffffffffffe0\n  1149: u64 [sp + 344] = 0\n  1153: u64 [sp + 336] = 0\n  1157: u64 [sp + 328] = 0\n  1161: u64 [sp + 320] = 0\n  1165: i32 a0 = sp + 0x140\n  1169: ecalli 15 // 'value_transferred'\n  1171: fallthrough\n      : @23 (gas: 8)\n  1172: a0 = u64 [sp + 0x150]\n  1176: a1 = u64 [sp + 0x158]\n  1180: a2 = u64 [sp + 0x148]\n  1184: a3 = u64 [sp + 0x140]\n  1188: a1 = a1 | a2\n  1191: a0 = a0 | a3\n  1194: a0 = a0 | a1\n  1197: jump @37 if a0 != 0\n      : @24 (gas: 15)\n  1201: s1 = i32 [0x200a0]\n  1206: a0 = s1 << 0x20\n  1209: a0 = a0 >> 0x20\n  1212: a0 = a0 + 0x1f\n  1215: a0 = a0 & 0xffffffffffffffe0\n  1218: a1 = a0 + 0x80\n  1222: a0 = a1 <u a0\n  1225: u64 [sp + 312] = 0\n  1229: u64 [sp + 0x120] = a1\n  1233: u64 [sp + 0x128] = a0\n  1237: a0 = 0 if a0 != 0\n  1239: u64 [sp + 0x130] = a0\n  1243: a0 = 0x40\n  1246: a1 = sp + 0x120\n  1250: ra = 18, jump @4\n      : @25 [@dyn 9] (gas: 3)\n  1255: a0 = 0x80\n  1259: a1 = s1\n  1261: ra = 20, jump @12\n      : @26 [@dyn 10] (gas: 5)\n  1266: i32 a0 = a0 + 0\n  1268: a1 = s1\n  1270: a2 = 0\n  1272: ecalli 2 // 'call_data_copy'\n  1274: fallthrough\n      : @27 (gas: 1)\n  1275: jump @38 if s1 <u 64\n      : @28 (gas: 7)\n  1280: u64 [sp + 248] = 0\n  1284: u64 [sp + 240] = 0\n  1288: u64 [sp + 224] = 0x80\n  1294: a0 = sp + 0x100\n  1298: a1 = sp + 0xe0\n  1302: u64 [sp + 232] = 0\n  1306: ra = 22, jump @546\n      : @29 [@dyn 11] (gas: 12)\n  1311: a0 = u64 [sp + 0x100]\n  1315: u64 [sp + 0x20] = a0\n  1318: a0 = u64 [sp + 0x108]\n  1322: u64 [sp + 0x18] = a0\n  1325: s1 = u32 [sp + 0x110]\n  1329: u64 [sp + 184] = 0\n  1333: u64 [sp + 176] = 0\n  1337: u64 [sp + 160] = 0xa0\n  1343: a0 = sp + 0xc0\n  1347: a1 = sp + 0xa0\n  1351: u64 [sp + 168] = 0\n  1355: ra = 24, jump @546\n      : @30 [@dyn 12] (gas: 13)\n  1360: a0 = u64 [sp + 0xc0]\n  1364: u64 [sp + 0x38] = a0\n  1367: a0 = u64 [sp + 0xc8]\n  1371: u64 [sp + 0x30] = a0\n  1374: a0 = u32 [sp + 0xd0]\n  1378: u64 [sp + 0x28] = a0\n  1381: u64 [sp + 376] = 0\n  1385: u64 [sp + 368] = 0\n  1389: u64 [sp + 360] = 0\n  1393: u64 [sp + 352] = 0\n  1397: a0 = sp + 0x80\n  1401: a1 = sp + 0x160\n  1405: ra = 26, jump @6\n      : @31 [@dyn 13] (gas: 17)\n  1410: a0 = u32 [sp + 0x94]\n  1414: a0 = a0 << 0x20\n  1417: a1 = u64 [sp + 0x98]\n  1421: a0 = a0 | s1\n  1424: u64 [sp + 408] = 0\n  1428: u64 [sp + 400] = 0\n  1432: u64 [sp + 392] = 0\n  1436: u64 [sp + 384] = 0\n  1440: a2 = u64 [sp + 0x18]\n  1443: u64 [sp + 0x1a8] = a2\n  1447: a2 = u64 [sp + 0x20]\n  1450: u64 [sp + 0x1a0] = a2\n  1454: u64 [sp + 0x1b8] = a1\n  1458: u64 [sp + 0x1b0] = a0\n  1462: a0 = sp + 0x180\n  1466: a1 = sp + 0x1a0\n  1470: ra = 28, jump @8\n      : @32 [@dyn 14] (gas: 8)\n  1475: u64 [sp + 472] = 0\n  1479: u64 [sp + 464] = 0\n  1483: u64 [sp + 456] = 0\n  1487: s1 = 0x1\n  1490: u64 [sp + 0x1c0] = s1\n  1494: a0 = sp + 0x60\n  1497: a1 = sp + 0x1c0\n  1501: ra = 30, jump @6\n      : @33 [@dyn 15] (gas: 19)\n  1506: a0 = u32 [sp + 0x74]\n  1509: a0 = a0 << 0x20\n  1512: a1 = u64 [sp + 0x78]\n  1515: a2 = u64 [sp + 0x28]\n  1518: a0 = a0 | a2\n  1521: u64 [sp + 504] = 0\n  1525: u64 [sp + 496] = 0\n  1529: u64 [sp + 488] = 0\n  1533: u64 [sp + 0x1e0] = s1\n  1537: a2 = u64 [sp + 0x30]\n  1540: a3 = sp + 0x200\n  1544: u64 [a3 + 0x8] = a2\n  1547: a2 = u64 [sp + 0x38]\n  1550: u64 [a3] = a2\n  1552: u64 [a3 + 0x18] = a1\n  1555: u64 [a3 + 0x10] = a0\n  1558: a0 = sp + 0x1e0\n  1562: a1 = sp + 0x200\n  1566: ra = 32, jump @8\n      : @34 [@dyn 16] (gas: 3)\n  1571: a0 = sp + 0x40\n  1574: a1 = 0x40\n  1577: ra = 34, jump @2\n      : @35 [@dyn 17] (gas: 12)\n  1582: a0 = u64 [sp + 0x58]\n  1585: a1 = u64 [sp + 0x50]\n  1588: a2 = u64 [sp + 0x48]\n  1591: s1 = u64 [sp + 0x40]\n  1594: a0 = a0 | a2\n  1597: a2 = s1 | a1\n  1600: a2 = a2 | a0\n  1603: a2 = a2 >> 0x20\n  1606: a0 = a0 | a1\n  1609: a0 = a0 << 0x20\n  1612: a0 = a0 | a2\n  1615: jump @39 if a0 == 0\n      : @36 (gas: 1)\n  1618: trap\n      : @37 (gas: 4)\n  1619: a1 = 0x200b0\n  1624: i32 a1 = a1 + 0\n  1626: a0 = 0x1\n  1629: jump @43\n      : @38 (gas: 4)\n  1631: a1 = 0x200b0\n  1636: i32 a1 = a1 + 0\n  1638: a0 = 0x1\n  1641: jump @43\n      : @39 (gas: 3)\n  1643: a0 = s1\n  1645: a1 = 0\n  1647: ra = 36, jump @12\n      : @40 [@dyn 18] (gas: 5)\n  1652: i32 a0 = a0 + 0\n  1654: a1 = 0\n  1656: a2 = 0\n  1658: ecalli 2 // 'call_data_copy'\n  1660: jump @0\n      : @41 (gas: 3)\n  1663: a0 = s1\n  1665: a1 = 0\n  1667: ra = 38, jump @12\n      : @42 [@dyn 19] (gas: 6)\n  1672: i32 a1 = a0 + 0\n  1674: a0 = 0\n  1676: a2 = 0\n  1678: ra = 0x28\n  1681: ecalli 12 // 'seal_return'\n  1683: jump @44\n      : @43 (gas: 4)\n  1685: a2 = 0\n  1687: ra = 0x28\n  1690: ecalli 12 // 'seal_return'\n  1692: fallthrough\n      : @44 [@dyn 20] (gas: 16)\n  1693: sp = sp + 0xfffffffffffffe10\n  1697: u64 [sp + 0x1e8] = ra\n  1701: u64 [sp + 0x1e0] = s0\n  1705: u64 [sp + 0x1d8] = s1\n  1709: s0 = sp + 0x1f0\n  1713: sp = sp + 0xffffffffffffe010\n  1717: sp = sp & 0xffffffffffffffe0\n  1720: s1 = sp\n  1722: a2 = s1 + 0x18d8\n  1726: u64 [a2 + 448] = 0\n  1730: u64 [a2 + 440] = 0\n  1734: u64 [a2 + 424] = 0x80\n  1740: a0 = 0x40\n  1743: a1 = s1 + 0x1a80\n  1747: u64 [a2 + 432] = 0\n  1751: ra = 42, jump @4\n      : @45 [@dyn 21] (gas: 4)\n  1756: a0 = 0x200a0\n  1761: u64 [s1 + 0x138] = a0\n  1765: a0 = i32 [0x200a0]\n  1770: jump @47 if a0 >=u 4\n      : @46 (gas: 1)\n  1774: jump @499\n      : @47 (gas: 6)\n  1777: a0 = s1 + 0x2000\n  1781: i32 a0 = a0 + 0xfffffffffffffaa0\n  1785: a1 = 0\n  1787: ra = 0x2c\n  1790: ecalli 3 // 'call_data_load'\n  1792: fallthrough\n      : @48 [@dyn 22] (gas: 3)\n  1793: a2 = s1 + 0x18d8\n  1797: a0 = i32 [a2 + 0x1e4]\n  1801: jump @50 if a0 != 3524403367\n      : @49 (gas: 1)\n  1808: jump @192\n      : @50 (gas: 1)\n  1811: jump @85 if a0 == 234755713\n      : @51 (gas: 1)\n  1819: jump @53 if a0 != 404098525\n      : @52 (gas: 1)\n  1826: jump @164\n      : @53 (gas: 1)\n  1829: jump @95 if a0 == 1784838210\n      : @54 (gas: 1)\n  1837: jump @56 if a0 == 1838834698\n      : @55 (gas: 1)\n  1844: jump @174\n      : @56 (gas: 8)\n  1847: u64 [a2 + 1344] = 0\n  1851: u64 [a2 + 1336] = 0\n  1855: u64 [a2 + 1328] = 0\n  1859: u64 [a2 + 1320] = 0\n  1863: a0 = s1 + 0x2000\n  1867: i32 a0 = a0 + 0xfffffffffffffe00\n  1871: ecalli 15 // 'value_transferred'\n  1873: fallthrough\n      : @57 (gas: 10)\n  1874: a3 = s1 + 0x18d8\n  1878: a4 = a3 + 0x500\n  1882: a0 = u64 [a4 + 0x38]\n  1885: a1 = u64 [a4 + 0x40]\n  1888: a2 = u64 [a4 + 0x30]\n  1891: a3 = u64 [a4 + 0x28]\n  1894: a1 = a1 | a2\n  1897: a0 = a0 | a3\n  1900: a0 = a0 | a1\n  1903: jump @59 if a0 == 0\n      : @58 (gas: 1)\n  1906: jump @486\n      : @59 (gas: 3)\n  1909: a0 = u64 [s1 + 0x138]\n  1913: a0 = i32 [a0]\n  1915: jump @61 if a0 >u 99\n      : @60 (gas: 1)\n  1919: jump @487\n      : @61 (gas: 34)\n  1922: a0 = s1 + 0x2000\n  1926: i32 a0 = a0 + 0xfffffffffffffe20\n  1930: a1 = 0x4\n  1933: ecalli 3 // 'call_data_load'\n  1935: a1 = s1 + 0x18d8\n  1939: a2 = a1 + 0x500\n  1943: a0 = u64 [a2 + 0x60]\n  1946: u64 [s1 + 0x138] = a0\n  1950: a0 = u64 [a2 + 0x58]\n  1953: u64 [s1 + 0x130] = a0\n  1957: a0 = u64 [a2 + 0x50]\n  1960: u64 [s1 + 0x128] = a0\n  1964: a0 = u64 [a2 + 0x48]\n  1967: u64 [s1 + 0x120] = a0\n  1971: a0 = s1 + 0x2000\n  1975: i32 a0 = a0 + 0xfffffffffffffe40\n  1979: a1 = 0x24\n  1982: ecalli 3 // 'call_data_load'\n  1984: a1 = s1 + 0x18d8\n  1988: a2 = a1 + 0x500\n  1992: a0 = u64 [a2 + 0x80]\n  1996: a1 = s1 + 0x100\n  2000: u64 [a1 + 0x18] = a0\n  2003: a0 = u64 [a2 + 0x78]\n  2006: u64 [a1 + 0x10] = a0\n  2009: a0 = u64 [a2 + 0x70]\n  2012: u64 [a1 + 0x8] = a0\n  2015: a0 = u64 [a2 + 0x68]\n  2018: u64 [a1] = a0\n  2020: a0 = s1 + 0x2000\n  2024: i32 a0 = a0 + 0xfffffffffffffe60\n  2028: a1 = 0x44\n  2031: ecalli 3 // 'call_data_load'\n  2033: fallthrough\n      : @62 (gas: 13)\n  2034: a0 = s1 + 0x18d8\n  2038: a1 = u64 [a0 + 0x598]\n  2042: a2 = u64 [a0 + 0x5a0]\n  2046: a0 = 0x100000000\n  2056: a0 = a0 ^ a1\n  2059: a0 = a0 | a2\n  2062: u64 [s1 + 0xf8] = a1\n  2066: a1 = a1 >> 0x20\n  2069: a1 = a1 <u 0x1\n  2072: u64 [s1 + 0xd0] = a2\n  2076: a1 = 0 if a2 != 0\n  2078: a1 = 0 if a0 == 0\n  2080: jump @64 if a1 != 0\n      : @63 (gas: 1)\n  2083: jump @488\n      : @64 (gas: 17)\n  2086: t2 = u64 [s1 + 0x128]\n  2090: t0 = u64 [s1 + 0x108]\n  2094: a0 = t2 | t0\n  2097: ra = u64 [s1 + 0x120]\n  2101: a1 = u64 [s1 + 0x100]\n  2105: a3 = ra | a1\n  2108: t1 = u64 [s1 + 0x130]\n  2112: a1 = s1 + 0x100\n  2116: a2 = u64 [a1 + 0x10]\n  2119: a2 = t1 | a2\n  2122: a5 = a3 | a2\n  2125: a3 = u64 [a1 + 0x38]\n  2128: a4 = u64 [a1 + 0x18]\n  2131: a2 = a3 | a4\n  2134: a0 = a0 | a2\n  2137: a0 = a0 | a5\n  2140: jump @66 if a0 != 0\n      : @65 (gas: 1)\n  2143: jump @202\n      : @66 (gas: 15)\n  2146: a0 = 0xffffffff\n  2156: u64 [s1 + 0xd8] = a0\n  2160: t0 = s1 + 0x18d8\n  2164: a0 = u64 [t0 + 0x590]\n  2168: u64 [s1 + 0xe8] = a0\n  2172: a0 = u64 [t0 + 0x588]\n  2176: u64 [s1 + 0xf0] = a0\n  2180: a0 = u64 [s1 + 0xf8]\n  2184: a0 = a0 << 0x20\n  2187: a0 = a0 >> 0x20\n  2190: u64 [s1 + 0xe0] = a0\n  2194: a0 = 0xffffffffffff\n  2204: u64 [s1 + 0xc8] = a0\n  2208: a0 = s1 + 0x1880\n  2212: ra = 46, jump @560\n      : @67 [@dyn 23] (gas: 42)\n  2217: a3 = s1 + 0x10b8\n  2221: a1 = a3 + 0x700\n  2225: a0 = u64 [a1 + 0xd0]\n  2229: a2 = u64 [a1 + 0xc8]\n  2233: a4 = u64 [a1 + 0xe8]\n  2237: t1 = u64 [a3 + 0x7f0]\n  2241: t0 = a3\n  2243: a5 = u64 [s1 + 0xc8]\n  2247: a3 = a0 & a5\n  2250: u64 [s1 + 0xa8] = a2\n  2254: a0 = u64 [s1 + 0x120]\n  2258: a0 = a0 <u a2\n  2261: a2 = u64 [s1 + 0x128]\n  2265: a1 = a2 ^ a3\n  2268: u64 [s1 + 0xa0] = a3\n  2272: a3 = a2 <u a3\n  2275: a3 = a0 if a1 == 0\n  2278: a2 = t1 & a5\n  2281: u64 [s1 + 0x98] = a4\n  2285: a5 = s1 + 0x100\n  2289: a0 = u64 [a5]\n  2291: a0 = a0 <u a4\n  2294: a4 = u64 [a5 + 0x8]\n  2297: a1 = a4 ^ a2\n  2300: u64 [s1 + 0x90] = a2\n  2304: a2 = a4 <u a2\n  2307: a2 = a0 if a1 == 0\n  2310: a0 = u64 [a5 + 0x38]\n  2313: a1 = u64 [a5 + 0x30]\n  2316: a0 = a0 | a1\n  2319: a3 = 0 if a0 != 0\n  2321: a0 = u64 [a5 + 0x18]\n  2324: a1 = u64 [a5 + 0x10]\n  2327: a0 = a0 | a1\n  2330: a2 = 0 if a0 != 0\n  2332: a2 = a2 & a3\n  2335: u64 [t0 + 1984] = 0\n  2339: u64 [t0 + 1976] = 0\n  2343: u64 [t0 + 0x7a8] = a2\n  2347: a0 = s1 + 0x1860\n  2351: u64 [t0 + 1968] = 0\n  2355: ra = 48, jump @621\n      : @68 [@dyn 24] (gas: 8)\n  2360: a0 = s1 + 0x18d8\n  2364: u64 [a0 + 1472] = 0\n  2368: u64 [a0 + 1464] = 0\n  2372: u64 [a0 + 1456] = 0\n  2376: u64 [a0 + 1448] = 0\n  2380: a0 = s1 + 0x1840\n  2384: a1 = s1 + 0x1e80\n  2388: ra = 50, jump @6\n      : @69 [@dyn 25] (gas: 21)\n  2393: t0 = u64 [s1 + 0xe0]\n  2397: a3 = u64 [s1 + 0xe8]\n  2401: a2 = u64 [s1 + 0xf0]\n  2405: a4 = s1 + 0x10b8\n  2409: a0 = u64 [a4 + 0x790]\n  2413: a1 = u64 [a4 + 0x788]\n  2417: a5 = u64 [a4 + 0x798]\n  2421: u64 [s1 + 0xb8] = a0\n  2425: a4 = 0xffffffffffffffff\n  2428: a0 = a0 & a4\n  2431: u64 [s1 + 0xc0] = a1\n  2435: a1 = a1 & a4\n  2438: a1 = a1 ^ a2\n  2441: a0 = a0 ^ a3\n  2444: a0 = a0 | a1\n  2447: u64 [s1 + 0xb0] = a5\n  2451: a1 = u64 [s1 + 0xd8]\n  2455: a1 = a1 & a5\n  2458: a1 = t0 ^ a1\n  2461: a0 = a0 | a1\n  2464: jump @73 if a0 == 0\n      : @70 (gas: 8)\n  2467: a1 = s1 + 0x18d8\n  2471: u64 [a1 + 1504] = 0\n  2475: u64 [a1 + 1496] = 0\n  2479: u64 [a1 + 1488] = 0\n  2483: u64 [a1 + 1480] = 0x1\n  2488: a0 = s1 + 0x1820\n  2492: a1 = s1 + 0x1ea0\n  2496: ra = 52, jump @6\n      : @71 [@dyn 26] (gas: 18)\n  2501: a2 = s1 + 0x10b8\n  2505: a3 = a2 + 0x700\n  2509: a0 = u64 [a3 + 0x70]\n  2512: a1 = u64 [a3 + 0x68]\n  2515: a2 = u64 [a3 + 0x78]\n  2518: a0 = a0 & 0xffffffffffffffff\n  2521: a1 = a1 & 0xffffffffffffffff\n  2524: a3 = u64 [s1 + 0xd8]\n  2528: a2 = a2 & a3\n  2531: a3 = u64 [s1 + 0xe0]\n  2535: a2 = a2 ^ a3\n  2538: a3 = u64 [s1 + 0xf0]\n  2542: a1 = a1 ^ a3\n  2545: a3 = u64 [s1 + 0xe8]\n  2549: a0 = a0 ^ a3\n  2552: a0 = a0 | a1\n  2555: a0 = a0 | a2\n  2558: jump @73 if a0 == 0\n      : @72 (gas: 1)\n  2561: jump @227\n      : @73 (gas: 4)\n  2564: a0 = s1 + 0x7ff\n  2568: a0 = a0 + 0x3c1\n  2572: a1 = 0x40\n  2575: ra = 54, jump @2\n      : @74 [@dyn 27] (gas: 15)\n  2580: a2 = s1 + 0x7ff\n  2584: a2 = a2 + 0xb9\n  2588: t0 = u64 [a2 + 0x320]\n  2592: a1 = a2 + 0x300\n  2596: a5 = u64 [a1 + 0x18]\n  2599: a4 = u64 [a1 + 0x10]\n  2602: a0 = u64 [a1 + 0x8]\n  2605: a3 = a4 | t0\n  2608: a1 = a0 | a5\n  2611: a1 = a1 | a3\n  2614: a1 = a1 >> 0x20\n  2617: a3 = a3 | a5\n  2620: a3 = a3 << 0x20\n  2623: a1 = a1 | a3\n  2626: jump @76 if a1 == 0\n      : @75 (gas: 1)\n  2629: jump @201\n      : @76 (gas: 12)\n  2632: u64 [a2 + 760] = 0\n  2636: u64 [a2 + 752] = 0\n  2640: u64 [a2 + 744] = 0\n  2644: a3 = 0x8c379a000000000\n  2654: a1 = s1 + 0x7ff\n  2658: a1 = a1 + 0x3a1\n  2662: u64 [a2 + 0x300] = a3\n  2666: u64 [s1 + 0x138] = a0\n  2670: u64 [s1 + 0x130] = a4\n  2674: u64 [s1 + 0x120] = t0\n  2678: u64 [s1 + 0x128] = a5\n  2682: ra = 56, jump @4\n      : @77 [@dyn 28] (gas: 1)\n  2687: t0 = 58, jump @664\n      : @78 [@dyn 29] (gas: 1)\n  2692: jump @80 if a0 != 0\n      : @79 (gas: 1)\n  2695: jump @201\n      : @80 (gas: 12)\n  2698: i32 a0 = a1 + 0x4\n  2701: a2 = s1 + 0x7ff\n  2705: a2 = a2 + 0xb9\n  2709: u64 [a2 + 736] = 0\n  2713: u64 [a2 + 728] = 0\n  2717: u64 [a2 + 712] = 0x20\n  2722: a1 = s1 + 0x7ff\n  2726: a1 = a1 + 0x381\n  2730: u64 [a2 + 720] = 0\n  2734: u64 [s1 + 0x128] = a3\n  2738: u64 [s1 + 0x120] = a4\n  2742: ra = 60, jump @4\n      : @81 [@dyn 30] (gas: 10)\n  2747: a4 = s1 + 0x100\n  2751: a3 = u64 [a4 + 0x28]\n  2754: a2 = u64 [a4 + 0x30]\n  2757: a1 = u64 [a4 + 0x38]\n  2760: a0 = u64 [a4 + 0x20]\n  2763: a0 = a0 + 0xffffffffffffffdc\n  2766: a0 = a1 <u a0\n  2769: a0 = 0 if a2 != 0\n  2771: a0 = 0 if a3 != 0\n  2773: jump @201 if a0 == 0\n      : @82 (gas: 10)\n  2777: i32 a0 = a1 + 0x24\n  2780: a3 = s1 + 0x7ff\n  2784: a3 = a3 + 0xb9\n  2788: u64 [a3 + 704] = 0\n  2792: u64 [a3 + 696] = 0\n  2796: u64 [a3 + 680] = 0xa\n  2801: a1 = s1 + 0x7ff\n  2805: a1 = a1 + 0x361\n  2809: u64 [a3 + 688] = 0\n  2813: ra = 62, jump @4\n      : @83 [@dyn 31] (gas: 9)\n  2818: a3 = s1 + 0x100\n  2822: a2 = u64 [a3 + 0x38]\n  2825: a0 = 0xffffffbc\n  2835: a0 = a2 <u a0\n  2838: a1 = u64 [a3 + 0x30]\n  2841: a0 = 0 if a1 != 0\n  2843: a1 = u64 [a3 + 0x28]\n  2846: a0 = 0 if a1 != 0\n  2848: jump @201 if a0 == 0\n      : @84 (gas: 13)\n  2852: i32 a0 = a2 + 0x44\n  2855: a1 = u64 [0x20060]\n  2860: a3 = s1 + 0x7ff\n  2864: a3 = a3 + 0xb9\n  2868: u64 [a3 + 656] = 0\n  2872: u64 [a3 + 0x2a0] = a1\n  2876: a1 = 0x544f000000000000\n  2886: u64 [a3 + 0x298] = a1\n  2890: a1 = s1 + 0x7ff\n  2894: a1 = a1 + 0x341\n  2898: u64 [a3 + 648] = 0\n  2902: ra = 0xb8\n  2906: jump @4\n      : @85 (gas: 10)\n  2909: u64 [a2 + 544] = 0\n  2913: u64 [a2 + 536] = 0\n  2917: u64 [a2 + 528] = 0\n  2921: u64 [a2 + 520] = 0\n  2925: a0 = s1 + 0x2000\n  2929: i32 a0 = a0 + 0xfffffffffffffae0\n  2933: ra = 0x40\n  2936: ecalli 15 // 'value_transferred'\n  2938: t0 = 0x42\n  2941: jump @678\n      : @86 [@dyn 32] (gas: 1)\n  2944: t0 = 66, jump @678\n      : @87 [@dyn 33] (gas: 8)\n  2949: a0 = u64 [a4 + 0x18]\n  2952: a1 = u64 [a4 + 0x20]\n  2955: a2 = u64 [a4 + 0x10]\n  2958: a3 = u64 [a4 + 0x8]\n  2961: a1 = a1 | a2\n  2964: a0 = a0 | a3\n  2967: a0 = a0 | a1\n  2970: jump @89 if a0 == 0\n      : @88 (gas: 1)\n  2973: jump @489\n      : @89 (gas: 3)\n  2976: a0 = u64 [s1 + 0x138]\n  2980: a0 = i32 [a0]\n  2982: jump @91 if a0 >u 3\n      : @90 (gas: 1)\n  2986: jump @490\n      : @91 (gas: 8)\n  2989: a0 = s1 + 0x18d8\n  2993: u64 [a0 + 576] = 0\n  2997: u64 [a0 + 568] = 0\n  3001: u64 [a0 + 560] = 0\n  3005: u64 [a0 + 552] = 0\n  3009: a0 = s1 + 0x200\n  3013: a1 = s1 + 0x1b00\n  3017: ra = 68, jump @6\n      : @92 [@dyn 34] (gas: 10)\n  3022: a1 = s1 + 0x200\n  3026: a0 = u64 [a1 + 0x10]\n  3029: u64 [s1 + 0x128] = a0\n  3033: a0 = u64 [a1 + 0x8]\n  3036: u64 [s1 + 0x138] = a0\n  3040: a0 = u64 [a1]\n  3042: u64 [s1 + 0x130] = a0\n  3046: a0 = s1 + 0x1e0\n  3050: a1 = 0x40\n  3053: ra = 70, jump @2\n      : @93 [@dyn 35] (gas: 13)\n  3058: a4 = s1 + 0x100\n  3062: a3 = u64 [a4 + 0xf8]\n  3066: a1 = u64 [a4 + 0xf0]\n  3070: a2 = u64 [a4 + 0xe8]\n  3074: a0 = u64 [a4 + 0xe0]\n  3078: a3 = a3 | a2\n  3081: a2 = a0 | a1\n  3084: a2 = a2 | a3\n  3087: a2 = a2 >> 0x20\n  3090: a1 = a1 | a3\n  3093: a1 = a1 << 0x20\n  3096: a1 = a1 | a2\n  3099: jump @201 if a1 != 0\n      : @94 (gas: 14)\n  3103: a3 = s1 + 0x100\n  3107: a1 = u64 [a3 + 0x28]\n  3110: a1 = a1 << 0x20\n  3113: a2 = a1 >> 0x20\n  3116: u64 [s1 + 472] = 0\n  3120: a1 = u64 [a3 + 0x30]\n  3123: u64 [a3 + 0xc0] = a1\n  3127: a1 = u64 [a3 + 0x38]\n  3130: u64 [a3 + 0xc8] = a1\n  3134: a1 = s1 + 0x1c0\n  3138: u64 [a3 + 0xd0] = a2\n  3142: u64 [s1 + 0x138] = a0\n  3146: ra = 0x1d6\n  3150: jump @4\n      : @95 (gas: 10)\n  3153: u64 [a2 + 672] = 0\n  3157: u64 [a2 + 664] = 0\n  3161: u64 [a2 + 656] = 0\n  3165: u64 [a2 + 648] = 0\n  3169: a0 = s1 + 0x2000\n  3173: i32 a0 = a0 + 0xfffffffffffffb60\n  3177: ra = 0x48\n  3180: ecalli 15 // 'value_transferred'\n  3182: t0 = 0x4a\n  3185: jump @678\n      : @96 [@dyn 36] (gas: 1)\n  3188: t0 = 74, jump @678\n      : @97 [@dyn 37] (gas: 8)\n  3193: a0 = u64 [a4 + 0x98]\n  3197: a1 = u64 [a4 + 0xa0]\n  3201: a2 = u64 [a4 + 0x90]\n  3205: a3 = u64 [a4 + 0x88]\n  3209: a1 = a1 | a2\n  3212: a0 = a0 | a3\n  3215: a0 = a0 | a1\n  3218: jump @99 if a0 == 0\n      : @98 (gas: 1)\n  3221: jump @491\n      : @99 (gas: 3)\n  3224: a0 = u64 [s1 + 0x138]\n  3228: a0 = i32 [a0]\n  3230: jump @101 if a0 >u 35\n      : @100 (gas: 1)\n  3234: jump @492\n      : @101 (gas: 3)\n  3237: a0 = s1 + 0x7ff\n  3241: a0 = a0 + 0x321\n  3245: ra = 76, jump @554\n      : @102 [@dyn 38] (gas: 12)\n  3250: a1 = s1 + 0x7ff\n  3254: a1 = a1 + 0xb9\n  3258: a2 = a1 + 0x200\n  3262: a0 = u64 [a2 + 0x78]\n  3265: u64 [s1 + 0xd8] = a0\n  3269: a0 = u64 [a2 + 0x70]\n  3272: u64 [s1 + 0xe0] = a0\n  3276: a0 = u64 [a2 + 0x68]\n  3279: u64 [s1 + 0xe8] = a0\n  3283: a0 = s1 + 0x7ff\n  3287: a0 = a0 + 0x2e1\n  3291: ra = 78, jump @560\n      : @103 [@dyn 39] (gas: 20)\n  3296: a1 = s1 + 0x7ff\n  3300: a1 = a1 + 0xb9\n  3304: a2 = a1 + 0x200\n  3308: a0 = u64 [a2 + 0x30]\n  3311: u64 [s1 + 0xc8] = a0\n  3315: a0 = u64 [a2 + 0x28]\n  3318: u64 [s1 + 0xf8] = a0\n  3322: a0 = u64 [a2 + 0x50]\n  3325: u64 [s1 + 0xd0] = a0\n  3329: a0 = u64 [a2 + 0x48]\n  3332: u64 [s1 + 0x100] = a0\n  3336: a0 = s1 + 0x18d8\n  3340: u64 [a0 + 704] = 0\n  3344: u64 [a0 + 696] = 0\n  3348: u64 [a0 + 688] = 0\n  3352: u64 [a0 + 680] = 0\n  3356: a0 = s1 + 0x7ff\n  3360: a0 = a0 + 0x2c1\n  3364: a1 = s1 + 0x1b80\n  3368: ra = 80, jump @6\n      : @104 [@dyn 40] (gas: 14)\n  3373: a1 = s1 + 0x7ff\n  3377: a1 = a1 + 0xb9\n  3381: a2 = a1 + 0x200\n  3385: a0 = u64 [a2 + 0x18]\n  3388: a1 = s1 + 0x100\n  3392: u64 [a1 + 0x28] = a0\n  3395: a0 = u64 [a2 + 0x10]\n  3398: u64 [a1 + 0x20] = a0\n  3401: a0 = u64 [a2 + 0x8]\n  3404: u64 [a1 + 0x30] = a0\n  3407: a0 = s1 + 0x7ff\n  3411: a0 = a0 + 0x2a1\n  3415: a1 = 0x40\n  3418: ra = 82, jump @2\n      : @105 [@dyn 41] (gas: 15)\n  3423: a2 = s1 + 0x7ff\n  3427: a2 = a2 + 0xb9\n  3431: t0 = u64 [a2 + 0x200]\n  3435: a1 = a2 + 0x100\n  3439: a5 = u64 [a1 + 0xf8]\n  3443: a4 = u64 [a1 + 0xf0]\n  3447: a0 = u64 [a1 + 0xe8]\n  3451: a3 = a4 | t0\n  3454: a1 = a0 | a5\n  3457: a1 = a1 | a3\n  3460: a1 = a1 >> 0x20\n  3463: a3 = a3 | a5\n  3466: a3 = a3 << 0x20\n  3469: a1 = a1 | a3\n  3472: jump @201 if a1 != 0\n      : @106 (gas: 12)\n  3476: u64 [a2 + 472] = 0\n  3480: u64 [a2 + 464] = 0\n  3484: u64 [a2 + 456] = 0\n  3488: a3 = 0x70a0823100000000\n  3498: a1 = s1 + 0x7ff\n  3502: a1 = a1 + 0x281\n  3506: u64 [a2 + 0x1e0] = a3\n  3510: u64 [s1 + 0x138] = a0\n  3514: u64 [s1 + 0x118] = t0\n  3518: u64 [s1 + 0x110] = a5\n  3522: u64 [s1 + 0x108] = a4\n  3526: ra = 84, jump @4\n      : @107 [@dyn 42] (gas: 7)\n  3531: a0 = 0x300b0\n  3536: u64 [s1 + 0xf0] = a0\n  3540: i32 a0 = a0 + 0\n  3542: u64 [s1 + 0xc0] = a0\n  3546: ra = 0x56\n  3549: ecalli 0 // 'address'\n  3550: fallthrough\n      : @108 [@dyn 43] (gas: 4)\n  3551: a3 = s1 + 0x100\n  3555: a4 = u64 [a3 + 0x38]\n  3558: a0 = u64 [a3 + 0x18]\n  3561: t0 = 88, jump @672\n      : @109 [@dyn 44] (gas: 1)\n  3566: jump @201 if a1 == 0\n      : @110 (gas: 5)\n  3570: a2 = u64 [s1 + 0xf0]\n  3574: a1 = u64 [a2 + 0x8]\n  3577: a0 = 0x2400000000\n  3587: u64 [s1 + 0xb8] = a0\n  3591: t0 = 90, jump @662\n      : @111 [@dyn 45] (gas: 10)\n  3596: a5 = s1 + 0x7ff\n  3600: a5 = a5 + 0xb9\n  3604: u64 [a5 + 448] = 0\n  3608: a4 = a5 + 0x100\n  3612: u64 [a4 + 0xb8] = a2\n  3616: u64 [a4 + 0xb0] = a1\n  3620: a1 = s1 + 0x7ff\n  3624: a1 = a1 + 0x261\n  3628: u64 [a4 + 0xa8] = a3\n  3632: ra = 92, jump @4\n      : @112 [@dyn 46] (gas: 3)\n  3637: ra = 0x5e\n  3640: ecalli 9 // 'ref_time_left'\n  3642: fallthrough\n      : @113 [@dyn 47] (gas: 9)\n  3643: a0 = u64 [s1 + 0x120]\n  3647: a0 = reverse a0\n  3649: a1 = a0 << 0x20\n  3652: a2 = u64 [s1 + 0x128]\n  3656: a2 = reverse a2\n  3658: a2 = a2 >> 0x20\n  3661: a1 = a1 | a2\n  3664: a2 = u64 [s1 + 0x130]\n  3668: t0 = 96, jump @666\n      : @114 [@dyn 48] (gas: 7)\n  3673: u64 [a0 + 736] = 0\n  3677: u64 [a0 + 728] = 0\n  3681: u64 [a0 + 720] = 0\n  3685: u64 [a0 + 712] = 0\n  3689: a1 = 0x24\n  3692: a0 = u64 [s1 + 0x138]\n  3696: ra = 98, jump @12\n      : @115 [@dyn 49] (gas: 4)\n  3701: u64 [s1 + 0x130] = a0\n  3705: a1 = 0x20\n  3708: a0 = u64 [s1 + 0x138]\n  3712: ra = 100, jump @12\n      : @116 [@dyn 50] (gas: 33)\n  3717: a1 = s1 + 0x18d8\n  3721: u32 [a1 + 744] = 0x20\n  3726: u64 [a1 + 800] = 0\n  3730: u64 [a1 + 792] = 0\n  3734: u64 [a1 + 784] = 0\n  3738: u64 [a1 + 776] = 0\n  3742: a1 = u64 [s1 + 0xf0]\n  3746: a1 = a1 << 0x20\n  3749: a1 = a1 >> 0x20\n  3752: a2 = 0x1800000000\n  3762: t0 = a1 | a2\n  3765: a1 = s1 + 0x1ba0\n  3769: a1 = a1 << 0x20\n  3772: a1 = a1 >> 0x20\n  3775: a2 = s1 + 0x1be0\n  3779: a2 = a2 << 0x20\n  3782: a3 = a2 | a1\n  3785: a1 = u64 [s1 + 0x130]\n  3789: a1 = a1 << 0x20\n  3792: a1 = a1 >> 0x20\n  3795: a4 = u64 [s1 + 0xb8]\n  3799: a4 = a4 | a1\n  3802: a0 = a0 << 0x20\n  3805: a0 = a0 >> 0x20\n  3808: a1 = s1 + 0x1bc0\n  3812: a1 = a1 << 0x20\n  3815: a5 = a1 | a0\n  3818: a1 = 0xffffffffffffffff\n  3821: a2 = 0xffffffffffffffff\n  3824: u64 [s1 + 0x130] = t0\n  3828: a0 = t0\n  3830: ecalli 1 // 'call'\n  3832: fallthrough\n      : @117 (gas: 1)\n  3833: jump @214 if a0 != 0\n      : @118 (gas: 2)\n  3837: ecalli 11 // 'return_data_size'\n  3839: fallthrough\n      : @119 (gas: 2)\n  3840: a5 = 0x20\n  3843: jump @121 if a0 >=u a5\n      : @120 (gas: 3)\n  3846: ecalli 11 // 'return_data_size'\n  3848: a5 = a0\n  3850: fallthrough\n      : @121 (gas: 22)\n  3851: a2 = s1 + 0x7ff\n  3855: a2 = a2 + 0xb9\n  3859: a3 = u64 [s1 + 0x138]\n  3863: t0 = u64 [s1 + 0x118]\n  3867: a0 = u64 [s1 + 0x110]\n  3871: a1 = u64 [s1 + 0x108]\n  3875: u64 [s1 + 288] = 0\n  3879: u64 [s1 + 0x128] = a5\n  3883: a4 = a2 + 0x100\n  3887: u64 [a4 + 0x48] = a5\n  3890: u64 [a4 + 0x68] = a3\n  3893: u64 [a2 + 336] = 0\n  3897: u64 [a4 + 0x70] = a1\n  3900: u64 [a2 + 344] = 0\n  3904: u64 [a4 + 0x78] = a0\n  3907: u64 [a2 + 352] = 0\n  3911: a0 = s1 + 0x7ff\n  3915: a0 = a0 + 0x221\n  3919: a1 = s1 + 0x7ff\n  3923: a1 = a1 + 0x201\n  3927: u64 [a2 + 0x180] = t0\n  3931: ra = 102, jump @563\n      : @122 [@dyn 51] (gas: 4)\n  3936: a3 = u64 [s1 + 0x120]\n  3940: a0 = a3 >u 0\n  3942: a1 = u64 [s1 + 0x128]\n  3946: t0 = 104, jump @658\n      : @123 [@dyn 52] (gas: 1)\n  3951: jump @125 if a2 != 0\n      : @124 (gas: 1)\n  3954: jump @511\n      : @125 (gas: 4)\n  3957: a0 = s1 + 0x7ff\n  3961: a0 = a0 + 0x1e1\n  3965: a1 = u64 [s1 + 0x138]\n  3969: ra = 106, jump @2\n      : @126 [@dyn 53] (gas: 20)\n  3974: a1 = s1 + 0x7ff\n  3978: a1 = a1 + 0xb9\n  3982: a2 = a1 + 0x100\n  3986: a0 = u64 [a2 + 0x40]\n  3989: u64 [s1 + 0x98] = a0\n  3993: a0 = u64 [a2 + 0x38]\n  3996: u64 [s1 + 0xa0] = a0\n  4000: a0 = u64 [a2 + 0x30]\n  4003: u64 [s1 + 0xb0] = a0\n  4007: a0 = u64 [a2 + 0x28]\n  4010: u64 [s1 + 0xa8] = a0\n  4014: a0 = s1 + 0x18d8\n  4018: u64 [a0 + 864] = 0\n  4022: u64 [a0 + 856] = 0\n  4026: u64 [a0 + 848] = 0\n  4030: u64 [a0 + 840] = 0x1\n  4035: a0 = s1 + 0x7ff\n  4039: a0 = a0 + 0x1c1\n  4043: a1 = s1 + 0x1c20\n  4047: ra = 108, jump @6\n      : @127 [@dyn 54] (gas: 14)\n  4052: a1 = s1 + 0x7ff\n  4056: a1 = a1 + 0xb9\n  4060: a2 = a1 + 0x100\n  4064: a0 = u64 [a2 + 0x18]\n  4067: a1 = s1 + 0x100\n  4071: u64 [a1 + 0x20] = a0\n  4074: a0 = u64 [a2 + 0x10]\n  4077: u64 [a1 + 0x18] = a0\n  4080: a0 = u64 [a2 + 0x8]\n  4083: u64 [a1 + 0x28] = a0\n  4086: a0 = s1 + 0x7ff\n  4090: a0 = a0 + 0x1a1\n  4094: a1 = 0x40\n  4097: ra = 110, jump @2\n      : @128 [@dyn 55] (gas: 15)\n  4102: t0 = s1 + 0x7ff\n  4106: t0 = t0 + 0xb9\n  4110: a3 = u64 [t0 + 0x100]\n  4114: a1 = t0\n  4116: a4 = u64 [a1 + 0xf8]\n  4120: a5 = u64 [a1 + 0xf0]\n  4124: a0 = u64 [a1 + 0xe8]\n  4128: a2 = a5 | a3\n  4131: a1 = a0 | a4\n  4134: a1 = a1 | a2\n  4137: a1 = a1 >> 0x20\n  4140: a2 = a2 | a4\n  4143: a2 = a2 << 0x20\n  4146: a1 = a1 | a2\n  4149: jump @201 if a1 != 0\n      : @129 (gas: 12)\n  4153: u64 [t0 + 216] = 0\n  4157: u64 [t0 + 208] = 0\n  4161: u64 [t0 + 200] = 0\n  4165: u64 [s1 + 0x90] = a3\n  4169: a3 = 0x70a0823100000000\n  4179: a1 = s1 + 0x7ff\n  4183: a1 = a1 + 0x181\n  4187: u64 [t0 + 0xe0] = a3\n  4191: u64 [s1 + 0x138] = a0\n  4195: u64 [s1 + 0x110] = a4\n  4199: u64 [s1 + 0x108] = a5\n  4203: ra = 112, jump @4\n      : @130 [@dyn 56] (gas: 4)\n  4208: a0 = u64 [s1 + 0xc0]\n  4212: ra = 0x72\n  4215: ecalli 0 // 'address'\n  4216: fallthrough\n      : @131 [@dyn 57] (gas: 4)\n  4217: a3 = s1 + 0x100\n  4221: a4 = u64 [a3 + 0x38]\n  4224: a0 = u64 [s1 + 0x90]\n  4228: t0 = 116, jump @672\n      : @132 [@dyn 58] (gas: 1)\n  4233: jump @201 if a1 == 0\n      : @133 (gas: 2)\n  4237: a2 = u64 [s1 + 0xf0]\n  4241: t0 = 118, jump @663\n      : @134 [@dyn 59] (gas: 9)\n  4246: a5 = s1 + 0x7ff\n  4250: a5 = a5 + 0xb9\n  4254: u64 [a5 + 192] = 0\n  4258: u64 [a5 + 0xb8] = a1\n  4262: u64 [a5 + 0xb0] = a2\n  4266: a1 = s1 + 0x7ff\n  4270: a1 = a1 + 0x161\n  4274: u64 [a5 + 0xa8] = a3\n  4278: ra = 120, jump @4\n      : @135 [@dyn 60] (gas: 3)\n  4283: ra = 0x7a\n  4286: ecalli 9 // 'ref_time_left'\n  4288: fallthrough\n      : @136 [@dyn 61] (gas: 9)\n  4289: a0 = u64 [s1 + 0x118]\n  4293: a0 = reverse a0\n  4295: a1 = a0 << 0x20\n  4298: a2 = u64 [s1 + 0x120]\n  4302: a2 = reverse a2\n  4304: a2 = a2 >> 0x20\n  4307: a1 = a1 | a2\n  4310: a2 = u64 [s1 + 0x128]\n  4314: t0 = 124, jump @666\n      : @137 [@dyn 62] (gas: 7)\n  4319: u64 [a0 + 896] = 0\n  4323: u64 [a0 + 888] = 0\n  4327: u64 [a0 + 880] = 0\n  4331: u64 [a0 + 872] = 0\n  4335: a1 = 0x24\n  4338: a0 = u64 [s1 + 0x138]\n  4342: ra = 126, jump @12\n      : @138 [@dyn 63] (gas: 4)\n  4347: u64 [s1 + 0x128] = a0\n  4351: a1 = 0x20\n  4354: a0 = u64 [s1 + 0x138]\n  4358: ra = 128, jump @12\n      : @139 [@dyn 64] (gas: 27)\n  4364: a1 = s1 + 0x18d8\n  4368: u32 [a1 + 904] = 0x20\n  4373: u64 [a1 + 960] = 0\n  4377: u64 [a1 + 952] = 0\n  4381: u64 [a1 + 944] = 0\n  4385: u64 [a1 + 936] = 0\n  4389: a1 = s1 + 0x1c40\n  4393: a1 = a1 << 0x20\n  4396: a1 = a1 >> 0x20\n  4399: a2 = s1 + 0x1c80\n  4403: a2 = a2 << 0x20\n  4406: a3 = a2 | a1\n  4409: a1 = u64 [s1 + 0x128]\n  4413: a1 = a1 << 0x20\n  4416: a1 = a1 >> 0x20\n  4419: a4 = u64 [s1 + 0xb8]\n  4423: a4 = a4 | a1\n  4426: a0 = a0 << 0x20\n  4429: a0 = a0 >> 0x20\n  4432: a1 = s1 + 0x1c60\n  4436: a1 = a1 << 0x20\n  4439: a5 = a1 | a0\n  4442: a1 = 0xffffffffffffffff\n  4445: a2 = 0xffffffffffffffff\n  4448: a0 = u64 [s1 + 0x130]\n  4452: ecalli 1 // 'call'\n  4454: fallthrough\n      : @140 (gas: 1)\n  4455: jump @142 if a0 == 0\n      : @141 (gas: 1)\n  4458: jump @328\n      : @142 (gas: 2)\n  4461: ecalli 11 // 'return_data_size'\n  4463: fallthrough\n      : @143 (gas: 2)\n  4464: a4 = 0x20\n  4467: jump @145 if a0 >=u a4\n      : @144 (gas: 3)\n  4470: ecalli 11 // 'return_data_size'\n  4472: a4 = a0\n  4474: fallthrough\n      : @145 (gas: 21)\n  4475: a2 = s1 + 0x7ff\n  4479: a2 = a2 + 0xb9\n  4483: a3 = u64 [s1 + 0x138]\n  4487: a0 = u64 [s1 + 0x110]\n  4491: a1 = u64 [s1 + 0x108]\n  4495: u64 [s1 + 296] = 0\n  4499: u64 [s1 + 0x130] = a4\n  4503: u64 [a2 + 0x48] = a4\n  4506: u64 [a2 + 0x68] = a3\n  4509: u64 [a2 + 80] = 0\n  4512: u64 [a2 + 0x70] = a1\n  4515: u64 [a2 + 88] = 0\n  4518: u64 [a2 + 0x78] = a0\n  4521: u64 [a2 + 96] = 0\n  4524: a0 = s1 + 0x7ff\n  4528: a0 = a0 + 0x121\n  4532: a1 = s1 + 0x7ff\n  4536: a1 = a1 + 0x101\n  4540: a4 = u64 [s1 + 0x90]\n  4544: u64 [a2 + 0x80] = a4\n  4548: ra = 130, jump @563\n      : @146 [@dyn 65] (gas: 4)\n  4554: a3 = u64 [s1 + 0x128]\n  4558: a0 = a3 >u 0\n  4560: a1 = u64 [s1 + 0x130]\n  4564: t0 = 132, jump @658\n      : @147 [@dyn 66] (gas: 1)\n  4570: jump @149 if a2 != 0\n      : @148 (gas: 1)\n  4573: jump @519\n      : @149 (gas: 6)\n  4576: a0 = 0xffffffffffff\n  4586: u64 [s1 + 0xb8] = a0\n  4590: a0 = s1 + 0x7ff\n  4594: a0 = a0 + 0xe1\n  4598: a1 = u64 [s1 + 0x138]\n  4602: ra = 134, jump @2\n      : @150 [@dyn 67] (gas: 40)\n  4608: a2 = s1 + 0x7ff\n  4612: a2 = a2 + 0xb9\n  4616: a0 = u64 [a2 + 0x40]\n  4619: u64 [s1 + 0x130] = a0\n  4623: a0 = u64 [a2 + 0x38]\n  4626: u64 [s1 + 0x138] = a0\n  4630: a0 = u64 [a2 + 0x30]\n  4633: u64 [s1 + 0x90] = a0\n  4637: a0 = u64 [a2 + 0x28]\n  4640: u64 [s1 + 0x88] = a0\n  4644: a0 = u64 [s1 + 0xc8]\n  4648: a1 = u64 [s1 + 0xb8]\n  4652: a0 = a0 & a1\n  4655: a1 = s1 + 0x1000\n  4659: u64 [a1 + 4294965400] = 0\n  4663: a1 = s1 + 0x1000\n  4667: u64 [a1 + 4294965392] = 0\n  4671: u64 [s1 + 0x128] = a0\n  4675: a1 = s1 + 0x1000\n  4679: u64 [a1 + 0xfffffffffffff888] = a0\n  4683: a0 = u64 [s1 + 0xf8]\n  4687: a1 = s1 + 0x1000\n  4691: u64 [a1 + 0xfffffffffffff880] = a0\n  4695: a0 = u64 [s1 + 0x98]\n  4699: u64 [a2] = a0\n  4701: a0 = u64 [s1 + 0xa0]\n  4705: u64 [a2 + 0xfffffffffffffff8] = a0\n  4708: a0 = u64 [s1 + 0xb0]\n  4712: a1 = s1 + 0x1000\n  4716: u64 [a1 + 0xfffffffffffff8a8] = a0\n  4720: a0 = s1 + 0x7ff\n  4724: a0 = a0 + 0xc1\n  4728: a1 = s1 + 0x7ff\n  4732: a1 = a1 + 0xa1\n  4736: a2 = s1 + 0x7ff\n  4740: a2 = a2 + 0x81\n  4744: a3 = u64 [s1 + 0xa8]\n  4748: a4 = s1 + 0x1000\n  4752: u64 [a4 + 0xfffffffffffff8a0] = a3\n  4756: ra = 136, jump @573\n      : @151 [@dyn 68] (gas: 43)\n  4762: a1 = s1 + 0x7ff\n  4766: a1 = a1 + 0xb9\n  4770: a0 = u64 [a1 + 0x20]\n  4773: u64 [s1 + 0xc8] = a0\n  4777: a0 = u64 [a1 + 0x18]\n  4780: u64 [s1 + 0xa0] = a0\n  4784: a0 = u64 [a1 + 0x10]\n  4787: u64 [s1 + 0x98] = a0\n  4791: a0 = u64 [a1 + 0x8]\n  4794: u64 [s1 + 0x80] = a0\n  4798: a0 = u64 [s1 + 0xd0]\n  4802: a1 = u64 [s1 + 0xb8]\n  4806: a0 = a0 & a1\n  4809: a1 = s1 + 0x1000\n  4813: u64 [a1 + 4294965304] = 0\n  4817: a1 = s1 + 0x1000\n  4821: u64 [a1 + 4294965296] = 0\n  4825: a2 = s1 + 0x100\n  4829: u64 [a2 + 0x18] = a0\n  4832: a1 = s1 + 0x1000\n  4836: u64 [a1 + 0xfffffffffffff828] = a0\n  4840: a0 = u64 [a2]\n  4842: a1 = s1 + 0x1000\n  4846: u64 [a1 + 0xfffffffffffff820] = a0\n  4850: a0 = u64 [a2 + 0x30]\n  4853: a1 = s1 + 0x1000\n  4857: u64 [a1 + 0xfffffffffffff858] = a0\n  4861: a0 = u64 [a2 + 0x38]\n  4864: a1 = s1 + 0x1000\n  4868: u64 [a1 + 0xfffffffffffff850] = a0\n  4872: a0 = u64 [s1 + 0x90]\n  4876: a1 = s1 + 0x1000\n  4880: u64 [a1 + 0xfffffffffffff848] = a0\n  4884: a0 = s1 + 0x7ff\n  4888: a0 = a0 + 0x61\n  4891: a1 = s1 + 0x7ff\n  4895: a1 = a1 + 0x41\n  4898: a2 = s1 + 0x7ff\n  4902: a2 = a2 + 0x21\n  4905: a3 = u64 [s1 + 0x88]\n  4909: a4 = s1 + 0x1000\n  4913: u64 [a4 + 0xfffffffffffff840] = a3\n  4917: ra = 138, jump @573\n      : @152 [@dyn 69] (gas: 21)\n  4923: a0 = s1 + 0x1000\n  4927: a0 = u64 [a0 + 0xfffffffffffff878]\n  4931: u64 [s1 + 0xd0] = a0\n  4935: a0 = s1 + 0x1000\n  4939: a0 = u64 [a0 + 0xfffffffffffff870]\n  4943: u64 [s1 + 0x78] = a0\n  4946: a0 = s1 + 0x1000\n  4950: a0 = u64 [a0 + 0xfffffffffffff868]\n  4954: u64 [s1 + 0x70] = a0\n  4957: a0 = s1 + 0x1000\n  4961: a0 = u64 [a0 + 0xfffffffffffff860]\n  4965: u64 [s1 + 0x68] = a0\n  4968: a1 = s1 + 0x18d8\n  4972: u64 [a1 + 1024] = 0\n  4976: u64 [a1 + 1016] = 0\n  4980: u64 [a1 + 1008] = 0\n  4984: u64 [a1 + 1000] = 0x3\n  4989: a0 = s1 + 0x7ff\n  4993: a0 = a0 + 0x1\n  4996: a1 = s1 + 0x1cc0\n  5000: ra = 140, jump @6\n      : @153 [@dyn 70] (gas: 12)\n  5006: a0 = s1 + 0x1000\n  5010: a5 = u64 [a0 + 0xfffffffffffff818]\n  5014: a0 = s1 + 0x1000\n  5018: a4 = u64 [a0 + 0xfffffffffffff810]\n  5022: a0 = s1 + 0x1000\n  5026: a3 = u64 [a0 + 0xfffffffffffff808]\n  5030: a0 = s1 + 0x1000\n  5034: a2 = u64 [a0 + 0xfffffffffffff800]\n  5038: a0 = a3 | a5\n  5041: a1 = a2 | a4\n  5044: a0 = a0 | a1\n  5047: jump @155 if a0 == 0\n      : @154 (gas: 1)\n  5050: jump @338\n      : @155 (gas: 20)\n  5053: a0 = u64 [s1 + 0x68]\n  5056: u64 [s1 + 0x620] = a0\n  5060: a0 = u64 [s1 + 0x80]\n  5064: u64 [s1 + 0x640] = a0\n  5068: a0 = u64 [s1 + 0x70]\n  5071: u64 [s1 + 0x628] = a0\n  5075: a0 = u64 [s1 + 0x98]\n  5079: u64 [s1 + 0x648] = a0\n  5083: a0 = u64 [s1 + 0x78]\n  5086: u64 [s1 + 0x630] = a0\n  5090: a0 = u64 [s1 + 0xa0]\n  5094: u64 [s1 + 0x650] = a0\n  5098: a0 = u64 [s1 + 0xd0]\n  5102: u64 [s1 + 0x638] = a0\n  5106: a0 = s1 + 0x660\n  5110: a1 = s1 + 0x640\n  5114: a2 = s1 + 0x620\n  5118: a3 = u64 [s1 + 0xc8]\n  5122: u64 [s1 + 0x658] = a3\n  5126: ra = 142, jump @580\n      : @156 [@dyn 71] (gas: 9)\n  5132: a4 = u64 [s1 + 0x678]\n  5136: t1 = u64 [s1 + 0x670]\n  5140: t0 = u64 [s1 + 0x660]\n  5144: a5 = u64 [s1 + 0x668]\n  5148: a0 = t1 | a4\n  5151: a1 = t0 <u 0x4\n  5154: a1 = 0 if a5 != 0\n  5156: a1 = 0 if a0 != 0\n  5158: jump @158 if a1 == 0\n      : @157 (gas: 1)\n  5161: jump @520\n      : @158 (gas: 28)\n  5164: a0 = t1 >> 0x1\n  5167: a1 = a4 << 0x3f\n  5170: a0 = a0 | a1\n  5173: a1 = a5 >> 0x1\n  5176: a2 = t1 << 0x3f\n  5179: a1 = a1 | a2\n  5182: a2 = t0 >> 0x1\n  5185: a3 = a5 << 0x3f\n  5188: a2 = a2 | a3\n  5191: t2 = a4 >> 0x1\n  5194: a3 = a2 + 0x1\n  5197: a2 = a3 <u 0x1\n  5200: a1 = a1 + a2\n  5203: a2 = s1 + 0x100\n  5207: u64 [a2 + 0x30] = a3\n  5210: u64 [a2 + 0x28] = a1\n  5213: a1 = a1 | a3\n  5216: a1 = a1 <u 0x1\n  5219: a1 = a1 + a0\n  5222: u64 [a2 + 0x38] = a1\n  5225: a0 = a1 <u a0\n  5228: a0 = a0 + t2\n  5231: u64 [s1 + 0x100] = t0\n  5235: u64 [s1 + 0xf8] = a5\n  5239: u64 [s1 + 0x108] = t1\n  5243: u64 [a2 + 0x10] = a4\n  5246: a2 = a4\n  5248: fallthrough\n      : @159 (gas: 20)\n  5249: a1 = u64 [s1 + 0x130]\n  5253: ra = t0\n  5255: a4 = a1 <u t0\n  5258: a3 = u64 [s1 + 0x128]\n  5262: a1 = a3 ^ a5\n  5265: t2 = a5\n  5267: a3 = a3 <u a5\n  5270: a3 = a4 if a1 == 0\n  5273: a1 = u64 [s1 + 0x138]\n  5277: a4 = a1 <u t1\n  5280: a5 = a0 ^ a2\n  5283: t0 = t1\n  5285: t1 = a0\n  5287: u64 [s1 + 0x118] = a2\n  5291: a0 = a0 <u a2\n  5294: a0 = a4 if a5 == 0\n  5297: a4 = a1 ^ t0\n  5300: a4 = a4 | a5\n  5303: a0 = a3 if a4 == 0\n  5306: jump @161 if a0 != 0\n      : @160 (gas: 1)\n  5309: jump @343\n      : @161 (gas: 20)\n  5312: a0 = u64 [s1 + 0x130]\n  5316: u64 [s1 + 0x320] = a0\n  5320: a0 = u64 [s1 + 0x100]\n  5324: u64 [s1 + 0x340] = a0\n  5328: a0 = u64 [s1 + 0x128]\n  5332: u64 [s1 + 0x328] = a0\n  5336: a0 = u64 [s1 + 0xf8]\n  5340: u64 [s1 + 0x348] = a0\n  5344: a0 = u64 [s1 + 0x138]\n  5348: u64 [s1 + 0x330] = a0\n  5352: a0 = u64 [s1 + 0x108]\n  5356: u64 [s1 + 0x350] = a0\n  5360: u64 [s1 + 0x120] = t1\n  5364: u64 [s1 + 0x338] = t1\n  5368: a0 = s1 + 0x360\n  5372: a1 = s1 + 0x340\n  5376: a2 = s1 + 0x320\n  5380: a3 = u64 [s1 + 0x110]\n  5384: u64 [s1 + 0x358] = a3\n  5388: ra = 144, jump @588\n      : @162 [@dyn 72] (gas: 21)\n  5394: a3 = u64 [s1 + 0x360]\n  5398: a0 = u64 [s1 + 0x368]\n  5402: a1 = u64 [s1 + 0x370]\n  5406: a2 = u64 [s1 + 0x378]\n  5410: a4 = u64 [s1 + 0x120]\n  5414: a5 = s1 + 0x200\n  5418: u64 [a5 + 0xd8] = a4\n  5422: a4 = u64 [s1 + 0x138]\n  5426: u64 [a5 + 0xd0] = a4\n  5430: a4 = u64 [s1 + 0x128]\n  5434: u64 [a5 + 0xc8] = a4\n  5438: a4 = u64 [s1 + 0x130]\n  5442: u64 [a5 + 0xc0] = a4\n  5446: u64 [a5 + 0xf8] = a2\n  5450: u64 [a5 + 0xf0] = a1\n  5454: u64 [a5 + 0xe8] = a0\n  5458: a0 = s1 + 0x300\n  5462: a1 = s1 + 0x2e0\n  5466: a2 = s1 + 0x2c0\n  5470: u64 [a5 + 0xe0] = a3\n  5474: ra = 146, jump @613\n      : @163 [@dyn 73] (gas: 23)\n  5480: a4 = s1 + 0x300\n  5484: a0 = u64 [a4 + 0x18]\n  5487: a1 = u64 [a4 + 0x10]\n  5490: a2 = u64 [a4]\n  5492: a3 = u64 [a4 + 0x8]\n  5495: a4 = a0 << 0x3f\n  5498: a5 = a1 >> 0x1\n  5501: a4 = a4 | a5\n  5504: a1 = a1 << 0x3f\n  5507: a5 = a3 >> 0x1\n  5510: a1 = a1 | a5\n  5513: a3 = a3 << 0x3f\n  5516: a2 = a2 >> 0x1\n  5519: a3 = a3 | a2\n  5522: a0 = a0 >> 0x1\n  5525: t0 = u64 [s1 + 0x130]\n  5529: a5 = u64 [s1 + 0x128]\n  5533: t1 = u64 [s1 + 0x138]\n  5537: a2 = u64 [s1 + 0x120]\n  5541: u64 [s1 + 0x130] = a3\n  5545: u64 [s1 + 0x128] = a1\n  5549: u64 [s1 + 0x138] = a4\n  5553: jump @159\n      : @164 (gas: 10)\n  5556: u64 [a2 + 608] = 0\n  5560: u64 [a2 + 600] = 0\n  5564: u64 [a2 + 592] = 0\n  5568: u64 [a2 + 584] = 0\n  5572: a0 = s1 + 0x2000\n  5576: i32 a0 = a0 + 0xfffffffffffffb20\n  5580: ra = 0x94\n  5584: ecalli 15 // 'value_transferred'\n  5586: t0 = 0x96\n  5590: jump @678\n      : @165 [@dyn 74] (gas: 1)\n  5593: t0 = 150, jump @678\n      : @166 [@dyn 75] (gas: 8)\n  5599: a0 = u64 [a4 + 0x58]\n  5602: a1 = u64 [a4 + 0x60]\n  5605: a2 = u64 [a4 + 0x50]\n  5608: a3 = u64 [a4 + 0x48]\n  5611: a1 = a1 | a2\n  5614: a0 = a0 | a3\n  5617: a0 = a0 | a1\n  5620: jump @168 if a0 == 0\n      : @167 (gas: 1)\n  5623: jump @493\n      : @168 (gas: 3)\n  5626: a0 = u64 [s1 + 0x138]\n  5630: a1 = i32 [a0]\n  5632: jump @170 if a1 >u 3\n      : @169 (gas: 1)\n  5636: jump @494\n      : @170 (gas: 8)\n  5639: a1 = s1 + 0x18d8\n  5643: u64 [a1 + 640] = 0\n  5647: u64 [a1 + 632] = 0\n  5651: u64 [a1 + 624] = 0\n  5655: u64 [a1 + 616] = 0x3\n  5660: a0 = s1 + 0x260\n  5664: a1 = s1 + 0x1b40\n  5668: ra = 152, jump @6\n      : @171 [@dyn 76] (gas: 12)\n  5674: a0 = u64 [s1 + 0x278]\n  5678: a1 = s1 + 0x100\n  5682: u64 [a1 + 0x38] = a0\n  5685: a0 = u64 [s1 + 0x270]\n  5689: u64 [a1 + 0x30] = a0\n  5692: a0 = u64 [s1 + 0x268]\n  5696: u64 [a1 + 0x28] = a0\n  5699: a0 = u64 [s1 + 0x260]\n  5703: u64 [a1 + 0x20] = a0\n  5706: a0 = s1 + 0x240\n  5710: a1 = 0x40\n  5713: ra = 154, jump @2\n      : @172 [@dyn 77] (gas: 13)\n  5719: a4 = s1 + 0x200\n  5723: a0 = u64 [a4 + 0x58]\n  5726: a1 = u64 [a4 + 0x50]\n  5729: a2 = u64 [a4 + 0x48]\n  5732: a3 = u64 [a4 + 0x40]\n  5735: a0 = a0 | a2\n  5738: a2 = a3 | a1\n  5741: a2 = a2 | a0\n  5744: a2 = a2 >> 0x20\n  5747: a0 = a0 | a1\n  5750: a0 = a0 << 0x20\n  5753: a0 = a0 | a2\n  5756: jump @201 if a0 != 0\n      : @173 (gas: 15)\n  5760: a2 = s1 + 0x100\n  5764: a0 = u64 [a2 + 0x20]\n  5767: a4 = s1 + 0x200\n  5771: u64 [a4 + 0x20] = a0\n  5774: a0 = u64 [a2 + 0x28]\n  5777: u64 [a4 + 0x28] = a0\n  5780: a0 = u64 [a2 + 0x30]\n  5783: u64 [a4 + 0x30] = a0\n  5786: a1 = s1 + 0x220\n  5790: a0 = u64 [a2 + 0x38]\n  5793: u64 [a4 + 0x38] = a0\n  5796: a0 = a3\n  5798: u64 [s1 + 0x138] = a3\n  5802: ra = 0x1d6\n  5806: jump @4\n      : @174 (gas: 1)\n  5809: jump @176 if a0 == 1889567281\n      : @175 (gas: 1)\n  5816: jump @495\n      : @176 (gas: 9)\n  5819: a0 = s1 + 0x20f8\n  5823: u64 [a0 + 96] = 0\n  5826: u64 [a0 + 88] = 0\n  5829: u64 [a0 + 80] = 0\n  5832: u64 [a0 + 72] = 0\n  5835: a0 = s1 + 0x2000\n  5839: i32 a0 = a0 + 0x140\n  5843: ecalli 15 // 'value_transferred'\n  5845: fallthrough\n      : @177 (gas: 9)\n  5846: a3 = s1 + 0x20f8\n  5850: a0 = u64 [a3 + 0x58]\n  5853: a1 = u64 [a3 + 0x60]\n  5856: a2 = u64 [a3 + 0x50]\n  5859: a3 = u64 [a3 + 0x48]\n  5862: a1 = a1 | a2\n  5865: a0 = a0 | a3\n  5868: a0 = a0 | a1\n  5871: jump @179 if a0 == 0\n      : @178 (gas: 1)\n  5874: jump @502\n      : @179 (gas: 3)\n  5877: a0 = u64 [s1 + 0x138]\n  5881: a0 = i32 [a0]\n  5883: jump @181 if a0 >u 35\n      : @180 (gas: 1)\n  5887: jump @503\n      : @181 (gas: 2)\n  5890: a0 = s1 + 0x1a00\n  5894: ra = 156, jump @554\n      : @182 [@dyn 78] (gas: 12)\n  5900: a3 = s1 + 0x18d8\n  5904: a4 = a3 + 0x100\n  5908: a0 = u64 [a4 + 0x28]\n  5911: a1 = u64 [a4 + 0x30]\n  5914: a2 = u32 [a3 + 0x138]\n  5918: u64 [a3 + 288] = 0\n  5922: u64 [a4 + 0x18] = a2\n  5925: u64 [a4 + 0x10] = a1\n  5928: a1 = s1 + 0x19e0\n  5932: u64 [a4 + 0x8] = a0\n  5935: a0 = 0\n  5937: ra = 158, jump @4\n      : @183 [@dyn 79] (gas: 9)\n  5943: a1 = s1 + 0x18d8\n  5947: u64 [a1 + 256] = 0\n  5951: u64 [a1 + 248] = 0\n  5955: u64 [a1 + 232] = 0x4\n  5960: a2 = a1\n  5962: a0 = 0x20\n  5965: a1 = s1 + 0x19c0\n  5969: u64 [a2 + 240] = 0\n  5973: ra = 160, jump @4\n      : @184 [@dyn 80] (gas: 2)\n  5979: a1 = i32 [0x200a4]\n  5984: jump @186 if a1 >u 63\n      : @185 (gas: 2)\n  5988: u32 [0x200a4] = 0x40\n  5994: fallthrough\n      : @186 (gas: 13)\n  5995: a0 = sp + 0xffffffffffffffe0\n  5998: a2 = a0 & 0xffffffffffffffe0\n  6001: u64 [s1 + 0x138] = a2\n  6005: sp = a2\n  6007: a0 = 0x200b0\n  6012: i32 a0 = a0 + 0\n  6014: i32 a2 = a2 + 0\n  6016: a1 = 0x40\n  6019: ra = 0xa2\n  6023: ecalli 8 // 'hash_keccak_256'\n  6025: a3 = u64 [s1 + 0x138]\n  6029: t0 = 0xa4\n  6033: jump @670\n      : @187 [@dyn 81] (gas: 2)\n  6036: a3 = u64 [s1 + 0x138]\n  6040: t0 = 164, jump @670\n      : @188 [@dyn 82] (gas: 9)\n  6046: i32 a4 = a4 + 0xf8\n  6050: a4 = a4 + s1\n  6053: u64 [a4 + 0x80] = a3\n  6057: u64 [a4 + 0x78] = a2\n  6060: u64 [a4 + 0x70] = a1\n  6063: u64 [a4 + 0x68] = a0\n  6066: a0 = s1 + 0x19a0\n  6070: a1 = s1 + 0x2160\n  6074: ra = 166, jump @6\n      : @189 [@dyn 83] (gas: 13)\n  6080: a1 = s1 + 0x18d8\n  6084: a0 = u64 [a1 + 0xe0]\n  6088: a2 = s1 + 0x100\n  6092: u64 [a2 + 0x38] = a0\n  6095: a0 = u64 [a1 + 0xd8]\n  6099: u64 [a2 + 0x30] = a0\n  6102: a0 = u64 [a1 + 0xd0]\n  6106: u64 [a2 + 0x28] = a0\n  6109: a0 = u64 [a1 + 0xc8]\n  6113: u64 [a2 + 0x20] = a0\n  6116: a0 = s1 + 0x1980\n  6120: a1 = 0x40\n  6123: ra = 168, jump @2\n      : @190 [@dyn 84] (gas: 13)\n  6129: a3 = s1 + 0x18d8\n  6133: a0 = u64 [a3 + 0xc0]\n  6137: a1 = u64 [a3 + 0xb8]\n  6141: a2 = u64 [a3 + 0xb0]\n  6145: a4 = u64 [a3 + 0xa8]\n  6149: a0 = a0 | a2\n  6152: a2 = a4 | a1\n  6155: a2 = a2 | a0\n  6158: a2 = a2 >> 0x20\n  6161: a0 = a0 | a1\n  6164: a0 = a0 << 0x20\n  6167: a0 = a0 | a2\n  6170: jump @201 if a0 != 0\n      : @191 (gas: 14)\n  6174: a2 = s1 + 0x100\n  6178: a0 = u64 [a2 + 0x20]\n  6181: u64 [a3 + 0x88] = a0\n  6185: a0 = u64 [a2 + 0x28]\n  6188: u64 [a3 + 0x90] = a0\n  6192: a0 = u64 [a2 + 0x30]\n  6195: u64 [a3 + 0x98] = a0\n  6199: a1 = s1 + 0x1960\n  6203: a0 = u64 [a2 + 0x38]\n  6206: u64 [a3 + 0xa0] = a0\n  6210: a0 = a4\n  6212: u64 [a2 + 0x38] = a4\n  6215: ra = 0x1d6\n  6219: jump @4\n      : @192 (gas: 9)\n  6222: a0 = s1 + 0x20f8\n  6226: u64 [a0 + 160] = 0\n  6230: u64 [a0 + 152] = 0\n  6234: u64 [a0 + 144] = 0\n  6238: u64 [a0 + 136] = 0\n  6242: a0 = s1 + 0x2000\n  6246: i32 a0 = a0 + 0x180\n  6250: ecalli 15 // 'value_transferred'\n  6252: fallthrough\n      : @193 (gas: 9)\n  6253: a3 = s1 + 0x20f8\n  6257: a0 = u64 [a3 + 0x98]\n  6261: a1 = u64 [a3 + 0xa0]\n  6265: a2 = u64 [a3 + 0x90]\n  6269: a3 = u64 [a3 + 0x88]\n  6273: a1 = a1 | a2\n  6276: a0 = a0 | a3\n  6279: a0 = a0 | a1\n  6282: jump @195 if a0 == 0\n      : @194 (gas: 1)\n  6285: jump @504\n      : @195 (gas: 3)\n  6288: a0 = u64 [s1 + 0x138]\n  6292: a0 = i32 [a0]\n  6294: jump @197 if a0 >u 3\n      : @196 (gas: 1)\n  6298: jump @505\n      : @197 (gas: 8)\n  6301: a1 = s1 + 0x20f8\n  6305: u64 [a1 + 192] = 0\n  6309: u64 [a1 + 184] = 0\n  6313: u64 [a1 + 176] = 0\n  6317: u64 [a1 + 168] = 0x1\n  6322: a0 = s1 + 0x1a60\n  6326: a1 = s1 + 0x21a0\n  6330: ra = 170, jump @6\n      : @198 [@dyn 85] (gas: 12)\n  6336: a1 = s1 + 0x18d8\n  6340: a2 = a1 + 0x100\n  6344: a0 = u64 [a2 + 0x98]\n  6348: a1 = s1 + 0x100\n  6352: u64 [a1 + 0x28] = a0\n  6355: a0 = u64 [a2 + 0x90]\n  6359: u64 [a1 + 0x38] = a0\n  6362: a0 = u64 [a2 + 0x88]\n  6366: u64 [a1 + 0x30] = a0\n  6369: a0 = s1 + 0x1a40\n  6373: a1 = 0x40\n  6376: ra = 172, jump @2\n      : @199 [@dyn 86] (gas: 14)\n  6382: a3 = s1 + 0x18d8\n  6386: a5 = a3 + 0x100\n  6390: a4 = u64 [a5 + 0x80]\n  6394: a1 = u64 [a5 + 0x78]\n  6397: a2 = u64 [a5 + 0x70]\n  6400: a0 = u64 [a5 + 0x68]\n  6403: a4 = a4 | a2\n  6406: a2 = a0 | a1\n  6409: a2 = a2 | a4\n  6412: a2 = a2 >> 0x20\n  6415: a1 = a1 | a4\n  6418: a1 = a1 << 0x20\n  6421: a1 = a1 | a2\n  6424: jump @201 if a1 != 0\n      : @200 (gas: 1)\n  6427: jump @506\n      : @201 (gas: 1)\n  6430: trap\n      : @202 (gas: 3)\n  6431: a0 = s1 + 0x1940\n  6435: a1 = 0x40\n  6438: ra = 174, jump @2\n      : @203 [@dyn 87] (gas: 13)\n  6444: a2 = s1 + 0x18d8\n  6448: t0 = u64 [a2 + 0x80]\n  6452: a5 = u64 [a2 + 0x78]\n  6455: a4 = u64 [a2 + 0x70]\n  6458: a0 = u64 [a2 + 0x68]\n  6461: a3 = a4 | t0\n  6464: a1 = a0 | a5\n  6467: a1 = a1 | a3\n  6470: a1 = a1 >> 0x20\n  6473: a3 = a3 | a5\n  6476: a3 = a3 << 0x20\n  6479: a1 = a1 | a3\n  6482: jump @201 if a1 != 0\n      : @204 (gas: 11)\n  6485: u64 [a2 + 88] = 0\n  6488: u64 [a2 + 80] = 0\n  6491: u64 [a2 + 72] = 0\n  6494: a3 = 0x8c379a000000000\n  6504: a1 = s1 + 0x1920\n  6508: u64 [a2 + 0x60] = a3\n  6511: u64 [s1 + 0x138] = a0\n  6515: u64 [s1 + 0x130] = a4\n  6519: u64 [s1 + 0x120] = t0\n  6523: u64 [s1 + 0x128] = a5\n  6527: ra = 176, jump @4\n      : @205 [@dyn 88] (gas: 1)\n  6533: t0 = 178, jump @664\n      : @206 [@dyn 89] (gas: 1)\n  6539: jump @201 if a0 == 0\n      : @207 (gas: 11)\n  6542: i32 a0 = a1 + 0x4\n  6545: a2 = s1 + 0x18d8\n  6549: a5 = 0\n  6551: u64 [a2 + 64] = 0\n  6554: u64 [a2 + 56] = 0\n  6557: u64 [a2 + 40] = 0x20\n  6561: a1 = s1 + 0x1900\n  6565: u64 [a2 + 48] = 0\n  6568: u64 [s1 + 0x128] = a3\n  6572: u64 [s1 + 0x120] = a4\n  6576: ra = 180, jump @4\n      : @208 [@dyn 90] (gas: 10)\n  6582: a2 = s1 + 0x100\n  6586: a4 = u64 [a2 + 0x28]\n  6589: a3 = u64 [a2 + 0x30]\n  6592: a1 = u64 [a2 + 0x38]\n  6595: a0 = u64 [a2 + 0x20]\n  6598: a0 = a0 + 0xffffffffffffffdc\n  6601: a0 = a1 <u a0\n  6604: a0 = 0 if a3 != 0\n  6606: a0 = 0 if a4 != 0\n  6608: jump @201 if a0 == 0\n      : @209 (gas: 8)\n  6612: i32 a0 = a1 + 0x24\n  6615: a2 = s1 + 0x18d8\n  6619: u64 [a2 + 32] = 0\n  6622: u64 [a2 + 24] = 0\n  6625: u64 [a2 + 8] = 0x1a\n  6629: a1 = s1 + 0x18e0\n  6633: u64 [a2 + 16] = 0\n  6636: ra = 182, jump @4\n      : @210 [@dyn 91] (gas: 9)\n  6642: a2 = s1 + 0x100\n  6646: a3 = u64 [a2 + 0x38]\n  6649: a0 = 0xffffffbc\n  6659: a0 = a3 <u a0\n  6662: a1 = u64 [a2 + 0x30]\n  6665: a0 = 0 if a1 != 0\n  6667: a1 = u64 [a2 + 0x28]\n  6670: a0 = 0 if a1 != 0\n  6672: jump @201 if a0 == 0\n      : @211 (gas: 13)\n  6676: i32 a0 = a3 + 0x44\n  6679: a1 = u64 [0x20000]\n  6684: a2 = u64 [0x20008]\n  6689: a3 = u64 [0x20010]\n  6694: a4 = s1 + 0x18d8\n  6698: u64 [a4] = a1\n  6700: a5 = a4 + 0xffffffffffffff00\n  6704: u64 [a5 + 0xf8] = a2\n  6708: u64 [a5 + 0xf0] = a3\n  6712: a2 = 0x4e54000000000000\n  6722: a1 = s1 + 0x18c0\n  6726: u64 [a5 + 0xe8] = a2\n  6730: ra = 184, jump @4\n      : @212 [@dyn 92] (gas: 3)\n  6736: a1 = 0x64\n  6739: a0 = u64 [s1 + 0x138]\n  6743: ra = 186, jump @12\n      : @213 [@dyn 93] (gas: 5)\n  6749: i32 a1 = a0 + 0\n  6751: a0 = 0x1\n  6754: a2 = 0x64\n  6757: ecalli 12 // 'seal_return'\n  6759: fallthrough\n      : @214 (gas: 4)\n  6760: a0 = s1 + 0x7ff\n  6764: a0 = a0 + 0x241\n  6768: a1 = 0x40\n  6771: ra = 188, jump @2\n      : @215 [@dyn 94] (gas: 15)\n  6777: a0 = s1 + 0x7ff\n  6781: a0 = a0 + 0xb9\n  6785: a2 = a0 + 0x100\n  6789: a1 = u64 [a2 + 0xa0]\n  6793: u64 [s1 + 0x130] = a1\n  6797: a1 = u64 [a2 + 0x98]\n  6801: u64 [s1 + 0x128] = a1\n  6805: a1 = u64 [a2 + 0x90]\n  6809: u64 [s1 + 0x120] = a1\n  6813: a0 = u64 [a2 + 0x88]\n  6817: u64 [s1 + 0x138] = a0\n  6821: ra = 0xbe\n  6825: ecalli 11 // 'return_data_size'\n  6827: t0 = 0xc0\n  6831: jump @661\n      : @216 [@dyn 95] (gas: 1)\n  6834: t0 = 192, jump @661\n      : @217 [@dyn 96] (gas: 1)\n  6840: jump @201 if a1 != 0\n      : @218 (gas: 3)\n  6844: a2 = a0\n  6846: a0 = a0 >> 0x20\n  6849: jump @201 if a0 != 0\n      : @219 (gas: 1)\n  6853: t0 = 194, jump @668\n      : @220 [@dyn 97] (gas: 1)\n  6859: ra = 196, jump @12\n      : @221 [@dyn 98] (gas: 11)\n  6865: a1 = s1 + 0x18d8\n  6869: a2 = u64 [s1 + 0x128]\n  6873: u32 [a1 + 0x328] = a2\n  6877: i32 a0 = a0 + 0\n  6879: a1 = s1 + 0x2000\n  6883: i32 a1 = a1 + 0xfffffffffffffc00\n  6887: a2 = 0\n  6889: ecalli 10 // 'return_data_copy'\n  6891: a0 = s1 + 0x18d8\n  6895: a0 = i32 [a0 + 0x328]\n  6899: fallthrough\n      : @222 (gas: 2)\n  6900: a1 = u64 [s1 + 0x130]\n  6904: jump @201 if a0 <u a1\n      : @223 (gas: 2)\n  6908: ecalli 11 // 'return_data_size'\n  6910: fallthrough\n      : @224 (gas: 3)\n  6911: a1 = a0\n  6913: a0 = a0 >> 0x20\n  6916: jump @201 if a0 != 0\n      : @225 (gas: 3)\n  6920: a0 = u64 [s1 + 0x138]\n  6924: u64 [s1 + 0x130] = a1\n  6928: ra = 198, jump @12\n      : @226 [@dyn 99] (gas: 7)\n  6934: i32 a1 = a0 + 0\n  6936: a2 = i32 [s1 + 0x130]\n  6940: a0 = 0x1\n  6943: ecalli 12 // 'seal_return'\n  6945: a0 = s1 + 0x180\n  6949: ra = 0x1da\n  6953: jump @560\n      : @227 (gas: 9)\n  6956: a3 = s1 + 0x100\n  6960: a0 = u64 [a3 + 0x30]\n  6963: a1 = u64 [a3 + 0x20]\n  6966: a0 = a0 | a1\n  6969: a1 = u64 [a3 + 0x38]\n  6972: a2 = u64 [a3 + 0x28]\n  6975: a1 = a1 | a2\n  6978: a0 = a0 | a1\n  6981: jump @242 if a0 == 0\n      : @228 (gas: 3)\n  6985: a0 = s1 + 0x1800\n  6989: a1 = 0x40\n  6992: ra = 200, jump @2\n      : @229 [@dyn 100] (gas: 23)\n  6998: t2 = s1 + 0x10b8\n  7002: t0 = u64 [t2 + 0x748]\n  7006: a3 = u64 [t2 + 0x760]\n  7010: t1 = u64 [t2 + 0x750]\n  7014: a4 = u64 [t2 + 0x758]\n  7018: a5 = t0 + 0x20\n  7021: a0 = a5 <u t0\n  7024: a1 = t1 + a0\n  7027: a2 = a1 <u t1\n  7030: a2 = a0 if a0 == 0\n  7033: a2 = a2 + a4\n  7036: u64 [s1 + 0x80] = a4\n  7040: a0 = a2 <u a4\n  7043: u64 [s1 + 0x88] = a3\n  7047: a0 = a0 + a3\n  7050: a3 = a5 | a2\n  7053: a0 = a0 | a1\n  7056: a3 = a3 | a0\n  7059: a3 = a3 >> 0x20\n  7062: a0 = a0 | a2\n  7065: a0 = a0 << 0x20\n  7068: a0 = a0 | a3\n  7071: jump @201 if a0 != 0\n      : @230 (gas: 11)\n  7075: u64 [t2 + 1848] = 0\n  7079: u64 [t2 + 1840] = 0\n  7083: u64 [t2 + 1832] = 0\n  7087: a0 = 0xa9059cbb00000000\n  7097: a1 = s1 + 0x17e0\n  7101: u64 [t2 + 0x740] = a0\n  7105: u64 [s1 + 0x70] = a5\n  7108: a0 = a5\n  7110: u64 [s1 + 0xd8] = t0\n  7114: u64 [s1 + 0x78] = t1\n  7117: ra = 202, jump @4\n      : @231 [@dyn 101] (gas: 40)\n  7123: a0 = u64 [s1 + 0xd8]\n  7127: a0 = a0 + 0x24\n  7130: a1 = u64 [s1 + 0xd8]\n  7134: a1 = a0 <u a1\n  7137: a2 = u64 [s1 + 0x78]\n  7140: a2 = a2 + a1\n  7143: a3 = u64 [s1 + 0x78]\n  7146: a3 = a2 <u a3\n  7149: a3 = a1 if a1 == 0\n  7152: a1 = u64 [s1 + 0x80]\n  7156: a3 = a3 + a1\n  7159: a1 = a3 <u a1\n  7162: a4 = u64 [s1 + 0x88]\n  7166: a1 = a1 + a4\n  7169: a4 = u64 [s1 + 0x138]\n  7173: a5 = s1 + 0x10b8\n  7177: u64 [a5 + 0x6c0] = a4\n  7181: a4 = u64 [s1 + 0x130]\n  7185: u64 [a5 + 0x6b8] = a4\n  7189: a4 = u64 [s1 + 0x128]\n  7193: u64 [a5 + 0x6b0] = a4\n  7197: a4 = u64 [s1 + 0x120]\n  7201: u64 [a5 + 0x6a8] = a4\n  7205: a4 = u64 [s1 + 0xd0]\n  7209: u64 [a5 + 0x6e0] = a4\n  7213: a4 = u64 [s1 + 0xf8]\n  7217: u64 [a5 + 0x6d8] = a4\n  7221: a4 = u64 [s1 + 0xe8]\n  7225: u64 [a5 + 0x6d0] = a4\n  7229: u64 [a5 + 0x6f0] = a2\n  7233: u64 [a5 + 0x6e8] = a0\n  7237: u64 [a5 + 0x6f8] = a3\n  7241: u64 [a5 + 0x700] = a1\n  7245: a0 = s1 + 0x17c0\n  7249: a1 = s1 + 0x17a0\n  7253: a2 = s1 + 0x1780\n  7257: a3 = s1 + 0x1760\n  7261: a4 = u64 [s1 + 0xf0]\n  7265: u64 [a5 + 0x6c8] = a4\n  7269: ra = 204, jump @635\n      : @232 [@dyn 102] (gas: 12)\n  7275: a5 = u64 [s1 + 0x78]\n  7278: a4 = u64 [s1 + 0xd8]\n  7282: a2 = u64 [s1 + 0x80]\n  7286: a0 = a4 | a2\n  7289: a1 = u64 [s1 + 0x88]\n  7293: a1 = a1 | a5\n  7296: a0 = a0 | a1\n  7299: a0 = a0 >> 0x20\n  7302: a1 = a1 | a2\n  7305: a1 = a1 << 0x20\n  7308: a0 = a0 | a1\n  7311: jump @201 if a0 != 0\n      : @233 (gas: 51)\n  7315: a0 = s1 + 0x10b8\n  7319: t2 = u64 [a0 + 0x708]\n  7323: a2 = a0 + 0x700\n  7327: a3 = u64 [a2 + 0x10]\n  7330: a1 = u64 [a2 + 0x20]\n  7333: u64 [s1 + 0x68] = a1\n  7336: a1 = u64 [a2 + 0x18]\n  7339: ra = t2 <u a4\n  7342: a0 = a3 ^ a5\n  7345: a2 = a3 <u a5\n  7348: a2 = ra if a0 == 0\n  7351: a0 = u64 [s1 + 0x80]\n  7355: t1 = a1 - a0\n  7358: t0 = t1 <u a2\n  7361: a4 = a1 <u a0\n  7364: a0 = u64 [s1 + 0x88]\n  7368: a1 = u64 [s1 + 0x68]\n  7371: a0 = a1 - a0\n  7374: a0 = a0 - a4\n  7377: t0 = a0 - t0\n  7380: u64 [s1 + 0x58] = t0\n  7383: t1 = t1 - a2\n  7386: a0 = a3 - a5\n  7389: a3 = a0 - ra\n  7392: u64 [s1 + 0x60] = a3\n  7395: a0 = u64 [s1 + 0xd8]\n  7399: a1 = t2 - a0\n  7402: u64 [s1 + 0x68] = a1\n  7405: a5 = a1 + 0xffffffffffffffe0\n  7408: a1 = a5 <u a1\n  7411: a2 = a3 + a1\n  7414: a2 = a2 + 0xffffffffffffffff\n  7417: t2 = a2 ^ a3\n  7420: a4 = a2 <u a3\n  7423: a4 = a1 if t2 == 0\n  7426: a3 = t1\n  7428: u64 [s1 + 0x50] = t1\n  7431: a1 = t1 <u 0x1\n  7434: t1 = t0 - a1\n  7437: a1 = a3 + 0xffffffffffffffff\n  7440: a4 = a4 + a1\n  7443: a3 = a4 <u a1\n  7446: t0 = t1 + a3\n  7449: a3 = s1 + 0x10b8\n  7453: a1 = a3 + 0x600\n  7457: u64 [a1 + 0x88] = a5\n  7461: u64 [a1 + 0x90] = a2\n  7465: u64 [a1 + 0x98] = a4\n  7469: a1 = s1 + 0x1740\n  7473: u64 [a3 + 0x6a0] = t0\n  7477: ra = 206, jump @4\n      : @234 [@dyn 103] (gas: 22)\n  7483: a0 = s1 + 0x10b8\n  7487: a1 = u64 [s1 + 0x58]\n  7490: a2 = a0 + 0x600\n  7494: u64 [a2 + 0x60] = a1\n  7497: a1 = u64 [s1 + 0x50]\n  7500: u64 [a2 + 0x58] = a1\n  7503: a1 = u64 [s1 + 0x60]\n  7506: u64 [a2 + 0x50] = a1\n  7509: a1 = u64 [s1 + 0x68]\n  7512: u64 [a2 + 0x48] = a1\n  7515: a1 = u64 [s1 + 0x88]\n  7519: u64 [a2 + 0x80] = a1\n  7523: a1 = u64 [s1 + 0x80]\n  7527: u64 [a2 + 0x78] = a1\n  7530: a1 = u64 [s1 + 0x78]\n  7533: u64 [a2 + 0x70] = a1\n  7536: a3 = a0\n  7538: a0 = s1 + 0x1720\n  7542: a1 = s1 + 0x1700\n  7546: a2 = u64 [s1 + 0xd8]\n  7550: u64 [a3 + 0x668] = a2\n  7554: ra = 208, jump @563\n      : @235 [@dyn 104] (gas: 3)\n  7560: a0 = s1 + 0x16e0\n  7564: a1 = u64 [s1 + 0xd8]\n  7568: ra = 210, jump @2\n      : @236 [@dyn 105] (gas: 12)\n  7574: a1 = s1 + 0x10b8\n  7578: a2 = a1 + 0x600\n  7582: a0 = u64 [a2 + 0x40]\n  7585: u64 [s1 + 0x88] = a0\n  7589: a0 = u64 [a2 + 0x38]\n  7592: u64 [s1 + 0x80] = a0\n  7596: a0 = u64 [a2 + 0x30]\n  7599: u64 [s1 + 0x78] = a0\n  7602: a0 = u64 [a2 + 0x28]\n  7605: u64 [s1 + 0xd8] = a0\n  7609: ecalli 9 // 'ref_time_left'\n  7611: fallthrough\n      : @237 (gas: 36)\n  7612: t0 = a0\n  7614: a0 = u64 [s1 + 0xb8]\n  7618: a0 = reverse a0\n  7620: a1 = a0 << 0x20\n  7623: a2 = u64 [s1 + 0xb0]\n  7627: a2 = reverse a2\n  7629: a2 = a2 >> 0x20\n  7632: a1 = a1 | a2\n  7635: a2 = u64 [s1 + 0xc0]\n  7639: a2 = reverse a2\n  7641: a3 = a2 << 0x20\n  7644: a4 = 0x300b0\n  7649: a0 = a0 >> 0x20\n  7652: a0 = a0 | a3\n  7655: a2 = a2 >> 0x20\n  7658: u64 [0x300b8] = a0\n  7663: u64 [0x300b0] = a1\n  7668: u32 [0x300c0] = a2\n  7673: a2 = s1 + 0x18d8\n  7677: u64 [a2 + 1536] = 0\n  7681: u64 [a2 + 1528] = 0\n  7685: u64 [a2 + 1520] = 0\n  7689: a0 = u64 [s1 + 0x88]\n  7693: a5 = u64 [s1 + 0x78]\n  7696: a5 = a5 | a0\n  7699: a1 = u64 [s1 + 0xd8]\n  7703: a3 = a1\n  7705: a0 = u64 [s1 + 0x80]\n  7709: a1 = a1 | a0\n  7712: a1 = a1 | a5\n  7715: a1 = a1 >> 0x20\n  7718: a0 = a0 | a5\n  7721: a0 = a0 << 0x20\n  7724: a0 = a0 | a1\n  7727: u64 [a2 + 1512] = 0\n  7731: jump @201 if a0 != 0\n      : @238 (gas: 7)\n  7735: a1 = a3\n  7737: i32 a0 = a3 + 0\n  7739: u64 [s1 + 0xb8] = a0\n  7743: a0 = u64 [s1 + 0x70]\n  7746: u64 [s1 + 0xb0] = t0\n  7750: u64 [s1 + 0xc0] = a4\n  7754: ra = 212, jump @12\n      : @239 [@dyn 106] (gas: 42)\n  7760: a1 = a0\n  7762: a3 = s1 + 0x18d8\n  7766: u32 [a3 + 1544] = 0\n  7770: a0 = u64 [s1 + 0xb8]\n  7774: a0 = a0 >u 0\n  7776: a4 = u64 [s1 + 0xb0]\n  7780: a2 = a4 >u 0x8fc\n  7784: a0 = a0 | a2\n  7787: a2 = -a0\n  7789: a4 = a3 + 0x600\n  7793: u64 [a4 + 0x40] = a2\n  7796: u64 [a4 + 0x38] = a2\n  7799: u64 [a4 + 0x30] = a2\n  7802: u64 [a4 + 0x28] = a2\n  7805: a2 = u64 [s1 + 0xc0]\n  7809: a2 = a2 << 0x20\n  7812: a2 = a2 >> 0x20\n  7815: a0 = a0 << 0x23\n  7818: a0 = a0 | a2\n  7821: a2 = s1 + 0x1ec0\n  7825: a2 = a2 << 0x20\n  7828: a2 = a2 >> 0x20\n  7831: a3 = s1 + 0x1f00\n  7835: a3 = a3 << 0x20\n  7838: a3 = a3 | a2\n  7841: a1 = a1 << 0x20\n  7844: a2 = 0x200b0\n  7849: a1 = a1 >> 0x20\n  7852: a4 = u64 [s1 + 0xd8]\n  7856: a4 = a4 << 0x20\n  7859: a4 = a4 | a1\n  7862: a2 = a2 << 0x20\n  7865: a2 = a2 >> 0x20\n  7868: a1 = s1 + 0x1ee0\n  7872: a1 = a1 << 0x20\n  7875: a5 = a1 | a2\n  7878: a1 = 0xffffffffffffffff\n  7881: a2 = 0xffffffffffffffff\n  7884: ecalli 1 // 'call'\n  7886: u64 [s1 + 0xd8] = a0\n  7890: a0 = s1 + 0x16c0\n  7894: ra = 214, jump @641\n      : @240 [@dyn 107] (gas: 2)\n  7900: a0 = u64 [s1 + 0xd8]\n  7904: jump @242 if a0 == 0\n      : @241 (gas: 1)\n  7907: jump @391\n      : @242 (gas: 9)\n  7910: a3 = s1 + 0x100\n  7914: a0 = u64 [a3 + 0x10]\n  7917: a1 = u64 [a3]\n  7919: a0 = a0 | a1\n  7922: a1 = u64 [a3 + 0x18]\n  7925: a2 = u64 [a3 + 0x8]\n  7928: a1 = a1 | a2\n  7931: a0 = a0 | a1\n  7934: jump @296 if a0 != 0\n      : @243 (gas: 8)\n  7938: a0 = s1 + 0x18d8\n  7942: u64 [a0 + 1760] = 0\n  7946: u64 [a0 + 1752] = 0\n  7950: u64 [a0 + 1744] = 0\n  7954: u64 [a0 + 1736] = 0\n  7958: a0 = s1 + 0x13e0\n  7962: a1 = s1 + 0x1fa0\n  7966: ra = 216, jump @6\n      : @244 [@dyn 108] (gas: 3)\n  7972: t0 = 0xda\n  7976: a1 = s1 + 0x10b8\n  7980: fallthrough\n      : @245 [@dyn 109] (gas: 10)\n  7981: a2 = a1 + 0x300\n  7985: a0 = u64 [a2 + 0x38]\n  7988: u64 [s1 + 0xc0] = a0\n  7992: a0 = u64 [a2 + 0x30]\n  7995: u64 [s1 + 0xb8] = a0\n  7999: a0 = u64 [a2 + 0x28]\n  8002: u64 [s1 + 0xd0] = a0\n  8006: a0 = s1 + 0x13c0\n  8010: a1 = 0x40\n  8013: ra = 220, jump @2\n      : @246 [@dyn 110] (gas: 14)\n  8019: a2 = s1 + 0x10b8\n  8023: t0 = u64 [a2 + 0x320]\n  8027: a1 = a2 + 0x300\n  8031: a5 = u64 [a1 + 0x18]\n  8034: a4 = u64 [a1 + 0x10]\n  8037: a0 = u64 [a1 + 0x8]\n  8040: a3 = a4 | t0\n  8043: a1 = a0 | a5\n  8046: a1 = a1 | a3\n  8049: a1 = a1 >> 0x20\n  8052: a3 = a3 | a5\n  8055: a3 = a3 << 0x20\n  8058: a1 = a1 | a3\n  8061: jump @201 if a1 != 0\n      : @247 (gas: 11)\n  8065: u64 [a2 + 760] = 0\n  8069: u64 [a2 + 752] = 0\n  8073: u64 [a2 + 744] = 0\n  8077: a3 = 0x70a0823100000000\n  8087: a1 = s1 + 0x13a0\n  8091: u64 [a2 + 0x300] = a3\n  8095: u64 [s1 + 0xf8] = a0\n  8099: u64 [s1 + 0xb0] = t0\n  8103: u64 [s1 + 0x88] = a5\n  8107: u64 [s1 + 0x80] = a4\n  8111: ra = 222, jump @4\n      : @248 [@dyn 111] (gas: 7)\n  8117: a0 = 0x300b0\n  8122: u64 [s1 + 0xd8] = a0\n  8126: i32 a0 = a0 + 0\n  8128: u64 [s1 + 0x78] = a0\n  8131: ra = 0xe0\n  8135: ecalli 0 // 'address'\n  8136: fallthrough\n      : @249 [@dyn 112] (gas: 10)\n  8137: a4 = u64 [s1 + 0xf8]\n  8141: a0 = u64 [s1 + 0xb0]\n  8145: a1 = u64 [s1 + 0x88]\n  8149: a0 = a0 | a1\n  8152: a1 = 0xfffffffc\n  8162: a1 = a4 <u a1\n  8165: a2 = u64 [s1 + 0x80]\n  8169: a1 = 0 if a2 != 0\n  8171: a1 = 0 if a0 != 0\n  8173: jump @201 if a1 == 0\n      : @250 (gas: 5)\n  8177: a2 = u64 [s1 + 0xd8]\n  8181: a1 = u64 [a2 + 0x8]\n  8184: a0 = 0x2400000000\n  8194: u64 [s1 + 0x70] = a0\n  8197: t0 = 226, jump @662\n      : @251 [@dyn 113] (gas: 8)\n  8203: a5 = s1 + 0x10b8\n  8207: u64 [a5 + 736] = 0\n  8211: a4 = a5 + 0x200\n  8215: u64 [a4 + 0xd8] = a2\n  8219: u64 [a4 + 0xd0] = a1\n  8223: a1 = s1 + 0x1380\n  8227: u64 [a4 + 0xc8] = a3\n  8231: ra = 228, jump @4\n      : @252 [@dyn 114] (gas: 3)\n  8237: ra = 0xe6\n  8241: ecalli 9 // 'ref_time_left'\n  8243: fallthrough\n      : @253 [@dyn 115] (gas: 9)\n  8244: a0 = u64 [s1 + 0xb8]\n  8248: a0 = reverse a0\n  8250: a1 = a0 << 0x20\n  8253: a2 = u64 [s1 + 0xc0]\n  8257: a2 = reverse a2\n  8259: a2 = a2 >> 0x20\n  8262: a1 = a1 | a2\n  8265: a2 = u64 [s1 + 0xd0]\n  8269: t0 = 232, jump @665\n      : @254 [@dyn 116] (gas: 7)\n  8275: u64 [a0 + 1792] = 0\n  8279: u64 [a0 + 1784] = 0\n  8283: u64 [a0 + 1776] = 0\n  8287: u64 [a0 + 1768] = 0\n  8291: a1 = 0x24\n  8294: a0 = u64 [s1 + 0xf8]\n  8298: ra = 234, jump @12\n      : @255 [@dyn 117] (gas: 4)\n  8304: u64 [s1 + 0xd0] = a0\n  8308: a1 = 0x20\n  8311: a0 = u64 [s1 + 0xf8]\n  8315: ra = 236, jump @12\n      : @256 [@dyn 118] (gas: 33)\n  8321: a1 = s1 + 0x18d8\n  8325: u32 [a1 + 1800] = 0x20\n  8330: u64 [a1 + 1856] = 0\n  8334: u64 [a1 + 1848] = 0\n  8338: u64 [a1 + 1840] = 0\n  8342: u64 [a1 + 1832] = 0\n  8346: a1 = u64 [s1 + 0xd8]\n  8350: a1 = a1 << 0x20\n  8353: a1 = a1 >> 0x20\n  8356: a2 = 0x1800000000\n  8366: t0 = a1 | a2\n  8369: a1 = s1 + 0x1fc0\n  8373: a1 = a1 << 0x20\n  8376: a1 = a1 >> 0x20\n  8379: a2 = s1 + 0x2000\n  8383: a2 = a2 << 0x20\n  8386: a3 = a2 | a1\n  8389: a1 = u64 [s1 + 0xd0]\n  8393: a1 = a1 << 0x20\n  8396: a1 = a1 >> 0x20\n  8399: a4 = u64 [s1 + 0x70]\n  8402: a4 = a4 | a1\n  8405: a0 = a0 << 0x20\n  8408: a0 = a0 >> 0x20\n  8411: a1 = s1 + 0x1fe0\n  8415: a1 = a1 << 0x20\n  8418: a5 = a1 | a0\n  8421: a1 = 0xffffffffffffffff\n  8424: a2 = 0xffffffffffffffff\n  8427: u64 [s1 + 0xd0] = t0\n  8431: a0 = t0\n  8433: ecalli 1 // 'call'\n  8435: fallthrough\n      : @257 (gas: 1)\n  8436: jump @259 if a0 == 0\n      : @258 (gas: 1)\n  8439: jump @380\n      : @259 (gas: 2)\n  8442: ecalli 11 // 'return_data_size'\n  8444: fallthrough\n      : @260 (gas: 2)\n  8445: a5 = 0x20\n  8448: jump @262 if a0 >=u a5\n      : @261 (gas: 3)\n  8451: ecalli 11 // 'return_data_size'\n  8453: a5 = a0\n  8455: fallthrough\n      : @262 (gas: 19)\n  8456: a2 = s1 + 0x10b8\n  8460: a3 = u64 [s1 + 0xf8]\n  8464: t0 = u64 [s1 + 0xb0]\n  8468: a0 = u64 [s1 + 0x88]\n  8472: a1 = u64 [s1 + 0x80]\n  8476: u64 [s1 + 184] = 0\n  8480: u64 [s1 + 0xc0] = a5\n  8484: a4 = a2 + 0x200\n  8488: u64 [a4 + 0x68] = a5\n  8491: u64 [a4 + 0x88] = a3\n  8495: u64 [a2 + 624] = 0\n  8499: u64 [a4 + 0x90] = a1\n  8503: u64 [a2 + 632] = 0\n  8507: u64 [a4 + 0x98] = a0\n  8511: u64 [a2 + 640] = 0\n  8515: a0 = s1 + 0x1340\n  8519: a1 = s1 + 0x1320\n  8523: u64 [a2 + 0x2a0] = t0\n  8527: ra = 238, jump @563\n      : @263 [@dyn 119] (gas: 4)\n  8533: a3 = u64 [s1 + 0xb8]\n  8537: a0 = a3 >u 0\n  8539: a1 = u64 [s1 + 0xc0]\n  8543: t0 = 240, jump @658\n      : @264 [@dyn 120] (gas: 1)\n  8549: jump @266 if a2 != 0\n      : @265 (gas: 1)\n  8552: jump @526\n      : @266 (gas: 3)\n  8555: a0 = s1 + 0x1300\n  8559: a1 = u64 [s1 + 0xf8]\n  8563: ra = 242, jump @2\n      : @267 [@dyn 121] (gas: 18)\n  8569: a1 = s1 + 0x10b8\n  8573: a2 = a1 + 0x200\n  8577: a0 = u64 [a2 + 0x60]\n  8580: u64 [s1 + 0xb0] = a0\n  8584: a0 = u64 [a2 + 0x58]\n  8587: u64 [s1 + 0x88] = a0\n  8591: a0 = u64 [a2 + 0x50]\n  8594: u64 [s1 + 0xb8] = a0\n  8598: a0 = u64 [a2 + 0x48]\n  8601: u64 [s1 + 0xc0] = a0\n  8605: a0 = s1 + 0x18d8\n  8609: u64 [a0 + 1920] = 0\n  8613: u64 [a0 + 1912] = 0\n  8617: u64 [a0 + 1904] = 0\n  8621: u64 [a0 + 1896] = 0x1\n  8626: a0 = s1 + 0x12e0\n  8630: a1 = s1 + 0x2040\n  8634: ra = 244, jump @6\n      : @268 [@dyn 122] (gas: 11)\n  8640: a1 = s1 + 0x10b8\n  8644: a2 = a1 + 0x200\n  8648: a0 = u64 [a2 + 0x38]\n  8651: u64 [s1 + 0x68] = a0\n  8654: a0 = u64 [a2 + 0x30]\n  8657: u64 [s1 + 0x60] = a0\n  8660: a0 = u64 [a2 + 0x28]\n  8663: u64 [s1 + 0x80] = a0\n  8667: a0 = s1 + 0x12c0\n  8671: a1 = 0x40\n  8674: ra = 246, jump @2\n      : @269 [@dyn 123] (gas: 14)\n  8680: t0 = s1 + 0x10b8\n  8684: a1 = t0 + 0x200\n  8688: a3 = u64 [a1 + 0x20]\n  8691: a4 = u64 [a1 + 0x18]\n  8694: a5 = u64 [a1 + 0x10]\n  8697: a0 = u64 [a1 + 0x8]\n  8700: a2 = a5 | a3\n  8703: a1 = a0 | a4\n  8706: a1 = a1 | a2\n  8709: a1 = a1 >> 0x20\n  8712: a2 = a2 | a4\n  8715: a2 = a2 << 0x20\n  8718: a1 = a1 | a2\n  8721: jump @201 if a1 != 0\n      : @270 (gas: 11)\n  8725: u64 [t0 + 504] = 0\n  8729: u64 [t0 + 496] = 0\n  8733: u64 [t0 + 488] = 0\n  8737: u64 [s1 + 0x58] = a3\n  8740: a3 = 0x70a0823100000000\n  8750: a1 = s1 + 0x12a0\n  8754: u64 [t0 + 0x200] = a3\n  8758: u64 [s1 + 0xf8] = a0\n  8762: u64 [s1 + 0x50] = a4\n  8765: u64 [s1 + 0x48] = a5\n  8768: ra = 248, jump @4\n      : @271 [@dyn 124] (gas: 4)\n  8774: a0 = u64 [s1 + 0x78]\n  8777: ra = 0xfa\n  8781: ecalli 0 // 'address'\n  8782: fallthrough\n      : @272 [@dyn 125] (gas: 10)\n  8783: a4 = u64 [s1 + 0xf8]\n  8787: a0 = u64 [s1 + 0x58]\n  8790: a1 = u64 [s1 + 0x50]\n  8793: a0 = a0 | a1\n  8796: a1 = 0xfffffffc\n  8806: a1 = a4 <u a1\n  8809: a2 = u64 [s1 + 0x48]\n  8812: a1 = 0 if a2 != 0\n  8814: a1 = 0 if a0 != 0\n  8816: jump @201 if a1 == 0\n      : @273 (gas: 2)\n  8820: a2 = u64 [s1 + 0xd8]\n  8824: t0 = 252, jump @663\n      : @274 [@dyn 126] (gas: 8)\n  8830: a5 = s1 + 0x10b8\n  8834: u64 [a5 + 480] = 0\n  8838: a4 = a5 + 0x100\n  8842: u64 [a4 + 0xd8] = a1\n  8846: u64 [a4 + 0xd0] = a2\n  8850: a1 = s1 + 0x1280\n  8854: u64 [a4 + 0xc8] = a3\n  8858: ra = 254, jump @4\n      : @275 [@dyn 127] (gas: 3)\n  8864: ra = 0x100\n  8868: ecalli 9 // 'ref_time_left'\n  8870: fallthrough\n      : @276 [@dyn 128] (gas: 9)\n  8871: a0 = u64 [s1 + 0x60]\n  8874: a0 = reverse a0\n  8876: a1 = a0 << 0x20\n  8879: a2 = u64 [s1 + 0x68]\n  8882: a2 = reverse a2\n  8884: a2 = a2 >> 0x20\n  8887: a1 = a1 | a2\n  8890: a2 = u64 [s1 + 0x80]\n  8894: t0 = 258, jump @665\n      : @277 [@dyn 129] (gas: 7)\n  8900: u64 [a0 + 1952] = 0\n  8904: u64 [a0 + 1944] = 0\n  8908: u64 [a0 + 1936] = 0\n  8912: u64 [a0 + 1928] = 0\n  8916: a1 = 0x24\n  8919: a0 = u64 [s1 + 0xf8]\n  8923: ra = 260, jump @12\n      : @278 [@dyn 130] (gas: 4)\n  8929: u64 [s1 + 0x80] = a0\n  8933: a1 = 0x20\n  8936: a0 = u64 [s1 + 0xf8]\n  8940: ra = 262, jump @12\n      : @279 [@dyn 131] (gas: 27)\n  8946: a1 = s1 + 0x18d8\n  8950: u32 [a1 + 1960] = 0x20\n  8955: u64 [a1 + 2016] = 0\n  8959: u64 [a1 + 2008] = 0\n  8963: u64 [a1 + 2000] = 0\n  8967: u64 [a1 + 1992] = 0\n  8971: a1 = s1 + 0x2060\n  8975: a1 = a1 << 0x20\n  8978: a1 = a1 >> 0x20\n  8981: a2 = s1 + 0x20a0\n  8985: a2 = a2 << 0x20\n  8988: a3 = a2 | a1\n  8991: a1 = u64 [s1 + 0x80]\n  8995: a1 = a1 << 0x20\n  8998: a1 = a1 >> 0x20\n  9001: a4 = u64 [s1 + 0x70]\n  9004: a4 = a4 | a1\n  9007: a0 = a0 << 0x20\n  9010: a0 = a0 >> 0x20\n  9013: a1 = s1 + 0x2080\n  9017: a1 = a1 << 0x20\n  9020: a5 = a1 | a0\n  9023: a1 = 0xffffffffffffffff\n  9026: a2 = 0xffffffffffffffff\n  9029: a0 = u64 [s1 + 0xd0]\n  9033: ecalli 1 // 'call'\n  9035: fallthrough\n      : @280 (gas: 1)\n  9036: jump @282 if a0 == 0\n      : @281 (gas: 1)\n  9039: jump @406\n      : @282 (gas: 2)\n  9042: ecalli 11 // 'return_data_size'\n  9044: fallthrough\n      : @283 (gas: 2)\n  9045: a1 = 0x20\n  9048: jump @285 if a0 >=u a1\n      : @284 (gas: 3)\n  9051: ecalli 11 // 'return_data_size'\n  9053: a1 = a0\n  9055: fallthrough\n      : @285 (gas: 19)\n  9056: u64 [s1 + 128] = 0\n  9060: u64 [s1 + 0xd0] = a1\n  9064: a3 = s1 + 0x10b8\n  9068: a4 = a3 + 0x100\n  9072: u64 [a4 + 0x68] = a1\n  9075: a0 = u64 [s1 + 0xf8]\n  9079: u64 [a4 + 0x88] = a0\n  9083: u64 [a3 + 368] = 0\n  9087: a0 = u64 [s1 + 0x48]\n  9090: u64 [a4 + 0x90] = a0\n  9094: u64 [a3 + 376] = 0\n  9098: a0 = u64 [s1 + 0x50]\n  9101: u64 [a4 + 0x98] = a0\n  9105: u64 [a3 + 384] = 0\n  9109: a0 = s1 + 0x1240\n  9113: a1 = s1 + 0x1220\n  9117: a2 = u64 [s1 + 0x58]\n  9120: u64 [a4 + 0xa0] = a2\n  9124: ra = 264, jump @563\n      : @286 [@dyn 132] (gas: 4)\n  9130: a3 = u64 [s1 + 0x80]\n  9134: a0 = a3 >u 0\n  9136: a1 = u64 [s1 + 0xd0]\n  9140: t0 = 266, jump @658\n      : @287 [@dyn 133] (gas: 1)\n  9146: jump @289 if a2 != 0\n      : @288 (gas: 1)\n  9149: jump @527\n      : @289 (gas: 3)\n  9152: a0 = s1 + 0x1200\n  9156: a1 = u64 [s1 + 0xf8]\n  9160: ra = 268, jump @2\n      : @290 [@dyn 134] (gas: 30)\n  9166: a1 = s1 + 0x10b8\n  9170: a2 = a1 + 0x100\n  9174: a0 = u64 [a2 + 0x60]\n  9177: u64 [s1 + 0x80] = a0\n  9181: a0 = u64 [a2 + 0x58]\n  9184: u64 [s1 + 0x70] = a0\n  9187: a0 = u64 [a2 + 0x50]\n  9190: u64 [s1 + 0xd0] = a0\n  9194: a0 = u64 [a2 + 0x48]\n  9197: u64 [s1 + 0xf8] = a0\n  9201: a3 = s1 + 0x100\n  9205: a0 = u64 [a3 + 0x38]\n  9208: u64 [a2] = a0\n  9210: a0 = u64 [a3 + 0x30]\n  9213: u64 [a1 + 0xf8] = a0\n  9217: a0 = u64 [a3 + 0x28]\n  9220: u64 [a1 + 0xf0] = a0\n  9224: a0 = u64 [a3 + 0x20]\n  9227: u64 [a1 + 0xe8] = a0\n  9231: u64 [a1 + 288] = 0\n  9235: u64 [a1 + 280] = 0\n  9239: a0 = u64 [s1 + 0xa0]\n  9243: u64 [a2 + 0x10] = a0\n  9246: a4 = a1\n  9248: a0 = s1 + 0x11e0\n  9252: a1 = s1 + 0x11c0\n  9256: a2 = s1 + 0x11a0\n  9260: a3 = u64 [s1 + 0xa8]\n  9264: u64 [a4 + 0x108] = a3\n  9268: ra = 270, jump @573\n      : @291 [@dyn 135] (gas: 22)\n  9274: a3 = s1 + 0x10b8\n  9278: a4 = a3 + 0x100\n  9282: a0 = u64 [a4 + 0x30]\n  9285: a1 = u64 [a4 + 0x28]\n  9288: a2 = u64 [a4 + 0x38]\n  9291: a3 = u64 [a4 + 0x40]\n  9294: a5 = u64 [s1 + 0xb8]\n  9298: a4 = a5 ^ a0\n  9301: a0 = a0 <u a5\n  9304: a5 = u64 [s1 + 0xc0]\n  9308: a1 = a1 <u a5\n  9311: a1 = a0 if a4 != 0\n  9314: a4 = u64 [s1 + 0xb0]\n  9318: a0 = a4 ^ a3\n  9321: a3 = a3 <u a4\n  9324: a5 = u64 [s1 + 0x88]\n  9328: a4 = a2 <u a5\n  9331: a4 = a3 if a0 != 0\n  9334: a2 = a2 ^ a5\n  9337: a0 = a0 | a2\n  9340: a1 = a4 if a0 != 0\n  9343: jump @293 if a1 != 0\n      : @292 (gas: 1)\n  9346: jump @416\n      : @293 (gas: 21)\n  9349: a5 = s1 + 0x100\n  9353: a0 = u64 [a5 + 0x20]\n  9356: a1 = s1 + 0x10b8\n  9360: u64 [a1 + 0x88] = a0\n  9364: u64 [a1 + 192] = 0\n  9368: u64 [a1 + 184] = 0\n  9372: a0 = u64 [s1 + 0xa8]\n  9376: u64 [a1 + 0xa8] = a0\n  9380: a0 = u64 [a5 + 0x28]\n  9383: u64 [a1 + 0x90] = a0\n  9387: a0 = u64 [s1 + 0xa0]\n  9391: u64 [a1 + 0xb0] = a0\n  9395: a0 = u64 [a5 + 0x30]\n  9398: u64 [a1 + 0x98] = a0\n  9402: a4 = a1\n  9404: a0 = s1 + 0x1180\n  9408: a1 = s1 + 0x1160\n  9412: a2 = s1 + 0x1140\n  9416: a3 = u64 [a5 + 0x38]\n  9419: u64 [a4 + 0xa0] = a3\n  9423: ra = 272, jump @573\n      : @294 [@dyn 136] (gas: 21)\n  9429: a4 = s1 + 0x10b8\n  9433: a0 = u64 [a4 + 0xc8]\n  9437: a1 = u64 [a4 + 0xd0]\n  9441: a2 = u64 [a4 + 0xd8]\n  9445: a3 = u64 [a4 + 0xe0]\n  9449: u64 [a4 + 0x40] = a3\n  9452: u64 [a4 + 0x38] = a2\n  9455: u64 [a4 + 0x30] = a1\n  9458: u64 [a4 + 0x28] = a0\n  9461: a0 = u64 [s1 + 0xb0]\n  9465: u64 [a4 + 0x60] = a0\n  9468: a0 = u64 [s1 + 0x88]\n  9472: u64 [a4 + 0x58] = a0\n  9475: a0 = u64 [s1 + 0xb8]\n  9479: u64 [a4 + 0x50] = a0\n  9482: a0 = s1 + 0x1120\n  9486: a1 = s1 + 0x1100\n  9490: a2 = s1 + 0x10e0\n  9494: a3 = u64 [s1 + 0xc0]\n  9498: u64 [a4 + 0x48] = a3\n  9501: ra = 274, jump @573\n      : @295 [@dyn 137] (gas: 10)\n  9507: a1 = s1 + 0x10b8\n  9511: a0 = u64 [a1 + 0x80]\n  9515: u64 [s1 + 0x68] = a0\n  9518: a0 = u64 [a1 + 0x78]\n  9521: u64 [s1 + 0x60] = a0\n  9524: a0 = u64 [a1 + 0x70]\n  9527: u64 [s1 + 0x58] = a0\n  9530: a0 = u64 [a1 + 0x68]\n  9533: u64 [s1 + 0x50] = a0\n  9536: jump @417\n      : @296 (gas: 8)\n  9539: a1 = s1 + 0x18d8\n  9543: u64 [a1 + 1632] = 0\n  9547: u64 [a1 + 1624] = 0\n  9551: u64 [a1 + 1616] = 0\n  9555: u64 [a1 + 1608] = 0x1\n  9560: a0 = s1 + 0x1600\n  9564: a1 = s1 + 0x1f20\n  9568: ra = 276, jump @6\n      : @297 [@dyn 138] (gas: 3)\n  9574: t0 = 0x116\n  9578: a1 = s1 + 0x10b8\n  9582: fallthrough\n      : @298 [@dyn 139] (gas: 10)\n  9583: a2 = a1 + 0x500\n  9587: a0 = u64 [a2 + 0x58]\n  9590: u64 [s1 + 0x80] = a0\n  9594: a0 = u64 [a2 + 0x50]\n  9597: u64 [s1 + 0x78] = a0\n  9600: a0 = u64 [a2 + 0x48]\n  9603: u64 [s1 + 0x88] = a0\n  9607: a0 = s1 + 0x15e0\n  9611: a1 = 0x40\n  9614: ra = 280, jump @2\n      : @299 [@dyn 140] (gas: 26)\n  9620: t0 = s1 + 0x10b8\n  9624: a1 = t0 + 0x500\n  9628: a0 = u64 [a1 + 0x28]\n  9631: a3 = u64 [a1 + 0x40]\n  9634: a2 = u64 [a1 + 0x30]\n  9637: a4 = u64 [a1 + 0x38]\n  9640: a5 = a0 + 0x20\n  9643: u64 [s1 + 0xd8] = a0\n  9647: a0 = a5 <u a0\n  9650: a1 = a2 + a0\n  9653: u64 [s1 + 0xc0] = a2\n  9657: a2 = a1 <u a2\n  9660: a2 = a0 if a0 == 0\n  9663: a2 = a2 + a4\n  9666: u64 [s1 + 0xb0] = a4\n  9670: a0 = a2 <u a4\n  9673: u64 [s1 + 0xb8] = a3\n  9677: a0 = a0 + a3\n  9680: a3 = a5 | a2\n  9683: a0 = a0 | a1\n  9686: a3 = a3 | a0\n  9689: a3 = a3 >> 0x20\n  9692: a0 = a0 | a2\n  9695: a0 = a0 << 0x20\n  9698: a0 = a0 | a3\n  9701: jump @201 if a0 != 0\n      : @300 (gas: 9)\n  9705: u64 [t0 + 1304] = 0\n  9709: u64 [t0 + 1296] = 0\n  9713: u64 [t0 + 1288] = 0\n  9717: a0 = 0xa9059cbb00000000\n  9727: a1 = s1 + 0x15c0\n  9731: u64 [t0 + 0x520] = a0\n  9735: u64 [s1 + 0x70] = a5\n  9738: a0 = a5\n  9740: ra = 282, jump @4\n      : @301 [@dyn 141] (gas: 38)\n  9746: a1 = u64 [s1 + 0xd8]\n  9750: a0 = a1 + 0x24\n  9753: a1 = a0 <u a1\n  9756: a3 = u64 [s1 + 0xc0]\n  9760: a2 = a3 + a1\n  9763: a3 = a2 <u a3\n  9766: a3 = a1 if a1 == 0\n  9769: a1 = u64 [s1 + 0xb0]\n  9773: a3 = a3 + a1\n  9776: a1 = a3 <u a1\n  9779: a4 = u64 [s1 + 0xb8]\n  9783: a1 = a1 + a4\n  9786: a4 = u64 [s1 + 0xd0]\n  9790: a5 = s1 + 0x10b8\n  9794: u64 [a5 + 0x4c0] = a4\n  9798: a4 = u64 [s1 + 0xf8]\n  9802: u64 [a5 + 0x4b8] = a4\n  9806: a4 = u64 [s1 + 0x118]\n  9810: u64 [a5 + 0x4a0] = a4\n  9814: a4 = u64 [s1 + 0x110]\n  9818: u64 [a5 + 0x498] = a4\n  9822: a4 = u64 [s1 + 0x108]\n  9826: u64 [a5 + 0x490] = a4\n  9830: a4 = u64 [s1 + 0x100]\n  9834: u64 [a5 + 0x488] = a4\n  9838: a4 = u64 [s1 + 0xe8]\n  9842: u64 [a5 + 0x4b0] = a4\n  9846: u64 [a5 + 0x4d0] = a2\n  9850: u64 [a5 + 0x4c8] = a0\n  9854: u64 [a5 + 0x4d8] = a3\n  9858: u64 [a5 + 0x4e0] = a1\n  9862: a0 = s1 + 0x15a0\n  9866: a1 = s1 + 0x1580\n  9870: a2 = s1 + 0x1560\n  9874: a3 = s1 + 0x1540\n  9878: a4 = u64 [s1 + 0xf0]\n  9882: u64 [a5 + 0x4a8] = a4\n  9886: ra = 284, jump @635\n      : @302 [@dyn 142] (gas: 12)\n  9892: a0 = u64 [s1 + 0xd8]\n  9896: a2 = u64 [s1 + 0xb0]\n  9900: a0 = a0 | a2\n  9903: a1 = u64 [s1 + 0xc0]\n  9907: a3 = u64 [s1 + 0xb8]\n  9911: a1 = a1 | a3\n  9914: a0 = a0 | a1\n  9917: a0 = a0 >> 0x20\n  9920: a1 = a1 | a2\n  9923: a1 = a1 << 0x20\n  9926: a0 = a0 | a1\n  9929: jump @201 if a0 != 0\n      : @303 (gas: 53)\n  9933: a0 = s1 + 0x10b8\n  9937: a2 = a0 + 0x400\n  9941: a1 = u64 [a2 + 0xe8]\n  9945: u64 [s1 + 0xd0] = a1\n  9949: a5 = u64 [a2 + 0xf0]\n  9953: t2 = u64 [a0 + 0x500]\n  9957: a4 = u64 [a2 + 0xf8]\n  9961: a0 = u64 [s1 + 0xd8]\n  9965: t1 = a1 <u a0\n  9968: ra = a0\n  9970: t0 = u64 [s1 + 0xc0]\n  9974: a1 = a5 ^ t0\n  9977: a2 = a5 <u t0\n  9980: a2 = t1 if a1 == 0\n  9983: a0 = u64 [s1 + 0xb0]\n  9987: a3 = a4 - a0\n  9990: a1 = a3 <u a2\n  9993: a4 = a4 <u a0\n  9996: a0 = u64 [s1 + 0xb8]\n 10000: a0 = t2 - a0\n 10003: a0 = a0 - a4\n 10006: t2 = a0 - a1\n 10009: u64 [s1 + 0x60] = t2\n 10012: a3 = a3 - a2\n 10015: u64 [s1 + 0xf8] = a3\n 10019: a0 = a5 - t0\n 10022: a4 = a0 - t1\n 10025: u64 [s1 + 0x68] = a4\n 10028: a0 = u64 [s1 + 0xd0]\n 10032: a1 = a0 - ra\n 10035: u64 [s1 + 0xd0] = a1\n 10039: a0 = a1 + 0xffffffffffffffe0\n 10042: a1 = a0 <u a1\n 10045: a2 = a4 + a1\n 10048: a2 = a2 + 0xffffffffffffffff\n 10051: a3 = a2 ^ a4\n 10054: a4 = a2 <u a4\n 10057: a4 = a1 if a3 == 0\n 10060: a3 = u64 [s1 + 0xf8]\n 10064: a1 = a3 <u 0x1\n 10067: a1 = t2 - a1\n 10070: a3 = a3 + 0xffffffffffffffff\n 10073: a4 = a4 + a3\n 10076: a3 = a4 <u a3\n 10079: a3 = a3 + a1\n 10082: a5 = s1 + 0x10b8\n 10086: u64 [a5 + 0x468] = a0\n 10090: u64 [a5 + 0x470] = a2\n 10094: u64 [a5 + 0x478] = a4\n 10098: a1 = s1 + 0x1520\n 10102: u64 [a5 + 0x480] = a3\n 10106: a0 = ra\n 10108: ra = 286, jump @4\n      : @304 [@dyn 143] (gas: 22)\n 10114: a0 = s1 + 0x10b8\n 10118: a1 = u64 [s1 + 0x60]\n 10121: a2 = a0 + 0x400\n 10125: u64 [a2 + 0x40] = a1\n 10128: a1 = u64 [s1 + 0xf8]\n 10132: u64 [a2 + 0x38] = a1\n 10135: a1 = u64 [s1 + 0x68]\n 10138: u64 [a2 + 0x30] = a1\n 10141: a1 = u64 [s1 + 0xd0]\n 10145: u64 [a2 + 0x28] = a1\n 10148: a1 = u64 [s1 + 0xb8]\n 10152: u64 [a2 + 0x60] = a1\n 10155: a1 = u64 [s1 + 0xb0]\n 10159: u64 [a2 + 0x58] = a1\n 10162: a1 = u64 [s1 + 0xc0]\n 10166: u64 [a2 + 0x50] = a1\n 10169: a3 = a0\n 10171: a0 = s1 + 0x1500\n 10175: a1 = s1 + 0x14e0\n 10179: a2 = u64 [s1 + 0xd8]\n 10183: u64 [a3 + 0x448] = a2\n 10187: ra = 288, jump @563\n      : @305 [@dyn 144] (gas: 3)\n 10193: a0 = s1 + 0x14c0\n 10197: a1 = u64 [s1 + 0xd8]\n 10201: ra = 290, jump @2\n      : @306 [@dyn 145] (gas: 12)\n 10207: a1 = s1 + 0x10b8\n 10211: a2 = a1 + 0x400\n 10215: a0 = u64 [a2 + 0x20]\n 10218: u64 [s1 + 0xd8] = a0\n 10222: a0 = u64 [a2 + 0x18]\n 10225: u64 [s1 + 0xd0] = a0\n 10229: a0 = u64 [a2 + 0x10]\n 10232: u64 [s1 + 0xc0] = a0\n 10236: a0 = u64 [a2 + 0x8]\n 10239: u64 [s1 + 0xf8] = a0\n 10243: ecalli 9 // 'ref_time_left'\n 10245: fallthrough\n      : @307 (gas: 36)\n 10246: t0 = a0\n 10248: a0 = u64 [s1 + 0x78]\n 10251: a0 = reverse a0\n 10253: a1 = a0 << 0x20\n 10256: a2 = u64 [s1 + 0x80]\n 10260: a2 = reverse a2\n 10262: a2 = a2 >> 0x20\n 10265: a1 = a1 | a2\n 10268: a2 = u64 [s1 + 0x88]\n 10272: a2 = reverse a2\n 10274: a3 = a2 << 0x20\n 10277: a4 = 0x300b0\n 10282: a0 = a0 >> 0x20\n 10285: a0 = a0 | a3\n 10288: a2 = a2 >> 0x20\n 10291: u64 [0x300b8] = a0\n 10296: u64 [0x300b0] = a1\n 10301: u32 [0x300c0] = a2\n 10306: a2 = s1 + 0x18d8\n 10310: u64 [a2 + 1664] = 0\n 10314: u64 [a2 + 1656] = 0\n 10318: u64 [a2 + 1648] = 0\n 10322: a0 = u64 [s1 + 0xd8]\n 10326: a5 = u64 [s1 + 0xc0]\n 10330: a5 = a5 | a0\n 10333: a1 = u64 [s1 + 0xf8]\n 10337: a3 = a1\n 10339: a0 = u64 [s1 + 0xd0]\n 10343: a1 = a1 | a0\n 10346: a1 = a1 | a5\n 10349: a1 = a1 >> 0x20\n 10352: a0 = a0 | a5\n 10355: a0 = a0 << 0x20\n 10358: a0 = a0 | a1\n 10361: u64 [a2 + 1640] = 0\n 10365: jump @309 if a0 == 0\n      : @308 (gas: 1)\n 10368: jump @201\n      : @309 (gas: 7)\n 10371: a1 = a3\n 10373: i32 a0 = a3 + 0\n 10375: u64 [s1 + 0xd0] = a0\n 10379: a0 = u64 [s1 + 0x70]\n 10382: u64 [s1 + 0xc0] = t0\n 10386: u64 [s1 + 0xd8] = a4\n 10390: ra = 292, jump @12\n      : @310 [@dyn 146] (gas: 42)\n 10396: a1 = a0\n 10398: a3 = s1 + 0x18d8\n 10402: u32 [a3 + 1672] = 0\n 10406: a0 = u64 [s1 + 0xd0]\n 10410: a0 = a0 >u 0\n 10412: a4 = u64 [s1 + 0xc0]\n 10416: a2 = a4 >u 0x8fc\n 10420: a0 = a0 | a2\n 10423: a2 = -a0\n 10425: a4 = a3 + 0x600\n 10429: u64 [a4 + 0xc0] = a2\n 10433: u64 [a4 + 0xb8] = a2\n 10437: u64 [a4 + 0xb0] = a2\n 10441: u64 [a4 + 0xa8] = a2\n 10445: a2 = u64 [s1 + 0xd8]\n 10449: a2 = a2 << 0x20\n 10452: a2 = a2 >> 0x20\n 10455: a0 = a0 << 0x23\n 10458: a0 = a0 | a2\n 10461: a2 = s1 + 0x1f40\n 10465: a2 = a2 << 0x20\n 10468: a2 = a2 >> 0x20\n 10471: a3 = s1 + 0x1f80\n 10475: a3 = a3 << 0x20\n 10478: a3 = a3 | a2\n 10481: a1 = a1 << 0x20\n 10484: a2 = 0x200b0\n 10489: a1 = a1 >> 0x20\n 10492: a4 = u64 [s1 + 0xf8]\n 10496: a4 = a4 << 0x20\n 10499: a4 = a4 | a1\n 10502: a2 = a2 << 0x20\n 10505: a2 = a2 >> 0x20\n 10508: a1 = s1 + 0x1f60\n 10512: a1 = a1 << 0x20\n 10515: a5 = a1 | a2\n 10518: a1 = 0xffffffffffffffff\n 10521: a2 = 0xffffffffffffffff\n 10524: ecalli 1 // 'call'\n 10526: u64 [s1 + 0xf8] = a0\n 10530: a0 = s1 + 0x14a0\n 10534: ra = 294, jump @641\n      : @311 [@dyn 147] (gas: 2)\n 10540: a0 = u64 [s1 + 0xf8]\n 10544: jump @243 if a0 == 0\n      : @312 (gas: 3)\n 10548: a0 = s1 + 0x1480\n 10552: a1 = 0x40\n 10555: ra = 296, jump @2\n      : @313 [@dyn 148] (gas: 16)\n 10561: a2 = s1 + 0x10b8\n 10565: a5 = a2 + 0x300\n 10569: a3 = u64 [a5 + 0xe0]\n 10573: a4 = u64 [a5 + 0xd8]\n 10577: a0 = u64 [a5 + 0xd0]\n 10581: a1 = u64 [a5 + 0xc8]\n 10585: u64 [s1 + 0x130] = a0\n 10589: a0 = a0 | a3\n 10592: u64 [s1 + 0x138] = a1\n 10596: a1 = a1 | a4\n 10599: a1 = a1 | a0\n 10602: a1 = a1 >> 0x20\n 10605: a0 = a0 | a4\n 10608: a0 = a0 << 0x20\n 10611: a0 = a0 | a1\n 10614: jump @315 if a0 == 0\n      : @314 (gas: 1)\n 10617: jump @201\n      : @315 (gas: 10)\n 10620: u64 [a2 + 952] = 0\n 10624: u64 [a2 + 944] = 0\n 10628: u64 [a2 + 936] = 0\n 10632: a0 = 0x8c379a000000000\n 10642: a1 = s1 + 0x1460\n 10646: u64 [a2 + 0x3c0] = a0\n 10650: a0 = u64 [s1 + 0x138]\n 10654: u64 [s1 + 0x128] = a3\n 10658: u64 [s1 + 0x120] = a4\n 10662: ra = 298, jump @4\n      : @316 [@dyn 149] (gas: 1)\n 10668: t0 = 300, jump @660\n      : @317 [@dyn 150] (gas: 1)\n 10674: jump @319 if a0 != 0\n      : @318 (gas: 1)\n 10677: jump @201\n      : @319 (gas: 9)\n 10680: a0 = u64 [s1 + 0x138]\n 10684: i32 a0 = a0 + 0x4\n 10687: a2 = s1 + 0x10b8\n 10691: u64 [a2 + 928] = 0\n 10695: u64 [a2 + 920] = 0\n 10699: u64 [a2 + 904] = 0x20\n 10704: a1 = s1 + 0x1440\n 10708: u64 [a2 + 912] = 0\n 10712: ra = 302, jump @4\n      : @320 [@dyn 151] (gas: 4)\n 10718: a2 = s1 + 0x100\n 10722: a0 = u64 [a2 + 0x20]\n 10725: a0 = a0 + 0xffffffffffffffdc\n 10728: t0 = 304, jump @659\n      : @321 [@dyn 152] (gas: 1)\n 10734: jump @323 if a0 != 0\n      : @322 (gas: 1)\n 10737: jump @201\n      : @323 (gas: 9)\n 10740: a0 = u64 [s1 + 0x138]\n 10744: i32 a0 = a0 + 0x24\n 10747: a2 = s1 + 0x10b8\n 10751: u64 [a2 + 896] = 0\n 10755: u64 [a2 + 888] = 0\n 10759: u64 [a2 + 872] = 0x16\n 10764: a1 = s1 + 0x1420\n 10768: u64 [a2 + 880] = 0\n 10772: ra = 306, jump @4\n      : @324 [@dyn 153] (gas: 3)\n 10778: a0 = 0xffffffbc\n 10788: a2 = s1 + 0x100\n 10792: t0 = 308, jump @659\n      : @325 [@dyn 154] (gas: 1)\n 10798: jump @327 if a0 != 0\n      : @326 (gas: 1)\n 10801: jump @201\n      : @327 (gas: 14)\n 10804: a0 = u64 [s1 + 0x138]\n 10808: i32 a0 = a0 + 0x44\n 10811: a1 = u64 [0x20018]\n 10816: a2 = u64 [0x20020]\n 10821: a3 = u64 [0x20028]\n 10826: a4 = s1 + 0x10b8\n 10830: a5 = a4 + 0x300\n 10834: u64 [a5 + 0x60] = a1\n 10837: u64 [a5 + 0x58] = a2\n 10840: u64 [a5 + 0x50] = a3\n 10843: a1 = s1 + 0x1400\n 10847: u64 [a4 + 840] = 0\n 10851: ra = 0xb8\n 10855: jump @4\n      : @328 (gas: 4)\n 10858: a0 = s1 + 0x7ff\n 10862: a0 = a0 + 0x141\n 10866: a1 = 0x40\n 10869: ra = 310, jump @2\n      : @329 [@dyn 155] (gas: 14)\n 10875: a0 = s1 + 0x7ff\n 10879: a0 = a0 + 0xb9\n 10883: a1 = u64 [a0 + 0xa0]\n 10887: u64 [s1 + 0x130] = a1\n 10891: a1 = u64 [a0 + 0x98]\n 10895: u64 [s1 + 0x128] = a1\n 10899: a1 = u64 [a0 + 0x90]\n 10903: u64 [s1 + 0x120] = a1\n 10907: a0 = u64 [a0 + 0x88]\n 10911: u64 [s1 + 0x138] = a0\n 10915: ra = 0x138\n 10919: ecalli 11 // 'return_data_size'\n 10921: t0 = 0x13a\n 10925: jump @661\n      : @330 [@dyn 156] (gas: 1)\n 10928: t0 = 314, jump @661\n      : @331 [@dyn 157] (gas: 1)\n 10934: jump @333 if a1 == 0\n      : @332 (gas: 1)\n 10937: jump @201\n      : @333 (gas: 3)\n 10940: a2 = a0\n 10942: a0 = a0 >> 0x20\n 10945: jump @335 if a0 == 0\n      : @334 (gas: 1)\n 10948: jump @201\n      : @335 (gas: 1)\n 10951: t0 = 316, jump @668\n      : @336 [@dyn 158] (gas: 1)\n 10957: ra = 318, jump @12\n      : @337 [@dyn 159] (gas: 11)\n 10963: a1 = s1 + 0x18d8\n 10967: a2 = u64 [s1 + 0x128]\n 10971: u32 [a1 + 0x3c8] = a2\n 10975: i32 a0 = a0 + 0\n 10977: a1 = s1 + 0x2000\n 10981: i32 a1 = a1 + 0xfffffffffffffca0\n 10985: a2 = 0\n 10987: ecalli 10 // 'return_data_copy'\n 10989: a0 = s1 + 0x18d8\n 10993: a0 = i32 [a0 + 0x3c8]\n 10997: jump @222\n      : @338 (gas: 20)\n 11000: u64 [s1 + 0x7a0] = a2\n 11004: a0 = u64 [s1 + 0x80]\n 11008: u64 [s1 + 0x7c0] = a0\n 11012: u64 [s1 + 0x7a8] = a3\n 11016: a0 = u64 [s1 + 0x98]\n 11020: u64 [s1 + 0x7c8] = a0\n 11024: u64 [s1 + 0x7b0] = a4\n 11028: a0 = u64 [s1 + 0xa0]\n 11032: u64 [s1 + 0x7d0] = a0\n 11036: u64 [s1 + 0x7b8] = a5\n 11040: a0 = s1 + 0x7e0\n 11044: a1 = s1 + 0x7c0\n 11048: u64 [s1 + 0x110] = a2\n 11052: a2 = s1 + 0x7a0\n 11056: u64 [s1 + 0x108] = a3\n 11060: a3 = u64 [s1 + 0xc8]\n 11064: u64 [s1 + 0x7d8] = a3\n 11068: u64 [s1 + 0x60] = a4\n 11071: u64 [s1 + 0x58] = a5\n 11074: ra = 320, jump @580\n      : @339 [@dyn 160] (gas: 18)\n 11080: a3 = u64 [s1 + 0x7e0]\n 11084: a0 = u64 [s1 + 0x7e8]\n 11088: a1 = u64 [s1 + 0x7f0]\n 11092: a2 = u64 [s1 + 0x7f8]\n 11096: u64 [s1 + 1880] = 0\n 11100: u64 [s1 + 1872] = 0\n 11104: a4 = u64 [s1 + 0x128]\n 11108: u64 [s1 + 0x748] = a4\n 11112: a4 = u64 [s1 + 0xf8]\n 11116: u64 [s1 + 0x740] = a4\n 11120: u64 [s1 + 0x778] = a2\n 11124: u64 [s1 + 0x770] = a1\n 11128: u64 [s1 + 0x768] = a0\n 11132: a0 = s1 + 0x780\n 11136: a1 = s1 + 0x760\n 11140: a2 = s1 + 0x740\n 11144: u64 [s1 + 0x760] = a3\n 11148: ra = 322, jump @588\n      : @340 [@dyn 161] (gas: 28)\n 11154: a0 = u64 [s1 + 0x780]\n 11158: u64 [s1 + 0x130] = a0\n 11162: a0 = u64 [s1 + 0x788]\n 11166: u64 [s1 + 0x138] = a0\n 11170: a0 = u64 [s1 + 0x790]\n 11174: u64 [s1 + 0x128] = a0\n 11178: a0 = u64 [s1 + 0x798]\n 11182: u64 [s1 + 0x120] = a0\n 11186: a0 = u64 [s1 + 0x58]\n 11189: u64 [s1 + 0x6f8] = a0\n 11193: a0 = u64 [s1 + 0x60]\n 11196: u64 [s1 + 0x6f0] = a0\n 11200: a0 = u64 [s1 + 0x108]\n 11204: u64 [s1 + 0x6e8] = a0\n 11208: a0 = u64 [s1 + 0x110]\n 11212: u64 [s1 + 0x6e0] = a0\n 11216: a0 = u64 [s1 + 0xd0]\n 11220: u64 [s1 + 0x718] = a0\n 11224: a0 = u64 [s1 + 0x78]\n 11227: u64 [s1 + 0x710] = a0\n 11231: a0 = u64 [s1 + 0x70]\n 11234: u64 [s1 + 0x708] = a0\n 11238: a0 = s1 + 0x720\n 11242: a1 = s1 + 0x700\n 11246: a2 = s1 + 0x6e0\n 11250: a3 = u64 [s1 + 0x68]\n 11253: u64 [s1 + 0x700] = a3\n 11257: ra = 324, jump @580\n      : @341 [@dyn 162] (gas: 19)\n 11263: a4 = s1 + 0x700\n 11267: a3 = u64 [a4 + 0x20]\n 11270: a0 = u64 [a4 + 0x28]\n 11273: a1 = u64 [a4 + 0x30]\n 11276: a2 = u64 [a4 + 0x38]\n 11279: u64 [s1 + 1688] = 0\n 11283: u64 [s1 + 1680] = 0\n 11287: a4 = u64 [s1 + 0x118]\n 11291: u64 [s1 + 0x688] = a4\n 11295: a4 = u64 [s1 + 0x100]\n 11299: u64 [s1 + 0x680] = a4\n 11303: u64 [s1 + 0x6b8] = a2\n 11307: u64 [s1 + 0x6b0] = a1\n 11311: u64 [s1 + 0x6a8] = a0\n 11315: a0 = s1 + 0x6c0\n 11319: a1 = s1 + 0x6a0\n 11323: a2 = s1 + 0x680\n 11327: u64 [s1 + 0x6a0] = a3\n 11331: ra = 326, jump @588\n      : @342 [@dyn 163] (gas: 32)\n 11337: a1 = s1 + 0x600\n 11341: a2 = u64 [a1 + 0xd8]\n 11345: ra = u64 [s1 + 0x6c8]\n 11349: a0 = u64 [a1 + 0xc0]\n 11353: u64 [s1 + 0x118] = a0\n 11357: a3 = u64 [a1 + 0xd0]\n 11361: a4 = u64 [s1 + 0x120]\n 11365: t2 = a4 ^ a2\n 11368: a1 = u64 [s1 + 0x138]\n 11372: a5 = a1 ^ ra\n 11375: u64 [s1 + 0x110] = a5\n 11379: t1 = a1 <u ra\n 11382: t0 = u64 [s1 + 0x130]\n 11386: a5 = t0 <u a0\n 11389: a0 = u64 [s1 + 0x110]\n 11393: a5 = t1 if a0 != 0\n 11396: a1 = a4 <u a2\n 11399: t1 = u64 [s1 + 0x128]\n 11403: a0 = t1 <u a3\n 11406: a0 = a1 if t2 != 0\n 11409: a1 = a4\n 11411: a4 = t1 ^ a3\n 11414: a4 = a4 | t2\n 11417: a5 = a0 if a4 != 0\n 11420: a0 = t0\n 11422: a1 = a2 if a5 == 0\n 11425: t1 = a3 if a5 == 0\n 11428: a2 = u64 [s1 + 0x138]\n 11432: a2 = ra if a5 == 0\n 11435: a3 = u64 [s1 + 0x118]\n 11439: a0 = a3 if a5 == 0\n 11442: jump @353\n      : @343 (gas: 7)\n 11445: a2 = t0\n 11447: a4 = ra <u 0x3e8\n 11451: a4 = 0 if t2 != 0\n 11453: a5 = u64 [s1 + 0x118]\n 11457: a5 = a5 | a2\n 11460: a4 = 0 if a5 != 0\n 11462: jump @345 if a4 == 0\n      : @344 (gas: 1)\n 11465: jump @520\n      : @345 (gas: 27)\n 11468: a1 = a2\n 11470: a0 = ra + 0xfffffffffffffc18\n 11474: a5 = s1 + 0x100\n 11478: u64 [a5 + 0x30] = a0\n 11481: a0 = a0 <u ra\n 11484: a3 = t2 + a0\n 11487: a4 = a3 + 0xffffffffffffffff\n 11490: a3 = a4 ^ t2\n 11493: u64 [a5 + 0x38] = a4\n 11496: a2 = a4 <u t2\n 11499: a2 = a0 if a3 == 0\n 11502: a0 = a1 + 0xffffffffffffffff\n 11505: a2 = a2 + a0\n 11508: u64 [a5 + 0x28] = a2\n 11511: a0 = a2 <u a0\n 11514: u64 [a5 + 0x20] = a0\n 11517: a0 = a1 <u 0x1\n 11520: a1 = u64 [a5 + 0x18]\n 11523: a1 = a1 - a0\n 11526: u64 [a5 + 0x18] = a1\n 11529: u64 [s1 + 1560] = 0\n 11533: u64 [s1 + 1552] = 0\n 11537: u64 [s1 + 1544] = 0\n 11541: a1 = s1 + 0x600\n 11545: u64 [s1 + 1536] = 0\n 11549: a0 = 0\n 11551: ra = 328, jump @4\n      : @346 [@dyn 164] (gas: 7)\n 11557: u64 [s1 + 1528] = 0\n 11561: u64 [s1 + 1520] = 0\n 11565: u64 [s1 + 1504] = 0x4\n 11570: a0 = 0x20\n 11573: a1 = s1 + 0x5e0\n 11577: u64 [s1 + 1512] = 0\n 11581: ra = 330, jump @4\n      : @347 [@dyn 165] (gas: 2)\n 11587: a1 = i32 [0x200a4]\n 11592: jump @349 if a1 >u 63\n      : @348 (gas: 2)\n 11596: u32 [0x200a4] = 0x40\n 11602: fallthrough\n      : @349 (gas: 17)\n 11603: a0 = u64 [s1 + 0x120]\n 11607: a1 = u64 [s1 + 0x118]\n 11611: a0 = a0 + a1\n 11614: u64 [s1 + 0x120] = a0\n 11618: a0 = sp + 0xffffffffffffffe0\n 11621: a2 = a0 & 0xffffffffffffffe0\n 11624: u64 [s1 + 0x118] = a2\n 11628: sp = a2\n 11630: a0 = 0x200b0\n 11635: i32 a0 = a0 + 0\n 11637: i32 a2 = a2 + 0\n 11639: a1 = 0x40\n 11642: ra = 0x14c\n 11646: ecalli 8 // 'hash_keccak_256'\n 11648: a3 = u64 [s1 + 0x118]\n 11652: t0 = 0x14e\n 11656: jump @670\n      : @350 [@dyn 166] (gas: 2)\n 11659: a3 = u64 [s1 + 0x118]\n 11663: t0 = 334, jump @670\n      : @351 [@dyn 167] (gas: 14)\n 11669: i32 a4 = a4 + 0xfffffffffffff8d8\n 11673: a4 = a4 + s1\n 11676: a5 = a4 + 0x400\n 11680: u64 [a5 + 0x20] = a3\n 11683: u64 [a5 + 0x18] = a2\n 11686: u64 [a5 + 0x10] = a1\n 11689: u64 [a5 + 0x8] = a0\n 11692: u64 [a4 + 1088] = 0\n 11696: u64 [a4 + 1080] = 0\n 11700: u64 [a4 + 1072] = 0\n 11704: u64 [a5 + 40] = 0x3e8\n 11709: a0 = s1 + 0x1ce0\n 11713: a1 = s1 + 0x1d00\n 11717: ra = 336, jump @8\n      : @352 [@dyn 168] (gas: 6)\n 11723: a3 = s1 + 0x100\n 11727: a1 = u64 [a3 + 0x20]\n 11730: a0 = u64 [a3 + 0x30]\n 11733: a2 = u64 [a3 + 0x38]\n 11736: t1 = u64 [s1 + 0x128]\n 11740: fallthrough\n      : @353 (gas: 14)\n 11741: u64 [s1 + 0x130] = a0\n 11745: u64 [s1 + 0x128] = t1\n 11749: a0 = a0 | t1\n 11752: u64 [s1 + 0x138] = a2\n 11756: u64 [s1 + 0x120] = a1\n 11760: a1 = a1 | a2\n 11763: a0 = a0 | a1\n 11766: a0 = a0 >u 0\n 11768: u64 [s1 + 1496] = 0\n 11772: u64 [s1 + 1488] = 0\n 11776: u64 [s1 + 0x5c0] = a0\n 11780: a0 = s1 + 0x5c0\n 11784: u64 [s1 + 1480] = 0\n 11788: ra = 338, jump @621\n      : @354 [@dyn 169] (gas: 12)\n 11794: a0 = u64 [s1 + 0xd8]\n 11798: a0 = a0 << 0x20\n 11801: a0 = a0 >> 0x20\n 11804: u64 [s1 + 1464] = 0\n 11808: u64 [s1 + 0x5b0] = a0\n 11812: a0 = u64 [s1 + 0xe0]\n 11816: u64 [s1 + 0x5a8] = a0\n 11820: a1 = s1 + 0x5a0\n 11824: a0 = u64 [s1 + 0xe8]\n 11828: u64 [s1 + 0x5a0] = a0\n 11832: a0 = 0\n 11834: ra = 340, jump @4\n      : @355 [@dyn 170] (gas: 7)\n 11840: u64 [s1 + 1432] = 0\n 11844: u64 [s1 + 1424] = 0\n 11848: u64 [s1 + 1408] = 0x4\n 11853: a0 = 0x20\n 11856: a1 = s1 + 0x580\n 11860: u64 [s1 + 1416] = 0\n 11864: ra = 342, jump @4\n      : @356 [@dyn 171] (gas: 6)\n 11870: a0 = sp + 0xffffffffffffffe0\n 11873: a0 = a0 & 0xffffffffffffffe0\n 11876: u64 [s1 + 0x118] = a0\n 11880: sp = a0\n 11882: a1 = i32 [0x200a4]\n 11887: jump @358 if a1 >u 63\n      : @357 (gas: 2)\n 11891: u32 [0x200a4] = 0x40\n 11897: fallthrough\n      : @358 (gas: 25)\n 11898: a0 = sp + 0xffffffffffffffe0\n 11901: a2 = a0 & 0xffffffffffffffe0\n 11904: u64 [s1 + 0x110] = a2\n 11908: sp = a2\n 11910: a0 = 0x200b0\n 11915: i32 a0 = a0 + 0\n 11917: i32 a2 = a2 + 0\n 11919: a1 = 0x40\n 11922: ecalli 8 // 'hash_keccak_256'\n 11924: a3 = u64 [s1 + 0x110]\n 11928: a0 = u64 [a3 + 0x18]\n 11931: a1 = u64 [a3 + 0x10]\n 11934: a2 = u64 [a3 + 0x8]\n 11937: a3 = u64 [a3]\n 11939: a0 = reverse a0\n 11941: a4 = reverse a1\n 11943: a2 = reverse a2\n 11945: a3 = reverse a3\n 11947: a1 = u64 [s1 + 0x118]\n 11951: u64 [a1 + 0x18] = a3\n 11954: u64 [a1 + 0x10] = a2\n 11957: u64 [a1 + 0x8] = a4\n 11960: u64 [a1] = a0\n 11962: a0 = s1 + 0x560\n 11966: ra = 344, jump @6\n      : @359 [@dyn 172] (gas: 20)\n 11972: a3 = u64 [s1 + 0x560]\n 11976: a0 = u64 [s1 + 0x568]\n 11980: a1 = u64 [s1 + 0x570]\n 11984: a2 = u64 [s1 + 0x578]\n 11988: a4 = u64 [s1 + 0x120]\n 11992: u64 [s1 + 0x518] = a4\n 11996: a4 = u64 [s1 + 0x128]\n 12000: u64 [s1 + 0x510] = a4\n 12004: a4 = u64 [s1 + 0x138]\n 12008: u64 [s1 + 0x508] = a4\n 12012: a4 = u64 [s1 + 0x130]\n 12016: u64 [s1 + 0x500] = a4\n 12020: u64 [s1 + 0x538] = a2\n 12024: u64 [s1 + 0x530] = a1\n 12028: u64 [s1 + 0x528] = a0\n 12032: a0 = s1 + 0x540\n 12036: a1 = s1 + 0x520\n 12040: a2 = s1 + 0x500\n 12044: u64 [s1 + 0x520] = a3\n 12048: ra = 346, jump @613\n      : @360 [@dyn 173] (gas: 14)\n 12054: a4 = s1 + 0x500\n 12058: a0 = u64 [a4 + 0x58]\n 12061: a1 = u64 [a4 + 0x50]\n 12064: a2 = u64 [a4 + 0x48]\n 12067: a3 = u64 [a4 + 0x40]\n 12070: a4 = s1 + 0x18d8\n 12074: a5 = a4 + 0x400\n 12078: u64 [a5 + 0x60] = a0\n 12081: u64 [a5 + 0x58] = a1\n 12084: u64 [a5 + 0x50] = a2\n 12087: u64 [a5 + 0x48] = a3\n 12090: a1 = s1 + 0x1d20\n 12094: a0 = u64 [s1 + 0x118]\n 12098: ra = 348, jump @8\n      : @361 [@dyn 174] (gas: 8)\n 12104: a0 = s1 + 0x18d8\n 12108: u64 [a0 + 1152] = 0\n 12112: u64 [a0 + 1144] = 0\n 12116: u64 [a0 + 1136] = 0\n 12120: u64 [a0 + 1128] = 0x3\n 12125: a0 = s1 + 0x4e0\n 12129: a1 = s1 + 0x1d40\n 12133: ra = 350, jump @6\n      : @362 [@dyn 175] (gas: 21)\n 12139: a3 = u64 [s1 + 0x4e0]\n 12143: a0 = u64 [s1 + 0x4e8]\n 12147: a1 = u64 [s1 + 0x4f0]\n 12151: a2 = u64 [s1 + 0x4f8]\n 12155: a5 = s1 + 0x100\n 12159: a4 = u64 [a5 + 0x20]\n 12162: u64 [s1 + 0x498] = a4\n 12166: a4 = u64 [a5 + 0x28]\n 12169: u64 [s1 + 0x490] = a4\n 12173: a4 = u64 [a5 + 0x38]\n 12176: u64 [s1 + 0x488] = a4\n 12180: a4 = u64 [a5 + 0x30]\n 12183: u64 [s1 + 0x480] = a4\n 12187: u64 [s1 + 0x4b8] = a2\n 12191: u64 [s1 + 0x4b0] = a1\n 12195: u64 [s1 + 0x4a8] = a0\n 12199: a0 = s1 + 0x4c0\n 12203: a1 = s1 + 0x4a0\n 12207: a2 = s1 + 0x480\n 12211: u64 [s1 + 0x4a0] = a3\n 12215: ra = 352, jump @613\n      : @363 [@dyn 176] (gas: 17)\n 12221: a0 = u64 [s1 + 0x4c0]\n 12225: a1 = u64 [s1 + 0x4c8]\n 12229: a2 = u64 [s1 + 0x4d0]\n 12233: a3 = u64 [s1 + 0x4d8]\n 12237: a4 = s1 + 0x18d8\n 12241: u64 [a4 + 1184] = 0\n 12245: u64 [a4 + 1176] = 0\n 12249: u64 [a4 + 1168] = 0\n 12253: u64 [a4 + 1160] = 0x3\n 12258: a5 = a4 + 0x400\n 12262: u64 [a5 + 0xc0] = a3\n 12266: u64 [a5 + 0xb8] = a2\n 12270: u64 [a5 + 0xb0] = a1\n 12274: u64 [a5 + 0xa8] = a0\n 12278: a0 = s1 + 0x1d60\n 12282: a1 = s1 + 0x1d80\n 12286: ra = 354, jump @8\n      : @364 [@dyn 177] (gas: 8)\n 12292: a0 = s1 + 0x18d8\n 12296: u64 [a0 + 1248] = 0\n 12300: u64 [a0 + 1240] = 0\n 12304: u64 [a0 + 1232] = 0\n 12308: u64 [a0 + 1224] = 0x2\n 12313: a0 = s1 + 0x460\n 12317: a1 = s1 + 0x1da0\n 12321: ra = 356, jump @6\n      : @365 [@dyn 178] (gas: 30)\n 12327: a0 = u64 [s1 + 0x88]\n 12331: a2 = a0 >> 0x10\n 12334: a5 = u64 [s1 + 0x90]\n 12338: a1 = a5 << 0x30\n 12341: t0 = a2 | a1\n 12344: a1 = u64 [s1 + 0xa8]\n 12348: a1 = a1 & 0xffffffffffffffff\n 12351: a2 = u32 [s1 + 0x47c]\n 12355: a3 = u64 [s1 + 0xb0]\n 12359: a4 = u64 [s1 + 0xb8]\n 12363: a3 = a3 & a4\n 12366: a4 = a0 << 0x30\n 12369: a3 = a3 | a4\n 12372: a2 = a2 << 0x20\n 12375: a4 = a5 << 0x10\n 12378: a4 = a4 >> 0x20\n 12381: a2 = a2 | a4\n 12384: a0 = s1 + 0x18d8\n 12388: u64 [a0 + 1256] = 0x2\n 12393: u64 [a0 + 0x518] = t0\n 12397: a4 = a0 + 0x500\n 12401: u64 [a4 + 0x10] = a3\n 12404: u64 [a4 + 0x8] = a1\n 12407: u64 [a4 + 0x20] = a2\n 12410: u64 [a0 + 1280] = 0\n 12414: u64 [a0 + 1272] = 0\n 12418: u64 [a0 + 1264] = 0\n 12422: a0 = s1 + 0x1dc0\n 12426: a1 = s1 + 0x1de0\n 12430: ra = 358, jump @8\n      : @366 [@dyn 179] (gas: 3)\n 12436: a0 = s1 + 0x440\n 12440: a1 = 0x40\n 12443: ra = 360, jump @2\n      : @367 [@dyn 180] (gas: 13)\n 12449: a0 = s1 + 0x400\n 12453: a4 = u64 [a0 + 0x58]\n 12456: a5 = u64 [a0 + 0x50]\n 12459: a3 = u64 [a0 + 0x48]\n 12462: a2 = u64 [a0 + 0x40]\n 12465: a0 = a3 | a4\n 12468: a1 = a2 | a5\n 12471: a1 = a1 | a0\n 12474: a1 = a1 >> 0x20\n 12477: a0 = a0 | a5\n 12480: a0 = a0 << 0x20\n 12483: a0 = a0 | a1\n 12486: jump @369 if a0 == 0\n      : @368 (gas: 1)\n 12489: jump @201\n      : @369 (gas: 15)\n 12492: a0 = u64 [s1 + 0x80]\n 12496: u64 [s1 + 0x420] = a0\n 12500: a0 = u64 [s1 + 0x98]\n 12504: u64 [s1 + 0x428] = a0\n 12508: a0 = u64 [s1 + 0xa0]\n 12512: u64 [s1 + 0x430] = a0\n 12516: a1 = s1 + 0x420\n 12520: a0 = u64 [s1 + 0xc8]\n 12524: u64 [s1 + 0x438] = a0\n 12528: a0 = a2\n 12530: u64 [s1 + 0x118] = a2\n 12534: u64 [s1 + 0x110] = a3\n 12538: u64 [s1 + 0x108] = a4\n 12542: u64 [s1 + 0x100] = a5\n 12546: ra = 362, jump @4\n      : @370 [@dyn 181] (gas: 11)\n 12552: a4 = s1 + 0x100\n 12556: a2 = u64 [a4 + 0x18]\n 12559: a0 = u64 [a4 + 0x8]\n 12562: a1 = u64 [a4]\n 12564: a0 = a0 | a1\n 12567: a1 = 0xffffffe0\n 12577: a1 = a2 <u a1\n 12580: a3 = u64 [a4 + 0x10]\n 12583: a1 = 0 if a3 != 0\n 12585: a1 = 0 if a0 != 0\n 12587: jump @372 if a1 != 0\n      : @371 (gas: 1)\n 12590: jump @201\n      : @372 (gas: 12)\n 12593: i32 a0 = a2 + 0x20\n 12596: a1 = u64 [s1 + 0x68]\n 12599: a3 = s1 + 0x400\n 12603: u64 [a3] = a1\n 12605: a1 = u64 [s1 + 0x70]\n 12608: u64 [a3 + 0x8] = a1\n 12611: a1 = u64 [s1 + 0x78]\n 12614: u64 [a3 + 0x10] = a1\n 12617: a1 = s1 + 0x400\n 12621: a2 = u64 [s1 + 0xd0]\n 12625: u64 [a3 + 0x18] = a2\n 12628: ra = 364, jump @4\n      : @373 [@dyn 182] (gas: 6)\n 12634: a0 = u64 [s1 + 0xc0]\n 12638: ra = 0x16e\n 12642: ecalli 5 // 'caller'\n 12644: a2 = u64 [s1 + 0xf0]\n 12648: t0 = 0x170\n 12652: jump @677\n      : @374 [@dyn 183] (gas: 2)\n 12655: a2 = u64 [s1 + 0xf0]\n 12659: t0 = 368, jump @677\n      : @375 [@dyn 184] (gas: 48)\n 12665: t0 = a1 | a0\n 12668: a3 = a3 >> 0x20\n 12671: a2 = reverse a2\n 12673: a1 = a2 << 0x20\n 12676: a1 = a1 | a3\n 12679: a2 = a2 >> 0x20\n 12682: u64 [s1 + 984] = 0\n 12686: a3 = u64 [0x20068]\n 12691: a4 = u64 [0x20070]\n 12696: a5 = u64 [0x20078]\n 12701: a0 = u64 [0x20080]\n 12706: u64 [s1 + 0x3f8] = a3\n 12710: u64 [s1 + 0x3f0] = a4\n 12714: u64 [s1 + 0x3e8] = a5\n 12718: u64 [s1 + 0x3e0] = a0\n 12722: u64 [s1 + 0x3d0] = a2\n 12726: u64 [s1 + 0x3c8] = a1\n 12730: a1 = 0x40\n 12733: a2 = s1 + 0x3e0\n 12737: a3 = s1 + 0x3c0\n 12741: u64 [s1 + 0x3c0] = t0\n 12745: a0 = u64 [s1 + 0x118]\n 12749: ra = 0x172\n 12753: sp = sp + 0xffffffffffffff60\n 12757: u64 [sp + 0x98] = ra\n 12761: u64 [sp + 0x90] = s0\n 12765: u64 [sp + 0x88] = s1\n 12769: s0 = sp + 0xa0\n 12773: sp = sp & 0xffffffffffffffe0\n 12776: a4 = u64 [a3]\n 12778: u64 [sp + 0x38] = a4\n 12781: a4 = u64 [a3 + 0x8]\n 12784: u64 [sp + 0x30] = a4\n 12787: a4 = u64 [a3 + 0x10]\n 12790: u64 [sp + 0x28] = a4\n 12793: a3 = u64 [a3 + 0x18]\n 12796: u64 [sp + 0x20] = a3\n 12799: a3 = u64 [a2]\n 12801: u64 [sp + 0x18] = a3\n 12804: a3 = u64 [a2 + 0x8]\n 12807: u64 [sp + 0x10] = a3\n 12810: a3 = u64 [a2 + 0x10]\n 12813: u64 [sp + 0x8] = a3\n 12816: a2 = u64 [a2 + 0x18]\n 12819: u64 [sp] = a2\n 12821: s1 = a1\n 12823: ra = 0x8\n 12826: jump @12\n      : @376 [@dyn 185] (gas: 3)\n 12829: a0 = s1 + 0x3a0\n 12833: a1 = 0x40\n 12836: ra = 372, jump @2\n      : @377 [@dyn 186] (gas: 13)\n 12842: a4 = s1 + 0x300\n 12846: a0 = u64 [a4 + 0xb8]\n 12850: a1 = u64 [a4 + 0xb0]\n 12854: a2 = u64 [a4 + 0xa8]\n 12858: a3 = u64 [a4 + 0xa0]\n 12862: a0 = a0 | a2\n 12865: a2 = a3 | a1\n 12868: a2 = a2 | a0\n 12871: a2 = a2 >> 0x20\n 12874: a0 = a0 | a1\n 12877: a0 = a0 << 0x20\n 12880: a0 = a0 | a2\n 12883: jump @379 if a0 == 0\n      : @378 (gas: 1)\n 12886: jump @201\n      : @379 (gas: 15)\n 12889: a2 = s1 + 0x100\n 12893: a0 = u64 [a2 + 0x30]\n 12896: a4 = s1 + 0x300\n 12900: u64 [a4 + 0x80] = a0\n 12904: a0 = u64 [a2 + 0x38]\n 12907: u64 [a4 + 0x88] = a0\n 12911: a0 = u64 [a2 + 0x28]\n 12914: u64 [a4 + 0x90] = a0\n 12918: a1 = s1 + 0x380\n 12922: a0 = u64 [a2 + 0x20]\n 12925: u64 [a4 + 0x98] = a0\n 12929: a0 = a3\n 12931: u64 [s1 + 0x138] = a3\n 12935: ra = 0x1d6\n 12939: jump @4\n      : @380 (gas: 3)\n 12942: a0 = s1 + 0x1360\n 12946: a1 = 0x40\n 12949: ra = 374, jump @2\n      : @381 [@dyn 187] (gas: 3)\n 12955: a0 = s1 + 0x10b8\n 12959: a2 = a0 + 0x200\n 12963: t0 = 376, jump @674\n      : @382 [@dyn 188] (gas: 4)\n 12969: ra = 0x17a\n 12973: ecalli 11 // 'return_data_size'\n 12975: t0 = 0x17c\n 12979: jump @661\n      : @383 [@dyn 189] (gas: 1)\n 12982: t0 = 380, jump @661\n      : @384 [@dyn 190] (gas: 1)\n 12988: jump @386 if a1 == 0\n      : @385 (gas: 1)\n 12991: jump @201\n      : @386 (gas: 3)\n 12994: a2 = a0\n 12996: a0 = a0 >> 0x20\n 12999: jump @388 if a0 == 0\n      : @387 (gas: 1)\n 13002: jump @201\n      : @388 (gas: 1)\n 13005: t0 = 382, jump @668\n      : @389 [@dyn 191] (gas: 1)\n 13011: ra = 384, jump @12\n      : @390 [@dyn 192] (gas: 11)\n 13017: a1 = s1 + 0x18d8\n 13021: a2 = u64 [s1 + 0x128]\n 13025: u32 [a1 + 0x748] = a2\n 13029: i32 a0 = a0 + 0\n 13031: a1 = s1 + 0x2000\n 13035: i32 a1 = a1 + 0x20\n 13038: a2 = 0\n 13040: ecalli 10 // 'return_data_copy'\n 13042: a0 = s1 + 0x18d8\n 13046: a0 = i32 [a0 + 0x748]\n 13050: jump @222\n      : @391 (gas: 3)\n 13053: a0 = s1 + 0x16a0\n 13057: a1 = 0x40\n 13060: ra = 386, jump @2\n      : @392 [@dyn 193] (gas: 15)\n 13066: a2 = s1 + 0x10b8\n 13070: a4 = u64 [a2 + 0x600]\n 13074: a0 = a2 + 0x500\n 13078: a5 = u64 [a0 + 0xf8]\n 13082: a3 = u64 [a0 + 0xf0]\n 13086: a1 = u64 [a0 + 0xe8]\n 13090: a0 = a3 | a4\n 13093: u64 [s1 + 0x138] = a1\n 13097: a1 = a1 | a5\n 13100: a1 = a1 | a0\n 13103: a1 = a1 >> 0x20\n 13106: a0 = a0 | a5\n 13109: a0 = a0 << 0x20\n 13112: a0 = a0 | a1\n 13115: jump @394 if a0 == 0\n      : @393 (gas: 1)\n 13118: jump @201\n      : @394 (gas: 11)\n 13121: u64 [a2 + 1496] = 0\n 13125: u64 [a2 + 1488] = 0\n 13129: u64 [a2 + 1480] = 0\n 13133: a0 = 0x8c379a000000000\n 13143: a1 = s1 + 0x1680\n 13147: u64 [a2 + 0x5e0] = a0\n 13151: a0 = u64 [s1 + 0x138]\n 13155: u64 [s1 + 0x130] = a3\n 13159: u64 [s1 + 0x128] = a4\n 13163: u64 [s1 + 0x120] = a5\n 13167: ra = 388, jump @4\n      : @395 [@dyn 194] (gas: 12)\n 13173: a5 = s1 + 0x100\n 13177: a2 = u64 [a5 + 0x30]\n 13180: a0 = u64 [a5 + 0x28]\n 13183: a1 = u64 [a5 + 0x20]\n 13186: a1 = a1 | a0\n 13189: a3 = 0x100000000\n 13199: a0 = 0xfffffffc\n 13209: a4 = u64 [a5 + 0x38]\n 13212: a0 = a4 <u a0\n 13215: a0 = 0 if a2 != 0\n 13217: a0 = 0 if a1 != 0\n 13219: jump @397 if a0 != 0\n      : @396 (gas: 1)\n 13222: jump @201\n      : @397 (gas: 11)\n 13225: a0 = u64 [s1 + 0x138]\n 13229: i32 a0 = a0 + 0x4\n 13232: u64 [s1 + 0x120] = a3\n 13236: a3 = s1 + 0x10b8\n 13240: u64 [a3 + 1472] = 0\n 13244: u64 [a3 + 1464] = 0\n 13248: u64 [s1 + 0x128] = a1\n 13252: u64 [a3 + 1448] = 0x20\n 13257: a1 = s1 + 0x1660\n 13261: u64 [a3 + 1456] = 0\n 13265: ra = 390, jump @4\n      : @398 [@dyn 195] (gas: 4)\n 13271: a2 = s1 + 0x100\n 13275: a0 = u64 [a2 + 0x20]\n 13278: a0 = a0 + 0xffffffffffffffdc\n 13281: t0 = 392, jump @659\n      : @399 [@dyn 196] (gas: 1)\n 13287: jump @401 if a0 != 0\n      : @400 (gas: 1)\n 13290: jump @201\n      : @401 (gas: 9)\n 13293: a0 = u64 [s1 + 0x138]\n 13297: i32 a0 = a0 + 0x24\n 13300: a2 = s1 + 0x10b8\n 13304: u64 [a2 + 1440] = 0\n 13308: u64 [a2 + 1432] = 0\n 13312: u64 [a2 + 1416] = 0x16\n 13317: a1 = s1 + 0x1640\n 13321: u64 [a2 + 1424] = 0\n 13325: ra = 394, jump @4\n      : @402 [@dyn 197] (gas: 3)\n 13331: a0 = 0xffffffbc\n 13341: a2 = s1 + 0x100\n 13345: t0 = 396, jump @659\n      : @403 [@dyn 198] (gas: 1)\n 13351: jump @405 if a0 != 0\n      : @404 (gas: 1)\n 13354: jump @201\n      : @405 (gas: 14)\n 13357: a0 = u64 [s1 + 0x138]\n 13361: i32 a0 = a0 + 0x44\n 13364: a1 = u64 [0x20018]\n 13369: a2 = u64 [0x20020]\n 13374: a3 = s1 + 0x10b8\n 13378: a4 = a3 + 0x500\n 13382: u64 [a4 + 0x80] = a1\n 13386: u64 [a4 + 0x78] = a2\n 13389: a1 = 0x544f4b454e300000\n 13399: u64 [a4 + 0x70] = a1\n 13402: a1 = s1 + 0x1620\n 13406: u64 [a3 + 1384] = 0\n 13410: ra = 0xb8\n 13414: jump @4\n      : @406 (gas: 3)\n 13417: a0 = s1 + 0x1260\n 13421: a1 = 0x40\n 13424: ra = 398, jump @2\n      : @407 [@dyn 199] (gas: 3)\n 13430: a0 = s1 + 0x10b8\n 13434: a2 = a0 + 0x100\n 13438: t0 = 400, jump @674\n      : @408 [@dyn 200] (gas: 4)\n 13444: ra = 0x192\n 13448: ecalli 11 // 'return_data_size'\n 13450: t0 = 0x194\n 13454: jump @661\n      : @409 [@dyn 201] (gas: 1)\n 13457: t0 = 404, jump @661\n      : @410 [@dyn 202] (gas: 1)\n 13463: jump @412 if a1 == 0\n      : @411 (gas: 1)\n 13466: jump @201\n      : @412 (gas: 3)\n 13469: a1 = a0\n 13471: a0 = a0 >> 0x20\n 13474: jump @414 if a0 == 0\n      : @413 (gas: 1)\n 13477: jump @201\n      : @414 (gas: 5)\n 13480: u64 [s1 + 0x128] = a1\n 13484: i32 a0 = a1 + 0\n 13486: u64 [s1 + 0x130] = a0\n 13490: a0 = u64 [s1 + 0x138]\n 13494: ra = 406, jump @12\n      : @415 [@dyn 203] (gas: 11)\n 13500: a1 = s1 + 0x18d8\n 13504: a2 = u64 [s1 + 0x128]\n 13508: u32 [a1 + 0x7e8] = a2\n 13512: i32 a0 = a0 + 0\n 13514: a1 = s1 + 0x2000\n 13518: i32 a1 = a1 + 0xc0\n 13522: a2 = 0\n 13524: ecalli 10 // 'return_data_copy'\n 13526: a0 = s1 + 0x18d8\n 13530: a0 = i32 [a0 + 0x7e8]\n 13534: jump @222\n      : @416 (gas: 6)\n 13537: u64 [s1 + 80] = 0\n 13540: u64 [s1 + 88] = 0\n 13543: u64 [s1 + 96] = 0\n 13546: u64 [s1 + 104] = 0\n 13549: a1 = s1 + 0x10b8\n 13553: fallthrough\n      : @417 (gas: 21)\n 13554: a3 = s1 + 0x7ff\n 13558: a3 = a3 + 0xb9\n 13562: a5 = s1 + 0x100\n 13566: a0 = u64 [a5]\n 13568: u64 [a3 + 0x7c8] = a0\n 13572: u64 [a1 + 0] = 0\n 13574: u64 [a1 + 4294967288] = 0\n 13577: a0 = u64 [s1 + 0x98]\n 13581: u64 [a1 + 0xffffffffffffffe8] = a0\n 13584: a0 = u64 [a5 + 0x8]\n 13587: u64 [a3 + 0x7d0] = a0\n 13591: a0 = u64 [s1 + 0x90]\n 13595: u64 [a1 + 0xfffffffffffffff0] = a0\n 13598: a0 = u64 [a5 + 0x10]\n 13601: u64 [a3 + 0x7d8] = a0\n 13605: a0 = s1 + 0x10c0\n 13609: a1 = s1 + 0x10a0\n 13613: a2 = s1 + 0x1080\n 13617: a4 = u64 [a5 + 0x18]\n 13620: u64 [a3 + 0x7e0] = a4\n 13624: ra = 408, jump @573\n      : @418 [@dyn 204] (gas: 21)\n 13630: a2 = s1 + 0x10b8\n 13634: a0 = u64 [a2 + 0x20]\n 13637: a1 = u64 [a2 + 0x8]\n 13640: t1 = u64 [a2 + 0x18]\n 13643: a3 = u64 [a2 + 0x10]\n 13646: a5 = u64 [s1 + 0x80]\n 13650: a4 = a5 ^ a0\n 13653: a0 = a0 <u a5\n 13656: a2 = u64 [s1 + 0x70]\n 13659: a5 = t1 <u a2\n 13662: a5 = a0 if a4 != 0\n 13665: a0 = u64 [s1 + 0xd0]\n 13669: t0 = a0 ^ a3\n 13672: a3 = a3 <u a0\n 13675: a0 = u64 [s1 + 0xf8]\n 13679: a1 = a1 <u a0\n 13682: a1 = a3 if t0 != 0\n 13685: a0 = a2 ^ t1\n 13688: a0 = a0 | a4\n 13691: a1 = a5 if a0 != 0\n 13694: jump @422 if a1 == 0\n      : @419 (gas: 23)\n 13698: a1 = s1 + 0x7ff\n 13702: a1 = a1 + 0xb9\n 13706: a5 = s1 + 0x100\n 13710: a0 = u64 [a5]\n 13712: a2 = a1 + 0x700\n 13716: u64 [a2 + 0x68] = a0\n 13719: u64 [a1 + 1952] = 0\n 13723: u64 [a1 + 1944] = 0\n 13727: a0 = u64 [s1 + 0x98]\n 13731: u64 [a2 + 0x88] = a0\n 13735: a0 = u64 [a5 + 0x8]\n 13738: u64 [a2 + 0x70] = a0\n 13741: a0 = u64 [s1 + 0x90]\n 13745: u64 [a2 + 0x90] = a0\n 13749: a0 = u64 [a5 + 0x10]\n 13752: u64 [a2 + 0x78] = a0\n 13755: a4 = a1\n 13757: a0 = s1 + 0x1060\n 13761: a1 = s1 + 0x1040\n 13765: a2 = s1 + 0x1020\n 13769: a3 = u64 [a5 + 0x18]\n 13772: u64 [a4 + 0x780] = a3\n 13776: ra = 410, jump @573\n      : @420 [@dyn 205] (gas: 25)\n 13782: a4 = s1 + 0x7ff\n 13786: a4 = a4 + 0xb9\n 13790: a5 = a4 + 0x700\n 13794: a0 = u64 [a5 + 0xa8]\n 13798: a1 = u64 [a5 + 0xb0]\n 13802: a2 = u64 [a5 + 0xb8]\n 13806: a3 = u64 [a5 + 0xc0]\n 13810: u64 [a5 + 0x20] = a3\n 13813: u64 [a5 + 0x18] = a2\n 13816: u64 [a5 + 0x10] = a1\n 13819: u64 [a5 + 0x8] = a0\n 13822: a0 = u64 [s1 + 0x80]\n 13826: u64 [a5 + 0x40] = a0\n 13829: a0 = u64 [s1 + 0x70]\n 13832: u64 [a5 + 0x38] = a0\n 13835: a0 = u64 [s1 + 0xd0]\n 13839: u64 [a5 + 0x30] = a0\n 13842: a0 = s1 + 0x1000\n 13846: a1 = s1 + 0x7ff\n 13850: a1 = a1 + 0x7e1\n 13854: a2 = s1 + 0x7ff\n 13858: a2 = a2 + 0x7c1\n 13862: a3 = u64 [s1 + 0xf8]\n 13866: u64 [a5 + 0x28] = a3\n 13869: ra = 412, jump @573\n      : @421 [@dyn 206] (gas: 8)\n 13875: a0 = s1 + 0x7ff\n 13879: a0 = a0 + 0xb9\n 13883: a5 = a0 + 0x700\n 13887: a3 = u64 [a5 + 0x60]\n 13890: a4 = u64 [a5 + 0x58]\n 13893: a1 = u64 [a5 + 0x50]\n 13896: a2 = u64 [a5 + 0x48]\n 13899: jump @423\n      : @422 (gas: 4)\n 13901: a2 = 0\n 13903: a4 = 0\n 13905: a3 = 0\n 13907: fallthrough\n      : @423 (gas: 16)\n 13908: a0 = u64 [s1 + 0x58]\n 13911: u64 [s1 + 0x38] = a1\n 13914: a0 = a0 | a1\n 13917: a1 = u64 [s1 + 0x50]\n 13920: u64 [s1 + 0x30] = a2\n 13923: a1 = a1 | a2\n 13926: a2 = u64 [s1 + 0x60]\n 13929: u64 [s1 + 0x40] = a4\n 13932: a2 = a2 | a4\n 13935: a1 = a1 | a2\n 13938: a2 = u64 [s1 + 0x68]\n 13941: u64 [s1 + 0x48] = a3\n 13944: a2 = a2 | a3\n 13947: a0 = a0 | a2\n 13950: a0 = a0 | a1\n 13953: jump @450 if a0 == 0\n      : @424 (gas: 25)\n 13957: a2 = 0x3e8\n 13961: ra = u64 [s1 + 0xc0]\n 13965: t1 = ra mulhu a2\n 13968: a5 = u64 [s1 + 0xb8]\n 13972: a0 = a5 * a2\n 13975: t1 = t1 + a0\n 13978: u64 [s1 + 0x28] = t1\n 13981: a0 = t1 <u a0\n 13984: a1 = a5 mulhu a2\n 13987: a0 = a0 + a1\n 13990: a4 = u64 [s1 + 0x88]\n 13994: t2 = a4 * a2\n 13997: t2 = t2 + a0\n 14000: u64 [s1 + 0x20] = t2\n 14003: a3 = t2 <u a0\n 14006: t0 = a4 mulhu a2\n 14009: a0 = u64 [s1 + 0xb0]\n 14013: a1 = a0 * a2\n 14016: a1 = a1 + t0\n 14019: a4 = ra | a4\n 14022: a5 = a5 | a0\n 14025: a4 = a4 | a5\n 14028: a0 = a1 + a3\n 14031: u64 [s1 + 0x88] = a0\n 14035: jump @426 if a4 == 0\n      : @425 (gas: 9)\n 14038: a0 = u64 [s1 + 0x88]\n 14042: a3 = 0 if a0 != 0\n 14044: a0 = a1 <u t0\n 14047: a1 = u64 [s1 + 0xb0]\n 14051: a1 = a1 mulhu a2\n 14054: a1 = a1 >u 0\n 14056: a0 = a0 | a1\n 14059: a0 = a0 | a3\n 14062: jump @528 if a0 != 0\n      : @426 (gas: 21)\n 14066: ra = u64 [s1 + 0xf8]\n 14070: t0 = ra mulhu a2\n 14073: a4 = u64 [s1 + 0xd0]\n 14077: a0 = a4 * 0x3e8\n 14081: t0 = t0 + a0\n 14084: a0 = t0 <u a0\n 14087: a1 = a4 mulhu a2\n 14090: a0 = a0 + a1\n 14093: a1 = u64 [s1 + 0x70]\n 14096: a5 = a1 * 0x3e8\n 14100: t1 = a0 + a5\n 14103: a3 = t1 <u a0\n 14106: t2 = a1 mulhu a2\n 14109: a5 = u64 [s1 + 0x80]\n 14113: a0 = a5 * 0x3e8\n 14117: a0 = a0 + t2\n 14120: a1 = ra | a1\n 14123: a5 = a5 | a4\n 14126: a4 = a1 | a5\n 14129: ra = a0 + a3\n 14132: jump @428 if a4 == 0\n      : @427 (gas: 8)\n 14135: a3 = 0 if ra != 0\n 14137: a0 = a0 <u t2\n 14140: a1 = u64 [s1 + 0x80]\n 14144: a1 = a1 mulhu a2\n 14147: a1 = a1 >u 0\n 14149: a0 = a0 | a1\n 14152: a0 = a0 | a3\n 14155: jump @534 if a0 != 0\n      : @428 (gas: 26)\n 14159: a0 = u64 [s1 + 0xc0]\n 14163: a0 = a0 * 0x3e8\n 14167: a1 = u64 [s1 + 0xf8]\n 14171: a1 = a1 * 0x3e8\n 14175: a2 = s1 + 0x7ff\n 14179: a2 = a2 + 0xb9\n 14183: a3 = a2 + 0x500\n 14187: u64 [a3 + 0x88] = a1\n 14191: u64 [a3 + 0xa8] = a0\n 14195: u64 [a2 + 0x590] = t0\n 14199: a0 = u64 [s1 + 0x28]\n 14202: u64 [a3 + 0xb0] = a0\n 14206: u64 [a2 + 0x598] = t1\n 14210: a0 = u64 [s1 + 0x20]\n 14213: u64 [a3 + 0xb8] = a0\n 14217: u64 [a2 + 0x5a0] = ra\n 14221: a4 = a2\n 14223: a0 = s1 + 0x7ff\n 14227: a0 = a0 + 0x681\n 14231: a1 = s1 + 0x7ff\n 14235: a1 = a1 + 0x661\n 14239: a2 = s1 + 0x7ff\n 14243: a2 = a2 + 0x641\n 14247: a3 = u64 [s1 + 0x88]\n 14251: u64 [a4 + 0x5c0] = a3\n 14255: ra = 414, jump @580\n      : @429 [@dyn 207] (gas: 31)\n 14261: a1 = s1 + 0x7ff\n 14265: a1 = a1 + 0xb9\n 14269: a2 = a1 + 0x500\n 14273: a0 = u64 [a2 + 0xe0]\n 14277: u64 [s1 + 0x88] = a0\n 14281: a0 = u64 [a2 + 0xd8]\n 14285: u64 [s1 + 0xb0] = a0\n 14289: a0 = u64 [a2 + 0xd0]\n 14293: u64 [s1 + 0x80] = a0\n 14297: a0 = u64 [a2 + 0xc8]\n 14301: u64 [s1 + 0x70] = a0\n 14304: u64 [a1 + 1344] = 0\n 14308: u64 [a1 + 1336] = 0\n 14312: a0 = u64 [s1 + 0x90]\n 14316: u64 [a2 + 0x30] = a0\n 14319: a0 = u64 [s1 + 0x98]\n 14323: u64 [a2 + 0x28] = a0\n 14326: u64 [a1 + 1376] = 0\n 14330: u64 [a1 + 1368] = 0\n 14334: a0 = u64 [s1 + 0xa0]\n 14338: u64 [a2 + 0x50] = a0\n 14341: a4 = a1\n 14343: a0 = s1 + 0x7ff\n 14347: a0 = a0 + 0x621\n 14351: a1 = s1 + 0x7ff\n 14355: a1 = a1 + 0x601\n 14359: a2 = s1 + 0x7ff\n 14363: a2 = a2 + 0x5e1\n 14367: a3 = u64 [s1 + 0xa8]\n 14371: u64 [a4 + 0x548] = a3\n 14375: ra = 416, jump @580\n      : @430 [@dyn 208] (gas: 24)\n 14381: a0 = s1 + 0x7ff\n 14385: a0 = a0 + 0xb9\n 14389: t0 = u64 [a0 + 0x580]\n 14393: a4 = u64 [a0 + 0x578]\n 14397: ra = u64 [a0 + 0x568]\n 14401: a1 = u64 [a0 + 0x570]\n 14405: a3 = 0xf4240\n 14410: a2 = ra mulhu a3\n 14413: a0 = a1 * a3\n 14416: a2 = a2 + a0\n 14419: a0 = a2 <u a0\n 14422: a5 = a1 mulhu a3\n 14425: a0 = a0 + a5\n 14428: t2 = a4 * a3\n 14431: t2 = t2 + a0\n 14434: a5 = t2 <u a0\n 14437: a0 = t0 * a3\n 14440: t1 = a4 mulhu a3\n 14443: a0 = a0 + t1\n 14446: a1 = a1 | t0\n 14449: a4 = ra | a4\n 14452: a1 = a1 | a4\n 14455: a4 = a0 + a5\n 14458: jump @432 if a1 == 0\n      : @431 (gas: 7)\n 14461: a5 = 0 if a4 != 0\n 14463: a0 = a0 <u t1\n 14466: a1 = t0 mulhu a3\n 14469: a1 = a1 >u 0\n 14471: a0 = a0 | a1\n 14474: a0 = a0 | a5\n 14477: jump @540 if a0 != 0\n      : @432 (gas: 17)\n 14481: a0 = ra * 0xf4240\n 14486: a1 = u64 [s1 + 0x70]\n 14489: a0 = a1 <u a0\n 14492: a3 = u64 [s1 + 0x80]\n 14496: a1 = a3 ^ a2\n 14499: a2 = a3 <u a2\n 14502: a2 = a0 if a1 == 0\n 14505: a5 = u64 [s1 + 0xb0]\n 14509: a0 = a5 <u t2\n 14512: a3 = u64 [s1 + 0x88]\n 14516: a1 = a3 ^ a4\n 14519: a3 = a3 <u a4\n 14522: a3 = a0 if a1 == 0\n 14525: a0 = a5 ^ t2\n 14528: a0 = a0 | a1\n 14531: a3 = a2 if a0 == 0\n 14534: jump @467 if a3 == 0\n      : @433 (gas: 4)\n 14538: a0 = s1 + 0x7ff\n 14542: a0 = a0 + 0x461\n 14546: a1 = 0x40\n 14549: ra = 418, jump @2\n      : @434 [@dyn 209] (gas: 8)\n 14555: a0 = s1 + 0x7ff\n 14559: a0 = a0 + 0xb9\n 14563: a5 = a0 + 0x300\n 14567: a3 = u64 [a5 + 0xc0]\n 14571: a4 = u64 [a5 + 0xb8]\n 14575: a2 = u64 [a5 + 0xb0]\n 14579: a1 = u64 [a5 + 0xa8]\n 14583: t0 = 420, jump @669\n      : @435 [@dyn 210] (gas: 1)\n 14589: jump @437 if a0 == 0\n      : @436 (gas: 1)\n 14592: jump @201\n      : @437 (gas: 11)\n 14595: a2 = s1 + 0x7ff\n 14599: a2 = a2 + 0xb9\n 14603: u64 [a2 + 920] = 0\n 14607: u64 [a2 + 912] = 0\n 14611: u64 [a2 + 904] = 0\n 14615: a0 = 0x8c379a000000000\n 14625: a1 = s1 + 0x7ff\n 14629: a1 = a1 + 0x441\n 14633: u64 [a2 + 0x3a0] = a0\n 14637: a0 = u64 [s1 + 0x138]\n 14641: ra = 422, jump @4\n      : @438 [@dyn 211] (gas: 1)\n 14647: t0 = 424, jump @660\n      : @439 [@dyn 212] (gas: 1)\n 14653: jump @441 if a0 != 0\n      : @440 (gas: 1)\n 14656: jump @201\n      : @441 (gas: 11)\n 14659: a0 = u64 [s1 + 0x138]\n 14663: i32 a0 = a0 + 0x4\n 14666: a2 = s1 + 0x7ff\n 14670: a2 = a2 + 0xb9\n 14674: u64 [a2 + 896] = 0\n 14678: u64 [a2 + 888] = 0\n 14682: u64 [a2 + 872] = 0x20\n 14687: a1 = s1 + 0x7ff\n 14691: a1 = a1 + 0x421\n 14695: u64 [a2 + 880] = 0\n 14699: ra = 426, jump @4\n      : @442 [@dyn 213] (gas: 4)\n 14705: a2 = s1 + 0x100\n 14709: a0 = u64 [a2 + 0x20]\n 14712: a0 = a0 + 0xffffffffffffffdc\n 14715: t0 = 428, jump @659\n      : @443 [@dyn 214] (gas: 1)\n 14721: jump @445 if a0 != 0\n      : @444 (gas: 1)\n 14724: jump @201\n      : @445 (gas: 11)\n 14727: a0 = u64 [s1 + 0x138]\n 14731: i32 a0 = a0 + 0x24\n 14734: a2 = s1 + 0x7ff\n 14738: a2 = a2 + 0xb9\n 14742: u64 [a2 + 864] = 0\n 14746: u64 [a2 + 856] = 0\n 14750: u64 [a2 + 848] = 0\n 14754: a1 = s1 + 0x7ff\n 14758: a1 = a1 + 0x401\n 14762: u64 [a2 + 840] = 0x1\n 14767: ra = 430, jump @4\n      : @446 [@dyn 215] (gas: 3)\n 14773: a0 = 0xffffffbc\n 14783: a2 = s1 + 0x100\n 14787: t0 = 432, jump @659\n      : @447 [@dyn 216] (gas: 1)\n 14793: jump @449 if a0 != 0\n      : @448 (gas: 1)\n 14796: jump @201\n      : @449 (gas: 13)\n 14799: a0 = u64 [s1 + 0x138]\n 14803: i32 a0 = a0 + 0x44\n 14806: a2 = s1 + 0x7ff\n 14810: a2 = a2 + 0xb9\n 14814: u64 [a2 + 824] = 0\n 14818: u64 [a2 + 816] = 0\n 14822: a1 = 0x4b00000000000000\n 14832: u64 [a2 + 0x340] = a1\n 14836: a1 = s1 + 0x7ff\n 14840: a1 = a1 + 0x3e1\n 14844: u64 [a2 + 808] = 0\n 14848: ra = 0xb8\n 14852: jump @4\n      : @450 (gas: 4)\n 14855: a0 = s1 + 0x7ff\n 14859: a0 = a0 + 0x7a1\n 14863: a1 = 0x40\n 14866: ra = 434, jump @2\n      : @451 [@dyn 217] (gas: 8)\n 14872: a0 = s1 + 0x7ff\n 14876: a0 = a0 + 0xb9\n 14880: a3 = u64 [a0 + 0x700]\n 14884: a5 = a0 + 0x600\n 14888: a4 = u64 [a5 + 0xf8]\n 14892: a2 = u64 [a5 + 0xf0]\n 14896: a1 = u64 [a5 + 0xe8]\n 14900: t0 = 436, jump @669\n      : @452 [@dyn 218] (gas: 1)\n 14906: jump @454 if a0 == 0\n      : @453 (gas: 1)\n 14909: jump @201\n      : @454 (gas: 11)\n 14912: a2 = s1 + 0x7ff\n 14916: a2 = a2 + 0xb9\n 14920: u64 [a2 + 1752] = 0\n 14924: u64 [a2 + 1744] = 0\n 14928: u64 [a2 + 1736] = 0\n 14932: a0 = 0x8c379a000000000\n 14942: a1 = s1 + 0x7ff\n 14946: a1 = a1 + 0x781\n 14950: u64 [a2 + 0x6e0] = a0\n 14954: a0 = u64 [s1 + 0x138]\n 14958: ra = 438, jump @4\n      : @455 [@dyn 219] (gas: 1)\n 14964: t0 = 440, jump @660\n      : @456 [@dyn 220] (gas: 1)\n 14970: jump @458 if a0 != 0\n      : @457 (gas: 1)\n 14973: jump @201\n      : @458 (gas: 11)\n 14976: a0 = u64 [s1 + 0x138]\n 14980: i32 a0 = a0 + 0x4\n 14983: a2 = s1 + 0x7ff\n 14987: a2 = a2 + 0xb9\n 14991: u64 [a2 + 1728] = 0\n 14995: u64 [a2 + 1720] = 0\n 14999: u64 [a2 + 1704] = 0x20\n 15004: a1 = s1 + 0x7ff\n 15008: a1 = a1 + 0x761\n 15012: u64 [a2 + 1712] = 0\n 15016: ra = 442, jump @4\n      : @459 [@dyn 221] (gas: 4)\n 15022: a2 = s1 + 0x100\n 15026: a0 = u64 [a2 + 0x20]\n 15029: a0 = a0 + 0xffffffffffffffdc\n 15032: t0 = 444, jump @659\n      : @460 [@dyn 222] (gas: 1)\n 15038: jump @462 if a0 != 0\n      : @461 (gas: 1)\n 15041: jump @201\n      : @462 (gas: 11)\n 15044: a0 = u64 [s1 + 0x138]\n 15048: i32 a0 = a0 + 0x24\n 15051: a2 = s1 + 0x7ff\n 15055: a2 = a2 + 0xb9\n 15059: u64 [a2 + 1696] = 0\n 15063: u64 [a2 + 1688] = 0\n 15067: u64 [a2 + 1672] = 0x19\n 15072: a1 = s1 + 0x7ff\n 15076: a1 = a1 + 0x741\n 15080: u64 [a2 + 1680] = 0\n 15084: ra = 446, jump @4\n      : @463 [@dyn 223] (gas: 3)\n 15090: a0 = 0xffffffbc\n 15100: a2 = s1 + 0x100\n 15104: t0 = 448, jump @659\n      : @464 [@dyn 224] (gas: 1)\n 15110: jump @466 if a0 != 0\n      : @465 (gas: 1)\n 15113: jump @201\n      : @466 (gas: 17)\n 15116: a0 = u64 [s1 + 0x138]\n 15120: i32 a0 = a0 + 0x44\n 15123: a1 = u64 [0x20000]\n 15128: a2 = u64 [0x20030]\n 15133: a3 = u64 [0x20038]\n 15138: a4 = s1 + 0x7ff\n 15142: a4 = a4 + 0xb9\n 15146: a5 = a4 + 0x600\n 15150: u64 [a5 + 0x80] = a1\n 15154: u64 [a5 + 0x78] = a2\n 15157: u64 [a5 + 0x70] = a3\n 15160: a2 = 0x5400000000000000\n 15170: a1 = s1 + 0x7ff\n 15174: a1 = a1 + 0x721\n 15178: u64 [a5 + 0x68] = a2\n 15181: ra = 0xb8\n 15185: jump @4\n      : @467 (gas: 9)\n 15188: a0 = s1 + 0x20f8\n 15192: u64 [a0 + 0] = 0\n 15194: u64 [a0 + 4294967288] = 0\n 15197: u64 [a0 + 4294967280] = 0\n 15200: u64 [a0 + 4294967272] = 0x2\n 15204: a0 = s1 + 0x7ff\n 15208: a0 = a0 + 0x581\n 15212: a1 = s1 + 0x20e0\n 15216: ra = 450, jump @6\n      : @468 [@dyn 225] (gas: 31)\n 15222: a0 = u64 [s1 + 0xf8]\n 15226: a2 = a0 >> 0x10\n 15229: a5 = u64 [s1 + 0xd0]\n 15233: a1 = a5 << 0x30\n 15236: t0 = a2 | a1\n 15239: a2 = u64 [s1 + 0xc0]\n 15243: a1 = a2 & 0xffffffffffffffff\n 15246: a2 = s1 + 0x7ff\n 15250: a2 = a2 + 0xb9\n 15254: a2 = u32 [a2 + 0x4e4]\n 15258: a3 = u64 [s1 + 0xc8]\n 15262: a4 = u64 [s1 + 0xb8]\n 15266: a3 = a3 & a4\n 15269: a4 = a0 << 0x30\n 15272: a3 = a3 | a4\n 15275: a2 = a2 << 0x20\n 15278: a4 = a5 << 0x10\n 15281: a4 = a4 >> 0x20\n 15284: a2 = a2 | a4\n 15287: a0 = s1 + 0x20f8\n 15291: u64 [a0 + 8] = 0x2\n 15295: u64 [a0 + 0x38] = t0\n 15298: u64 [a0 + 0x30] = a3\n 15301: u64 [a0 + 0x28] = a1\n 15304: u64 [a0 + 0x40] = a2\n 15307: u64 [a0 + 32] = 0\n 15310: u64 [a0 + 24] = 0\n 15313: u64 [a0 + 16] = 0\n 15316: a0 = s1 + 0x2100\n 15320: a1 = s1 + 0x2120\n 15324: ra = 452, jump @8\n      : @469 [@dyn 226] (gas: 4)\n 15330: a0 = s1 + 0x7ff\n 15334: a0 = a0 + 0x561\n 15338: a1 = 0x40\n 15341: ra = 454, jump @2\n      : @470 [@dyn 227] (gas: 19)\n 15347: a1 = s1 + 0x7ff\n 15351: a1 = a1 + 0xb9\n 15355: a4 = a1 + 0x400\n 15359: a2 = u64 [a4 + 0xc0]\n 15363: a3 = u64 [a4 + 0xb8]\n 15367: a0 = u64 [a4 + 0xb0]\n 15371: a1 = u64 [a4 + 0xa8]\n 15375: u64 [s1 + 0xd0] = a0\n 15379: u64 [s1 + 0xc8] = a2\n 15383: a0 = a0 | a2\n 15386: u64 [s1 + 0xf8] = a1\n 15390: a1 = a1 | a3\n 15393: a1 = a1 | a0\n 15396: a1 = a1 >> 0x20\n 15399: u64 [s1 + 0xc0] = a3\n 15403: a0 = a0 | a3\n 15406: a0 = a0 << 0x20\n 15409: a0 = a0 | a1\n 15412: jump @472 if a0 == 0\n      : @471 (gas: 1)\n 15415: jump @201\n      : @472 (gas: 15)\n 15418: a0 = s1 + 0x7ff\n 15422: a0 = a0 + 0xb9\n 15426: a1 = u64 [s1 + 0x50]\n 15429: a3 = a0 + 0x400\n 15433: u64 [a3 + 0x88] = a1\n 15437: a1 = u64 [s1 + 0x58]\n 15440: u64 [a3 + 0x90] = a1\n 15444: a1 = u64 [s1 + 0x60]\n 15447: u64 [a3 + 0x98] = a1\n 15451: a1 = s1 + 0x7ff\n 15455: a1 = a1 + 0x541\n 15459: a2 = u64 [s1 + 0x68]\n 15462: u64 [a3 + 0xa0] = a2\n 15466: a0 = u64 [s1 + 0xf8]\n 15470: ra = 456, jump @4\n      : @473 [@dyn 228] (gas: 13)\n 15476: a0 = u64 [s1 + 0xc8]\n 15480: a2 = u64 [s1 + 0xc0]\n 15484: a2 = a2 | a0\n 15487: a0 = 0x100000000\n 15497: u64 [s1 + 0xc0] = a0\n 15501: a0 = 0xffffffe0\n 15511: a1 = u64 [s1 + 0xf8]\n 15515: a0 = a1 <u a0\n 15518: a1 = u64 [s1 + 0xd0]\n 15522: a0 = 0 if a1 != 0\n 15524: u64 [s1 + 0xc8] = a2\n 15528: a0 = 0 if a2 != 0\n 15530: jump @475 if a0 != 0\n      : @474 (gas: 1)\n 15533: jump @201\n      : @475 (gas: 16)\n 15536: a0 = u64 [s1 + 0xf8]\n 15540: i32 a0 = a0 + 0x20\n 15543: a2 = s1 + 0x7ff\n 15547: a2 = a2 + 0xb9\n 15551: a1 = u64 [s1 + 0x30]\n 15554: a4 = a2 + 0x400\n 15558: u64 [a4 + 0x68] = a1\n 15561: a1 = u64 [s1 + 0x38]\n 15564: u64 [a4 + 0x70] = a1\n 15567: a1 = u64 [s1 + 0x40]\n 15570: u64 [a4 + 0x78] = a1\n 15573: a1 = s1 + 0x7ff\n 15577: a1 = a1 + 0x521\n 15581: a3 = u64 [s1 + 0x48]\n 15584: u64 [a4 + 0x80] = a3\n 15588: ra = 458, jump @4\n      : @476 [@dyn 229] (gas: 9)\n 15594: a0 = u64 [s1 + 0xc0]\n 15598: a0 = a0 + 0xffffffffffffffc0\n 15601: a1 = u64 [s1 + 0xf8]\n 15605: a0 = a1 <u a0\n 15608: a1 = u64 [s1 + 0xd0]\n 15612: a0 = 0 if a1 != 0\n 15614: a1 = u64 [s1 + 0xc8]\n 15618: a0 = 0 if a1 != 0\n 15620: jump @478 if a0 != 0\n      : @477 (gas: 1)\n 15623: jump @201\n      : @478 (gas: 17)\n 15626: a0 = u64 [s1 + 0xf8]\n 15630: i32 a0 = a0 + 0x40\n 15633: a2 = s1 + 0x7ff\n 15637: a2 = a2 + 0xb9\n 15641: a4 = s1 + 0x100\n 15645: a1 = u64 [a4 + 0x20]\n 15648: a5 = a2 + 0x400\n 15652: u64 [a5 + 0x48] = a1\n 15655: a1 = u64 [a4 + 0x28]\n 15658: u64 [a5 + 0x50] = a1\n 15661: a1 = u64 [a4 + 0x30]\n 15664: u64 [a5 + 0x58] = a1\n 15667: a1 = s1 + 0x7ff\n 15671: a1 = a1 + 0x501\n 15675: a3 = u64 [a4 + 0x38]\n 15678: u64 [a5 + 0x60] = a3\n 15681: ra = 460, jump @4\n      : @479 [@dyn 230] (gas: 8)\n 15687: a0 = 0xffffffa0\n 15697: a1 = u64 [s1 + 0xf8]\n 15701: a0 = a1 <u a0\n 15704: a1 = u64 [s1 + 0xd0]\n 15708: a0 = 0 if a1 != 0\n 15710: a1 = u64 [s1 + 0xc8]\n 15714: a0 = 0 if a1 != 0\n 15716: jump @481 if a0 != 0\n      : @480 (gas: 1)\n 15719: jump @201\n      : @481 (gas: 17)\n 15722: a0 = u64 [s1 + 0xf8]\n 15726: i32 a0 = a0 + 0x60\n 15729: a3 = s1 + 0x7ff\n 15733: a3 = a3 + 0xb9\n 15737: a4 = s1 + 0x100\n 15741: a1 = u64 [a4]\n 15743: a5 = a3 + 0x400\n 15747: u64 [a5 + 0x28] = a1\n 15750: a1 = u64 [a4 + 0x8]\n 15753: u64 [a5 + 0x30] = a1\n 15756: a1 = u64 [a4 + 0x10]\n 15759: u64 [a5 + 0x38] = a1\n 15762: a1 = s1 + 0x7ff\n 15766: a1 = a1 + 0x4e1\n 15770: a2 = u64 [a4 + 0x18]\n 15773: u64 [a5 + 0x40] = a2\n 15776: ra = 462, jump @4\n      : @482 [@dyn 231] (gas: 6)\n 15782: a0 = u64 [s1 + 0x78]\n 15785: ra = 0x1d0\n 15789: ecalli 5 // 'caller'\n 15791: a2 = u64 [s1 + 0xd8]\n 15795: t0 = 0x1d2\n 15799: jump @677\n      : @483 [@dyn 232] (gas: 2)\n 15802: a2 = u64 [s1 + 0xd8]\n 15806: t0 = 466, jump @677\n      : @484 [@dyn 233] (gas: 69)\n 15812: t0 = a1 | a0\n 15815: a3 = a3 >> 0x20\n 15818: a2 = reverse a2\n 15820: a1 = a2 << 0x20\n 15823: a1 = a1 | a3\n 15826: a2 = a2 >> 0x20\n 15829: a3 = u64 [s1 + 0xe0]\n 15833: a0 = s1 + 0x7ff\n 15837: a0 = a0 + 0xb9\n 15841: u64 [a0 + 0x3d8] = a3\n 15845: a3 = u64 [0x20040]\n 15850: u64 [a0 + 992] = 0\n 15854: a4 = u64 [s1 + 0xe8]\n 15858: u64 [a0 + 0x3d0] = a4\n 15862: a4 = u64 [s1 + 0xf0]\n 15866: u64 [a0 + 0x3c8] = a4\n 15870: u64 [a0 + 0x420] = a3\n 15874: a3 = u64 [0x20048]\n 15879: a4 = u64 [0x20050]\n 15884: a5 = u64 [0x20058]\n 15889: u64 [a0 + 1024] = 0\n 15893: u64 [a0 + 0x418] = a3\n 15897: u64 [a0 + 0x410] = a4\n 15901: u64 [a0 + 0x408] = a5\n 15905: u64 [a0 + 0x3f8] = a2\n 15909: u64 [a0 + 0x3f0] = a1\n 15913: a1 = 0x80\n 15917: a2 = s1 + 0x7ff\n 15921: a2 = a2 + 0x4c1\n 15925: a3 = s1 + 0x7ff\n 15929: a3 = a3 + 0x4a1\n 15933: a4 = s1 + 0x7ff\n 15937: a4 = a4 + 0x481\n 15941: u64 [a0 + 0x3e8] = t0\n 15945: a0 = u64 [s1 + 0xf8]\n 15949: ra = 0x1d4\n 15953: sp = sp + 0xffffffffffffff20\n 15957: u64 [sp + 0xd8] = ra\n 15961: u64 [sp + 0xd0] = s0\n 15965: u64 [sp + 0xc8] = s1\n 15969: s0 = sp + 0xe0\n 15973: sp = sp & 0xffffffffffffffe0\n 15976: a5 = u64 [a4]\n 15978: u64 [sp + 0x40] = a5\n 15981: a5 = u64 [a4 + 0x8]\n 15984: u64 [sp + 0x48] = a5\n 15987: a5 = u64 [a4 + 0x10]\n 15990: u64 [sp + 0x50] = a5\n 15993: a4 = u64 [a4 + 0x18]\n 15996: u64 [sp + 0x58] = a4\n 15999: t0 = 0xa\n 16002: a4 = u64 [a3]\n 16004: u64 [sp + 0x18] = a4\n 16007: a4 = u64 [a3 + 0x8]\n 16010: u64 [sp + 0x20] = a4\n 16013: a4 = u64 [a3 + 0x10]\n 16016: u64 [sp + 0x28] = a4\n 16019: a3 = u64 [a3 + 0x18]\n 16022: u64 [sp + 0x30] = a3\n 16025: s1 = u64 [a2]\n 16027: a3 = u64 [a2 + 0x8]\n 16030: u64 [sp] = a3\n 16032: a3 = u64 [a2 + 0x10]\n 16035: u64 [sp + 0x8] = a3\n 16038: a2 = u64 [a2 + 0x18]\n 16041: u64 [sp + 0x10] = a2\n 16044: u64 [sp + 0x38] = a1\n 16047: ra = 0xc\n 16050: jump @12\n      : @485 [@dyn 234] (gas: 7)\n 16053: a1 = 0x200b0\n 16058: i32 a1 = a1 + 0\n 16060: a0 = 0\n 16062: a2 = 0\n 16064: ecalli 12 // 'seal_return'\n 16066: a1 = 0x200b0\n 16071: jump @500\n      : @486 (gas: 4)\n 16074: a1 = 0x200b0\n 16079: i32 a1 = a1 + 0\n 16081: a0 = 0x1\n 16084: jump @501\n      : @487 (gas: 4)\n 16087: a1 = 0x200b0\n 16092: i32 a1 = a1 + 0\n 16094: a0 = 0x1\n 16097: jump @501\n      : @488 (gas: 4)\n 16100: a1 = 0x200b0\n 16105: i32 a1 = a1 + 0\n 16107: a0 = 0x1\n 16110: jump @501\n      : @489 (gas: 4)\n 16113: a1 = 0x200b0\n 16118: i32 a1 = a1 + 0\n 16120: a0 = 0x1\n 16123: jump @501\n      : @490 (gas: 4)\n 16126: a1 = 0x200b0\n 16131: i32 a1 = a1 + 0\n 16133: a0 = 0x1\n 16136: jump @501\n      : @491 (gas: 4)\n 16139: a1 = 0x200b0\n 16144: i32 a1 = a1 + 0\n 16146: a0 = 0x1\n 16149: jump @501\n      : @492 (gas: 4)\n 16152: a1 = 0x200b0\n 16157: i32 a1 = a1 + 0\n 16159: a0 = 0x1\n 16162: jump @501\n      : @493 (gas: 4)\n 16165: a1 = 0x200b0\n 16170: i32 a1 = a1 + 0\n 16172: a0 = 0x1\n 16175: jump @501\n      : @494 (gas: 4)\n 16178: a1 = 0x200b0\n 16183: i32 a1 = a1 + 0\n 16185: a0 = 0x1\n 16188: jump @501\n      : @495 (gas: 2)\n 16190: a2 = s1 + 0x18d8\n 16194: jump @499 if a0 != 151187884\n      : @496 (gas: 8)\n 16201: u64 [a2 + 512] = 0\n 16205: u64 [a2 + 504] = 0\n 16209: u64 [a2 + 496] = 0\n 16213: u64 [a2 + 488] = 0\n 16217: a0 = s1 + 0x2000\n 16221: i32 a0 = a0 + 0xfffffffffffffac0\n 16225: ecalli 15 // 'value_transferred'\n 16227: fallthrough\n      : @497 (gas: 10)\n 16228: a3 = s1 + 0x18d8\n 16232: a4 = a3 + 0x100\n 16236: a0 = u64 [a4 + 0xf8]\n 16240: a1 = u64 [a3 + 0x200]\n 16244: a2 = u64 [a4 + 0xf0]\n 16248: a3 = u64 [a4 + 0xe8]\n 16252: a1 = a1 | a2\n 16255: a0 = a0 | a3\n 16258: a0 = a0 | a1\n 16261: jump @509 if a0 == 0\n      : @498 (gas: 4)\n 16265: a1 = 0x200b0\n 16270: i32 a1 = a1 + 0\n 16272: a0 = 0x1\n 16275: jump @501\n      : @499 (gas: 4)\n 16277: a1 = 0x200b0\n 16282: i32 a1 = a1 + 0\n 16284: a0 = 0x1\n 16287: jump @501\n      : @500 (gas: 6)\n 16289: i32 a1 = a1 + 0\n 16291: a0 = 0x1\n 16294: a2 = 0\n 16296: ecalli 12 // 'seal_return'\n 16298: a1 = 0x200b0\n 16303: jump @500\n      : @501 (gas: 4)\n 16305: a2 = 0\n 16307: ecalli 12 // 'seal_return'\n 16309: a1 = 0x200b0\n 16314: jump @500\n      : @502 (gas: 2)\n 16316: a1 = 0x200b0\n 16321: jump @500\n      : @503 (gas: 2)\n 16323: a1 = 0x200b0\n 16328: jump @500\n      : @504 (gas: 2)\n 16330: a1 = 0x200b0\n 16335: jump @500\n      : @505 (gas: 2)\n 16337: a1 = 0x200b0\n 16342: jump @500\n      : @506 (gas: 14)\n 16344: a4 = s1 + 0x100\n 16348: a1 = u64 [a4 + 0x28]\n 16351: a1 = a1 << 0x20\n 16354: a2 = a1 >> 0x20\n 16357: u64 [a3 + 352] = 0\n 16361: a1 = u64 [a4 + 0x30]\n 16364: a5 = a3 + 0x100\n 16368: u64 [a5 + 0x48] = a1\n 16371: a1 = u64 [a4 + 0x38]\n 16374: u64 [a5 + 0x50] = a1\n 16377: a1 = s1 + 0x1a20\n 16381: u64 [a5 + 0x58] = a2\n 16384: u64 [s1 + 0x138] = a0\n 16388: ra = 470, jump @4\n      : @507 [@dyn 235] (gas: 3)\n 16394: a1 = 0x20\n 16397: a0 = u64 [s1 + 0x138]\n 16401: ra = 472, jump @12\n      : @508 [@dyn 236] (gas: 5)\n 16407: i32 a1 = a0 + 0\n 16409: a2 = 0x20\n 16412: a0 = 0\n 16414: ecalli 12 // 'seal_return'\n 16416: fallthrough\n      : @509 (gas: 3)\n 16417: a0 = u64 [s1 + 0x138]\n 16421: a0 = i32 [a0]\n 16423: jump @513 if a0 >u 3\n      : @510 (gas: 2)\n 16427: a1 = 0x200b0\n 16432: jump @500\n      : @511 (gas: 7)\n 16435: a1 = 0x200b0\n 16440: i32 a1 = a1 + 0\n 16442: a0 = 0x1\n 16445: ecalli 12 // 'seal_return'\n 16447: a0 = s1 + 0x180\n 16451: ra = 0x1da\n 16455: jump @560\n      : @512 (gas: 6)\n 16458: i32 a1 = a1 + 0\n 16460: a0 = 0x1\n 16463: ecalli 12 // 'seal_return'\n 16465: a0 = s1 + 0x180\n 16469: ra = 0x1da\n 16473: jump @560\n      : @513 (gas: 2)\n 16476: a0 = s1 + 0x180\n 16480: ra = 474, jump @560\n      : @514 [@dyn 237] (gas: 16)\n 16486: a0 = u64 [s1 + 0x1a0]\n 16490: u64 [s1 + 0x138] = a0\n 16494: a0 = u64 [s1 + 0x1a8]\n 16498: u64 [s1 + 0x130] = a0\n 16502: a0 = u64 [s1 + 0x188]\n 16506: a1 = u64 [s1 + 0x180]\n 16510: a2 = 0xffffffffffff\n 16520: u64 [s1 + 0x128] = a2\n 16524: a0 = a0 & a2\n 16527: u64 [s1 + 376] = 0\n 16531: u64 [s1 + 0x168] = a0\n 16535: u64 [s1 + 0x160] = a1\n 16539: a0 = 0x80\n 16543: a1 = s1 + 0x160\n 16547: u64 [s1 + 368] = 0\n 16551: ra = 476, jump @4\n      : @515 [@dyn 238] (gas: 12)\n 16557: a2 = s1 + 0x100\n 16561: a0 = u64 [a2 + 0x30]\n 16564: a1 = u64 [a2 + 0x28]\n 16567: a0 = a0 & a1\n 16570: u64 [s1 + 344] = 0\n 16574: u64 [a2 + 0x48] = a0\n 16577: a0 = u64 [a2 + 0x38]\n 16580: u64 [a2 + 0x40] = a0\n 16583: a0 = 0xa0\n 16587: a1 = s1 + 0x140\n 16591: u64 [s1 + 336] = 0\n 16595: ra = 478, jump @4\n      : @516 [@dyn 239] (gas: 2)\n 16601: a1 = i32 [0x200a4]\n 16606: jump @518 if a1 >u 191\n      : @517 (gas: 2)\n 16611: u32 [0x200a4] = 0xc0\n 16618: fallthrough\n      : @518 (gas: 6)\n 16619: a0 = 0x200b0\n 16624: i32 a1 = a0 + 0x80\n 16628: a2 = 0x40\n 16631: a0 = 0\n 16633: ecalli 12 // 'seal_return'\n 16635: jump @509\n      : @519 (gas: 2)\n 16638: a1 = 0x200b0\n 16643: jump @512\n      : @520 (gas: 8)\n 16646: u64 [s1 + 688] = 0\n 16650: u64 [s1 + 680] = 0\n 16654: u64 [s1 + 672] = 0\n 16658: a0 = 0x4e487b7100000000\n 16668: a1 = s1 + 0x2a0\n 16672: u64 [s1 + 0x2b8] = a0\n 16676: a0 = 0\n 16678: ra = 480, jump @4\n      : @521 [@dyn 240] (gas: 7)\n 16684: u64 [s1 + 664] = 0\n 16688: u64 [s1 + 656] = 0\n 16692: u64 [s1 + 640] = 0x11\n 16697: a0 = 0x4\n 16700: a1 = s1 + 0x280\n 16704: u64 [s1 + 648] = 0\n 16708: ra = 482, jump @4\n      : @522 [@dyn 241] (gas: 2)\n 16714: a1 = i32 [0x200a4]\n 16719: jump @524 if a1 >u 63\n      : @523 (gas: 3)\n 16723: u32 [0x200a4] = 0x40\n 16729: a1 = 0x200b0\n 16734: jump @525\n      : @524 (gas: 2)\n 16736: a1 = 0x200b0\n 16741: fallthrough\n      : @525 (gas: 6)\n 16742: i32 a1 = a1 + 0\n 16744: a0 = 0x1\n 16747: a2 = 0x24\n 16750: ecalli 12 // 'seal_return'\n 16752: a1 = 0x200b0\n 16757: jump @512\n      : @526 (gas: 2)\n 16760: a1 = 0x200b0\n 16765: jump @512\n      : @527 (gas: 2)\n 16768: a1 = 0x200b0\n 16773: jump @512\n      : @528 (gas: 6)\n 16776: a0 = s1 + 0x7ff\n 16780: a0 = a0 + 0xb9\n 16784: u64 [a0 + 1624] = 0\n 16788: u64 [a0 + 1616] = 0\n 16792: u64 [a0 + 1608] = 0\n 16796: t0 = 484, jump @671\n      : @529 [@dyn 242] (gas: 4)\n 16802: a1 = a1 + 0x701\n 16806: u64 [a2 + 0x660] = a0\n 16810: a0 = 0\n 16812: ra = 486, jump @4\n      : @530 [@dyn 243] (gas: 11)\n 16818: a1 = s1 + 0x7ff\n 16822: a1 = a1 + 0xb9\n 16826: u64 [a1 + 1600] = 0\n 16830: u64 [a1 + 1592] = 0\n 16834: u64 [a1 + 1576] = 0x11\n 16839: a2 = a1\n 16841: a0 = 0x4\n 16844: a1 = s1 + 0x7ff\n 16848: a1 = a1 + 0x6e1\n 16852: u64 [a2 + 1584] = 0\n 16856: ra = 488, jump @4\n      : @531 [@dyn 244] (gas: 2)\n 16862: a1 = i32 [0x200a4]\n 16867: jump @533 if a1 >u 63\n      : @532 (gas: 3)\n 16871: u32 [0x200a4] = 0x40\n 16877: a1 = 0x200b0\n 16882: jump @525\n      : @533 (gas: 2)\n 16885: a1 = 0x200b0\n 16890: jump @525\n      : @534 (gas: 6)\n 16893: a0 = s1 + 0x7ff\n 16897: a0 = a0 + 0xb9\n 16901: u64 [a0 + 1560] = 0\n 16905: u64 [a0 + 1552] = 0\n 16909: u64 [a0 + 1544] = 0\n 16913: t0 = 490, jump @671\n      : @535 [@dyn 245] (gas: 4)\n 16919: a1 = a1 + 0x6c1\n 16923: u64 [a2 + 0x620] = a0\n 16927: a0 = 0\n 16929: ra = 492, jump @4\n      : @536 [@dyn 246] (gas: 11)\n 16935: a1 = s1 + 0x7ff\n 16939: a1 = a1 + 0xb9\n 16943: u64 [a1 + 1536] = 0\n 16947: u64 [a1 + 1528] = 0\n 16951: u64 [a1 + 1512] = 0x11\n 16956: a2 = a1\n 16958: a0 = 0x4\n 16961: a1 = s1 + 0x7ff\n 16965: a1 = a1 + 0x6a1\n 16969: u64 [a2 + 1520] = 0\n 16973: ra = 494, jump @4\n      : @537 [@dyn 247] (gas: 2)\n 16979: a1 = i32 [0x200a4]\n 16984: jump @539 if a1 >u 63\n      : @538 (gas: 3)\n 16988: u32 [0x200a4] = 0x40\n 16994: a1 = 0x200b0\n 16999: jump @525\n      : @539 (gas: 2)\n 17002: a1 = 0x200b0\n 17007: jump @525\n      : @540 (gas: 6)\n 17010: a0 = s1 + 0x7ff\n 17014: a0 = a0 + 0xb9\n 17018: u64 [a0 + 1304] = 0\n 17022: u64 [a0 + 1296] = 0\n 17026: u64 [a0 + 1288] = 0\n 17030: t0 = 496, jump @671\n      : @541 [@dyn 248] (gas: 4)\n 17036: a1 = a1 + 0x5c1\n 17040: u64 [a2 + 0x520] = a0\n 17044: a0 = 0\n 17046: ra = 498, jump @4\n      : @542 [@dyn 249] (gas: 11)\n 17052: a1 = s1 + 0x7ff\n 17056: a1 = a1 + 0xb9\n 17060: u64 [a1 + 1280] = 0\n 17064: u64 [a1 + 1272] = 0\n 17068: u64 [a1 + 1256] = 0x11\n 17073: a2 = a1\n 17075: a0 = 0x4\n 17078: a1 = s1 + 0x7ff\n 17082: a1 = a1 + 0x5a1\n 17086: u64 [a2 + 1264] = 0\n 17090: ra = 500, jump @4\n      : @543 [@dyn 250] (gas: 2)\n 17096: a1 = i32 [0x200a4]\n 17101: jump @545 if a1 >u 63\n      : @544 (gas: 3)\n 17105: u32 [0x200a4] = 0x40\n 17111: a1 = 0x200b0\n 17116: jump @525\n      : @545 (gas: 2)\n 17119: a1 = 0x200b0\n 17124: jump @525\n      : @546 (gas: 18)\n 17127: sp = sp + 0xffffffffffffffc0\n 17130: u64 [sp + 0x38] = ra\n 17133: u64 [sp + 0x30] = s0\n 17136: u64 [sp + 0x28] = s1\n 17139: s0 = sp + 0x40\n 17142: sp = sp & 0xfffffffffffffff0\n 17145: a2 = u64 [a1 + 0x10]\n 17148: a3 = u64 [a1 + 0x18]\n 17151: a4 = u64 [a1 + 0x8]\n 17154: a1 = u64 [a1]\n 17156: a3 = a3 | a4\n 17159: a4 = a1 | a2\n 17162: a4 = a4 | a3\n 17165: a4 = a4 >> 0x20\n 17168: a2 = a2 | a3\n 17171: a2 = a2 << 0x20\n 17174: a2 = a2 | a4\n 17177: jump @552 if a2 != 0\n      : @547 (gas: 3)\n 17180: s1 = a0\n 17182: a0 = sp\n 17184: ra = 502, jump @2\n      : @548 [@dyn 251] (gas: 1)\n 17190: t0 = 504, jump @667\n      : @549 [@dyn 252] (gas: 1)\n 17196: jump @553 if a3 == 0\n      : @550 (gas: 1)\n 17199: t0 = 506, jump @673\n      : @551 [@dyn 253] (gas: 1)\n 17205: ret\n      : @552 (gas: 1)\n 17207: trap\n      : @553 (gas: 7)\n 17208: a1 = 0x200b0\n 17213: i32 a1 = a1 + 0\n 17215: a0 = 0x1\n 17218: a2 = 0\n 17220: ra = 0x1fc\n 17224: ecalli 12 // 'seal_return'\n 17226: fallthrough\n      : @554 [@dyn 254] (gas: 13)\n 17227: sp = sp + 0xffffffffffffffc0\n 17230: u64 [sp + 0x38] = ra\n 17233: u64 [sp + 0x30] = s0\n 17236: u64 [sp + 0x28] = s1\n 17239: s0 = sp + 0x40\n 17242: sp = sp & 0xffffffffffffffe0\n 17245: s1 = a0\n 17247: i32 a0 = sp + 0\n 17249: a1 = 0x4\n 17252: ra = 0x1fe\n 17256: ecalli 3 // 'call_data_load'\n 17258: t0 = 0x200\n 17262: jump @667\n      : @555 [@dyn 255] (gas: 1)\n 17265: t0 = 512, jump @667\n      : @556 [@dyn 256] (gas: 1)\n 17271: jump @559 if a3 == 0\n      : @557 (gas: 1)\n 17274: t0 = 514, jump @673\n      : @558 [@dyn 257] (gas: 1)\n 17280: ret\n      : @559 (gas: 7)\n 17282: a1 = 0x200b0\n 17287: i32 a1 = a1 + 0\n 17289: a0 = 0x1\n 17292: a2 = 0\n 17294: ra = 0x204\n 17298: ecalli 12 // 'seal_return'\n 17300: fallthrough\n      : @560 [@dyn 258] (gas: 14)\n 17301: sp = sp + 0xffffffffffffffa0\n 17304: u64 [sp + 0x58] = ra\n 17307: u64 [sp + 0x50] = s0\n 17310: u64 [sp + 0x48] = s1\n 17313: s0 = sp + 0x60\n 17316: sp = sp & 0xffffffffffffffe0\n 17319: s1 = a0\n 17321: u64 [sp + 56] = 0\n 17324: u64 [sp + 48] = 0\n 17327: u64 [sp + 40] = 0\n 17330: u64 [sp + 32] = 0x2\n 17334: a0 = sp\n 17336: a1 = sp + 0x20\n 17339: ra = 518, jump @6\n      : @561 [@dyn 259] (gas: 23)\n 17345: t0 = u64 [sp]\n 17347: a1 = u64 [sp + 0x18]\n 17350: a2 = u64 [sp + 0x8]\n 17353: a3 = u64 [sp + 0x10]\n 17356: a4 = 0xffffffffffff\n 17366: a5 = a2 & a4\n 17369: a0 = a3 << 0x10\n 17372: a2 = a2 >> 0x30\n 17375: a0 = a0 | a2\n 17378: a3 = a3 >> 0x30\n 17381: a1 = a1 << 0x10\n 17384: a1 = a1 | a3\n 17387: a1 = a1 & a4\n 17390: a2 = 0\n 17392: u64 [s1 + 48] = 0\n 17395: u64 [s1 + 56] = 0\n 17398: u64 [s1 + 16] = 0\n 17401: u64 [s1 + 24] = 0\n 17404: u64 [s1] = t0\n 17406: u64 [s1 + 0x8] = a5\n 17409: u64 [s1 + 0x20] = a0\n 17412: u64 [s1 + 0x28] = a1\n 17415: t0 = 520, jump @676\n      : @562 [@dyn 260] (gas: 1)\n 17421: ret\n      : @563 (gas: 46)\n 17423: sp = sp + 0xffffffffffffff70\n 17427: u64 [sp + 0x88] = ra\n 17431: u64 [sp + 0x80] = s0\n 17435: u64 [sp + 0x78] = s1\n 17438: s0 = sp + 0x90\n 17442: sp = sp & 0xfffffffffffffff0\n 17445: t0 = a0\n 17447: a2 = u64 [a1]\n 17449: t2 = u64 [a0 + 0x8]\n 17452: a5 = u64 [a1 + 0x8]\n 17455: t1 = u64 [a0]\n 17457: a3 = a2 + 0x1f\n 17460: ra = a3 <u a2\n 17463: a2 = a5 + ra\n 17466: a3 = a3 & 0xffffffffffffffe0\n 17469: u64 [sp + 0x8] = t1\n 17472: t1 = t1 + a3\n 17475: a4 = t1 <u a3\n 17478: a3 = a2 + t2\n 17481: a3 = a3 + a4\n 17484: s1 = a3 ^ a2\n 17487: a0 = a3 <u a2\n 17490: a0 = a4 if s1 == 0\n 17493: a4 = u64 [t0 + 0x18]\n 17496: a5 = a2 <u a5\n 17499: s1 = u64 [a1 + 0x10]\n 17502: t0 = u64 [t0 + 0x10]\n 17505: a1 = u64 [a1 + 0x18]\n 17508: a5 = ra if ra == 0\n 17511: a5 = a5 + s1\n 17514: s1 = a5 <u s1\n 17517: a2 = a5 + t0\n 17520: a0 = a0 + a2\n 17523: a5 = a2 <u a5\n 17526: a2 = a0 <u a2\n 17529: a1 = a1 + a4\n 17532: a1 = a1 + s1\n 17535: a1 = a1 + a5\n 17538: a5 = a1 + a2\n 17541: a1 = a5 >u 0\n 17543: a2 = a0 >u 0\n 17545: a2 = a1 if a5 != 0\n 17548: a1 = a0 | a5\n 17551: s1 = a3 >u 0\n 17553: s1 = a2 if a1 != 0\n 17556: jump @567 if s1 != 0\n      : @564 (gas: 13)\n 17559: a1 = u64 [sp + 0x8]\n 17562: a1 = t1 <u a1\n 17565: a2 = a3 ^ t2\n 17568: s1 = a3 <u t2\n 17571: s1 = a1 if a2 == 0\n 17574: a1 = a0 <u t0\n 17577: a2 = a5 ^ a4\n 17580: a4 = a5 <u a4\n 17583: a4 = a1 if a2 == 0\n 17586: a1 = a0 ^ t0\n 17589: a1 = a1 | a2\n 17592: a4 = s1 if a1 == 0\n 17595: jump @567 if a4 != 0\n      : @565 (gas: 7)\n 17598: u64 [sp + 0x50] = t1\n 17601: u64 [sp + 0x58] = a3\n 17604: u64 [sp + 0x60] = a0\n 17607: a0 = 0x40\n 17610: a1 = sp + 0x50\n 17613: u64 [sp + 0x68] = a5\n 17616: ra = 522, jump @4\n      : @566 [@dyn 261] (gas: 6)\n 17622: sp = s0 + 0xffffffffffffff70\n 17626: ra = u64 [sp + 0x88]\n 17630: s0 = u64 [sp + 0x80]\n 17634: s1 = u64 [sp + 0x78]\n 17637: sp = sp + 0x90\n 17641: ret\n      : @567 (gas: 1)\n 17643: t0 = 524, jump @675\n      : @568 [@dyn 262] (gas: 1)\n 17649: ra = 526, jump @4\n      : @569 [@dyn 263] (gas: 7)\n 17655: u64 [sp + 40] = 0\n 17658: u64 [sp + 32] = 0\n 17661: u64 [sp + 16] = 0x41\n 17665: a0 = 0x4\n 17668: a1 = sp + 0x10\n 17671: u64 [sp + 24] = 0\n 17674: ra = 528, jump @4\n      : @570 [@dyn 264] (gas: 2)\n 17680: a1 = i32 [0x200a4]\n 17685: jump @572 if a1 >u 63\n      : @571 (gas: 2)\n 17689: u32 [0x200a4] = 0x40\n 17695: fallthrough\n      : @572 (gas: 7)\n 17696: a1 = 0x200b0\n 17701: i32 a1 = a1 + 0\n 17703: a0 = 0x1\n 17706: a2 = 0x24\n 17709: ra = 0x212\n 17713: ecalli 12 // 'seal_return'\n 17715: fallthrough\n      : @573 [@dyn 265] (gas: 30)\n 17716: sp = sp + 0xffffffffffffff80\n 17719: u64 [sp + 0x78] = ra\n 17722: u64 [sp + 0x70] = s0\n 17725: u64 [sp + 0x68] = s1\n 17728: s0 = sp + 0x80\n 17732: sp = sp & 0xfffffffffffffff0\n 17735: a4 = u64 [a2]\n 17737: a3 = u64 [a1]\n 17739: s1 = u64 [a2 + 0x8]\n 17742: t1 = u64 [a1 + 0x8]\n 17745: t2 = u64 [a2 + 0x10]\n 17748: a5 = u64 [a1 + 0x10]\n 17751: a2 = u64 [a2 + 0x18]\n 17754: a1 = u64 [a1 + 0x18]\n 17757: t0 = t1 ^ s1\n 17760: u64 [sp + 0x8] = s1\n 17763: s1 = t1 <u s1\n 17766: u64 [sp + 0x18] = a4\n 17769: u64 [sp + 0x10] = a3\n 17772: a3 = a3 <u a4\n 17775: u64 [sp] = a3\n 17777: s1 = a3 if t0 == 0\n 17780: a3 = a1 ^ a2\n 17783: ra = a1 <u a2\n 17786: t0 = a5 <u t2\n 17789: ra = t0 if a3 == 0\n 17792: a4 = a5 ^ t2\n 17795: a3 = a3 | a4\n 17798: ra = s1 if a3 == 0\n 17801: jump @575 if ra != 0\n      : @574 (gas: 23)\n 17804: a3 = a5 - t2\n 17807: a1 = a1 - a2\n 17810: a1 = a1 - t0\n 17813: a2 = a3 <u s1\n 17816: a1 = a1 - a2\n 17819: a3 = a3 - s1\n 17822: a2 = u64 [sp + 0x8]\n 17825: a2 = t1 - a2\n 17828: a4 = u64 [sp]\n 17830: a2 = a2 - a4\n 17833: a4 = u64 [sp + 0x18]\n 17836: a5 = u64 [sp + 0x10]\n 17839: a4 = a5 - a4\n 17842: u64 [a0] = a4\n 17844: u64 [a0 + 0x8] = a2\n 17847: u64 [a0 + 0x10] = a3\n 17850: u64 [a0 + 0x18] = a1\n 17853: sp = s0 + 0xffffffffffffff80\n 17856: ra = u64 [sp + 0x78]\n 17859: s0 = u64 [sp + 0x70]\n 17862: s1 = u64 [sp + 0x68]\n 17865: sp = sp + 0x80\n 17869: ret\n      : @575 (gas: 8)\n 17871: u64 [sp + 80] = 0\n 17874: u64 [sp + 72] = 0\n 17877: u64 [sp + 64] = 0\n 17880: a0 = 0x4e487b7100000000\n 17890: a1 = sp + 0x40\n 17893: u64 [sp + 0x58] = a0\n 17896: a0 = 0\n 17898: ra = 532, jump @4\n      : @576 [@dyn 266] (gas: 7)\n 17904: u64 [sp + 56] = 0\n 17907: u64 [sp + 48] = 0\n 17910: u64 [sp + 32] = 0x11\n 17914: a0 = 0x4\n 17917: a1 = sp + 0x20\n 17920: u64 [sp + 40] = 0\n 17923: ra = 534, jump @4\n      : @577 [@dyn 267] (gas: 2)\n 17929: a1 = i32 [0x200a4]\n 17934: jump @579 if a1 >u 63\n      : @578 (gas: 2)\n 17938: u32 [0x200a4] = 0x40\n 17944: fallthrough\n      : @579 (gas: 7)\n 17945: a1 = 0x200b0\n 17950: i32 a1 = a1 + 0\n 17952: a0 = 0x1\n 17955: a2 = 0x24\n 17958: ra = 0x218\n 17962: ecalli 12 // 'seal_return'\n 17964: fallthrough\n      : @580 [@dyn 268] (gas: 70)\n 17965: sp = sp + 0xffffffffffffff40\n 17969: u64 [sp + 0xb8] = ra\n 17973: u64 [sp + 0xb0] = s0\n 17977: u64 [sp + 0xa8] = s1\n 17981: s0 = sp + 0xc0\n 17985: sp = sp & 0xfffffffffffffff0\n 17988: ra = u64 [a2]\n 17990: t0 = u64 [a1]\n 17992: a3 = u64 [a1 + 0x8]\n 17995: u64 [sp + 0x58] = a0\n 17998: a4 = u64 [a2 + 0x8]\n 18001: a0 = t0 mulhu ra\n 18004: s1 = a3 * ra\n 18007: a0 = a0 + s1\n 18010: s1 = a0 <u s1\n 18013: a5 = a3 mulhu ra\n 18016: a5 = a5 + s1\n 18019: s1 = t0 * a4\n 18022: a0 = a0 + s1\n 18025: u64 [sp + 0x50] = a0\n 18028: a0 = a0 <u s1\n 18031: s1 = t0 mulhu a4\n 18034: a0 = a0 + s1\n 18037: a0 = a0 + a5\n 18040: a5 = a0 <u a5\n 18043: s1 = a3 mulhu a4\n 18046: a5 = a5 + s1\n 18049: s1 = a3 * a4\n 18052: a0 = a0 + s1\n 18055: u64 [sp + 0x48] = a0\n 18058: s1 = a0 <u s1\n 18061: a5 = a5 + s1\n 18064: u64 [sp + 0x40] = a5\n 18067: t1 = u64 [a2 + 0x10]\n 18070: a2 = u64 [a2 + 0x18]\n 18073: t2 = u64 [a1 + 0x18]\n 18076: a0 = u64 [a1 + 0x10]\n 18079: a5 = a3 * t1\n 18082: u64 [sp + 0x20] = a2\n 18085: s1 = a2 * t0\n 18088: a1 = s1 + a5\n 18091: u64 [sp + 0x28] = a4\n 18094: s1 = a4 * a0\n 18097: a2 = t2 * ra\n 18100: a2 = a2 + s1\n 18103: s1 = t1 * t0\n 18106: a5 = a0 * ra\n 18109: s1 = s1 + a5\n 18112: u64 [sp + 0x30] = t1\n 18115: a4 = t1 mulhu t0\n 18118: u64 [sp + 0x10] = a4\n 18121: a4 = a4 + a1\n 18124: t1 = a0 mulhu ra\n 18127: a1 = t1 + a2\n 18130: a2 = s1 <u a5\n 18133: u64 [sp + 0x18] = a1\n 18136: u64 [sp + 0x8] = a4\n 18139: a5 = a1 + a4\n 18142: a2 = a2 + a5\n 18145: u64 [sp + 0x38] = t2\n 18148: a5 = a3 | t2\n 18151: a1 = t0 | a0\n 18154: a1 = a1 | a5\n 18157: a4 = u64 [sp + 0x40]\n 18160: a5 = u64 [sp + 0x48]\n 18163: s1 = s1 + a5\n 18166: t2 = s1 <u a5\n 18169: a2 = a2 + a4\n 18172: a2 = a2 + t2\n 18175: jump @582 if a1 == 0\n      : @581 (gas: 50)\n 18179: a1 = a2 ^ a4\n 18182: u64 [sp + 0x48] = a2\n 18185: a2 = u64 [sp + 0x48]\n 18188: a2 = a2 <u a4\n 18191: t2 = a2 if a1 != 0\n 18194: u64 [sp + 0x40] = s1\n 18197: a1 = u64 [sp + 0x10]\n 18200: a2 = u64 [sp + 0x8]\n 18203: s1 = a2 <u a1\n 18206: a2 = a3 >u 0\n 18208: a1 = u64 [sp + 0x20]\n 18211: a5 = a1 >u 0\n 18213: a2 = a2 & a5\n 18216: a5 = a1 mulhu t0\n 18219: a5 = a5 >u 0\n 18221: a2 = a2 | a5\n 18224: a4 = t1\n 18226: t1 = u64 [sp + 0x30]\n 18229: a3 = a3 mulhu t1\n 18232: a3 = a3 >u 0\n 18234: a2 = a2 | a3\n 18237: a2 = a2 | s1\n 18240: u64 [sp + 0x10] = a2\n 18243: a2 = u64 [sp + 0x18]\n 18246: a2 = a2 <u a4\n 18249: a4 = u64 [sp + 0x28]\n 18252: a3 = a4 >u 0\n 18254: s1 = u64 [sp + 0x38]\n 18257: a5 = s1 >u 0\n 18259: a3 = a3 & a5\n 18262: a5 = s1 mulhu ra\n 18265: a5 = a5 >u 0\n 18267: a3 = a3 | a5\n 18270: a5 = a4 mulhu a0\n 18273: a5 = a5 >u 0\n 18275: a3 = a3 | a5\n 18278: a2 = a2 | a3\n 18281: a3 = t1 | a1\n 18284: a5 = a0 | s1\n 18287: s1 = u64 [sp + 0x40]\n 18290: a3 = a3 >u 0\n 18292: a5 = a5 >u 0\n 18294: a3 = a3 & a5\n 18297: a2 = a2 | a3\n 18300: a1 = u64 [sp + 0x10]\n 18303: a1 = a1 | a2\n 18306: a2 = u64 [sp + 0x48]\n 18309: a0 = a1 | t2\n 18312: a0 = a0 & 0x1\n 18315: jump @583 if a0 != 0\n      : @582 (gas: 13)\n 18318: a0 = t0 * ra\n 18321: a1 = u64 [sp + 0x58]\n 18324: u64 [a1] = a0\n 18326: a0 = u64 [sp + 0x50]\n 18329: u64 [a1 + 0x8] = a0\n 18332: u64 [a1 + 0x10] = s1\n 18335: u64 [a1 + 0x18] = a2\n 18338: sp = s0 + 0xffffffffffffff40\n 18342: ra = u64 [sp + 0xb8]\n 18346: s0 = u64 [sp + 0xb0]\n 18350: s1 = u64 [sp + 0xa8]\n 18354: sp = sp + 0xc0\n 18358: ret\n      : @583 (gas: 8)\n 18360: u64 [sp + 144] = 0\n 18364: u64 [sp + 136] = 0\n 18368: u64 [sp + 128] = 0\n 18372: a0 = 0x4e487b7100000000\n 18382: a1 = sp + 0x80\n 18386: u64 [sp + 0x98] = a0\n 18390: a0 = 0\n 18392: ra = 538, jump @4\n      : @584 [@dyn 269] (gas: 7)\n 18398: u64 [sp + 120] = 0\n 18401: u64 [sp + 112] = 0\n 18404: u64 [sp + 96] = 0x11\n 18408: a0 = 0x4\n 18411: a1 = sp + 0x60\n 18414: u64 [sp + 104] = 0\n 18417: ra = 540, jump @4\n      : @585 [@dyn 270] (gas: 2)\n 18423: a1 = i32 [0x200a4]\n 18428: jump @587 if a1 >u 63\n      : @586 (gas: 2)\n 18432: u32 [0x200a4] = 0x40\n 18438: fallthrough\n      : @587 (gas: 7)\n 18439: a1 = 0x200b0\n 18444: i32 a1 = a1 + 0\n 18446: a0 = 0x1\n 18449: a2 = 0x24\n 18452: ra = 0x21e\n 18456: ecalli 12 // 'seal_return'\n 18458: fallthrough\n      : @588 [@dyn 271] (gas: 16)\n 18459: sp = sp + 0xfffffffffffffef0\n 18463: u64 [sp + 0x108] = ra\n 18467: u64 [sp + 0x100] = s0\n 18471: u64 [sp + 0xf8] = s1\n 18475: s0 = sp + 0x110\n 18479: sp = sp & 0xfffffffffffffff0\n 18482: t1 = u64 [a2 + 0x10]\n 18485: a5 = u64 [a2 + 0x18]\n 18488: s1 = u64 [a2 + 0x8]\n 18491: a2 = u64 [a2]\n 18493: a4 = s1 | a5\n 18496: a3 = a2 | t1\n 18499: a3 = a3 | a4\n 18502: u64 [sp] = a0\n 18504: u64 [sp + 0xa8] = a3\n 18508: jump @608 if a3 == 0\n      : @589 (gas: 73)\n 18512: a0 = u64 [a1 + 0x18]\n 18515: ra = u64 [a1 + 0x10]\n 18518: t0 = u64 [a1 + 0x8]\n 18521: t2 = u64 [a1]\n 18523: u64 [sp + 0x60] = t2\n 18526: a1 = clz t1\n 18528: a1 = a1 + 0x40\n 18531: a4 = clz a5\n 18533: a4 = a1 if a5 == 0\n 18536: u64 [sp + 0x30] = a2\n 18539: a1 = clz a2\n 18541: a2 = a1 + 0x40\n 18544: a1 = clz s1\n 18546: u64 [sp + 0x38] = s1\n 18549: a1 = a2 if s1 == 0\n 18552: a2 = a1 + 0x80\n 18556: u64 [sp + 0x40] = a5\n 18559: u64 [sp + 0x48] = t1\n 18562: a3 = t1 | a5\n 18565: a4 = a2 if a3 == 0\n 18568: a2 = a2 <u a1\n 18571: a2 = 0 if a3 != 0\n 18573: a1 = clz ra\n 18575: a1 = a1 + 0x40\n 18578: a5 = clz a0\n 18580: a5 = a1 if a0 == 0\n 18583: a1 = clz t2\n 18585: a1 = a1 + 0x40\n 18588: a3 = clz t0\n 18590: a3 = a1 if t0 == 0\n 18593: a1 = a3 + 0x80\n 18597: s1 = ra | a0\n 18600: a5 = a1 if s1 == 0\n 18603: a1 = a1 <u a3\n 18606: a1 = 0 if s1 != 0\n 18608: t1 = a2 ^ a1\n 18611: s1 = a2 <u a1\n 18614: a3 = a4 <u a5\n 18617: s1 = a3 if t1 == 0\n 18620: a2 = a2 - a1\n 18623: t2 = s1 <u 0x1\n 18626: t2 = t2 + 0xffffffffffffffff\n 18629: a3 = a2 - a3\n 18632: t1 = -s1\n 18634: a1 = a4 - a5\n 18637: a2 = t1 >u 0\n 18639: a4 = t2 >u 0\n 18641: a4 = a2 if t2 == 0\n 18644: u64 [sp + 0xa0] = a1\n 18648: a2 = a1 <u 0x100\n 18652: a2 = a2 ^ 0x1\n 18655: a5 = a3 >u 0\n 18657: a2 = a5 if a3 != 0\n 18660: a2 = a4 if s1 != 0\n 18663: s1 = u64 [sp + 0x60]\n 18666: a4 = s1 | ra\n 18669: a5 = t0 | a0\n 18672: a4 = a4 | a5\n 18675: a1 = u64 [sp + 0xa8]\n 18679: a5 = a1 <u 0x1\n 18682: a4 = a4 <u 0x1\n 18685: a4 = a4 | a5\n 18688: a2 = a2 | a4\n 18691: u64 [sp + 0x68] = a0\n 18694: a1 = a0\n 18696: a1 = 0 if a2 != 0\n 18698: a4 = ra\n 18700: a4 = 0 if a2 != 0\n 18702: u64 [sp + 0x58] = t0\n 18705: a5 = t0\n 18707: a5 = 0 if a2 != 0\n 18709: s1 = 0 if a2 != 0\n 18711: jump @606 if a2 != 0\n      : @590 (gas: 7)\n 18715: a0 = u64 [sp + 0xa0]\n 18719: a2 = a0 ^ 0xff\n 18723: t0 = a2 | t1\n 18726: a2 = a3 | t2\n 18729: a2 = t0 | a2\n 18732: a0 = u64 [sp]\n 18734: jump @607 if a2 == 0\n      : @591 (gas: 18)\n 18738: a2 = u64 [sp + 0xa0]\n 18742: a1 = a2 + 0x1\n 18745: u64 [sp + 0xa8] = a1\n 18749: u64 [sp + 0x50] = ra\n 18752: a0 = a1 <u 0x1\n 18755: a0 = a0 + a3\n 18758: u64 [sp + 0x80] = a0\n 18762: a0 = a0 | a1\n 18765: a0 = a0 <u 0x1\n 18768: a0 = a0 + t1\n 18771: u64 [sp + 0x70] = a0\n 18774: a0 = a0 <u t1\n 18777: a0 = a0 + t2\n 18780: u64 [sp + 0x78] = a0\n 18783: t0 = 0x220\n 18787: s1 = 0xff - a2\n 18791: a2 = 0x80 - s1\n 18795: fallthrough\n      : @592 [@dyn 272] (gas: 4)\n 18796: u64 [sp + 0x28] = s1\n 18799: a0 = u64 [sp + 0x60]\n 18802: a1 = u64 [sp + 0x58]\n 18805: ra = 546, jump @679\n      : @593 [@dyn 273] (gas: 6)\n 18811: u64 [sp + 0x98] = a0\n 18815: u64 [sp + 0x90] = a1\n 18819: a0 = u64 [sp + 0x50]\n 18822: a1 = u64 [sp + 0x68]\n 18825: a2 = s1\n 18827: ra = 548, jump @684\n      : @594 [@dyn 274] (gas: 10)\n 18833: u64 [sp + 0x88] = a0\n 18837: a0 = u64 [sp + 0x90]\n 18841: a0 = a0 | a1\n 18844: u64 [sp + 0x90] = a0\n 18848: a1 = u64 [sp + 0xa0]\n 18852: a2 = 0x7f - a1\n 18855: a0 = u64 [sp + 0x60]\n 18858: s1 = u64 [sp + 0x58]\n 18861: a1 = s1\n 18863: ra = 550, jump @684\n      : @595 [@dyn 275] (gas: 18)\n 18869: a2 = u64 [sp + 0x28]\n 18872: a3 = a2 <u 0x80\n 18876: u64 [sp + 0xa0] = a3\n 18880: a4 = u64 [sp + 0x90]\n 18884: a1 = a4 if a3 != 0\n 18887: a4 = u64 [sp + 0x68]\n 18890: a1 = a4 if a2 == 0\n 18893: u64 [sp + 0x90] = a1\n 18897: a1 = u64 [sp + 0x98]\n 18901: a4 = u64 [sp + 0x88]\n 18905: a1 = a1 | a4\n 18908: a1 = a0 if a3 == 0\n 18911: a0 = u64 [sp + 0x50]\n 18914: a1 = a0 if a2 == 0\n 18917: u64 [sp + 0x98] = a1\n 18921: a0 = u64 [sp + 0x60]\n 18924: a1 = s1\n 18926: ra = 552, jump @684\n      : @596 [@dyn 276] (gas: 13)\n 18932: a5 = u64 [sp + 0x70]\n 18935: a2 = u64 [sp + 0x78]\n 18938: a3 = u64 [sp + 0x80]\n 18942: a3 = a3 | a2\n 18945: a2 = u64 [sp + 0xa8]\n 18949: a2 = a2 | a5\n 18952: a2 = a2 | a3\n 18955: a3 = u64 [sp + 0xa0]\n 18959: a1 = 0 if a3 == 0\n 18961: u64 [sp + 0x88] = a1\n 18965: a0 = 0 if a3 == 0\n 18967: u64 [sp + 0xa0] = a0\n 18971: jump @604 if a2 == 0\n      : @597 (gas: 5)\n 18975: s1 = u64 [sp + 0xa8]\n 18979: a2 = s1 + 0xffffffffffffff80\n 18982: a0 = u64 [sp + 0x50]\n 18985: a1 = u64 [sp + 0x68]\n 18988: ra = 554, jump @679\n      : @598 [@dyn 277] (gas: 6)\n 18994: u64 [sp + 0x28] = a0\n 18997: u64 [sp + 0x18] = a1\n 19000: a0 = u64 [sp + 0x60]\n 19003: a1 = u64 [sp + 0x58]\n 19006: a2 = s1\n 19008: ra = 556, jump @679\n      : @599 [@dyn 278] (gas: 6)\n 19014: u64 [sp + 0x10] = a0\n 19017: u64 [sp + 0x20] = a1\n 19020: a2 = 0x80 - s1\n 19024: a0 = u64 [sp + 0x50]\n 19027: a1 = u64 [sp + 0x68]\n 19030: ra = 558, jump @684\n      : @600 [@dyn 279] (gas: 20)\n 19036: a2 = u64 [sp + 0x20]\n 19039: a1 = a1 | a2\n 19042: a2 = s1 <u 0x80\n 19046: u64 [sp + 0x20] = a2\n 19049: a3 = u64 [sp + 0x18]\n 19052: a1 = a3 if a2 == 0\n 19055: a3 = u64 [sp + 0x58]\n 19058: a3 = a1 if s1 != 0\n 19061: u64 [sp + 0x58] = a3\n 19064: a1 = u64 [sp + 0x10]\n 19067: a0 = a0 | a1\n 19070: a1 = u64 [sp + 0x28]\n 19073: a0 = a1 if a2 == 0\n 19076: a1 = u64 [sp + 0x60]\n 19079: a1 = a0 if s1 != 0\n 19082: u64 [sp + 0x60] = a1\n 19085: a0 = u64 [sp + 0x50]\n 19088: a1 = u64 [sp + 0x68]\n 19091: a2 = s1\n 19093: ra = 560, jump @679\n      : @601 [@dyn 280] (gas: 24)\n 19099: t0 = u64 [sp + 0x58]\n 19102: t2 = 0\n 19104: a2 = u64 [sp + 0x20]\n 19107: a1 = 0 if a2 == 0\n 19109: a0 = 0 if a2 == 0\n 19111: u64 [sp + 0x68] = a0\n 19114: a3 = u64 [sp + 0x30]\n 19117: a0 = a3 <u 0x1\n 19120: a2 = u64 [sp + 0x38]\n 19123: a0 = a2 - a0\n 19126: u64 [sp + 0x20] = a0\n 19129: a0 = a3 | a2\n 19132: a0 = a0 <u 0x1\n 19135: a2 = u64 [sp + 0x48]\n 19138: a4 = a2 - a0\n 19141: u64 [sp + 0x18] = a4\n 19144: a0 = a2 <u a0\n 19147: a2 = u64 [sp + 0x40]\n 19150: a2 = a2 - a0\n 19153: u64 [sp + 0x10] = a2\n 19156: a3 = a3 + 0xffffffffffffffff\n 19159: u64 [sp + 0x8] = a3\n 19162: ra = u64 [sp + 0x60]\n 19165: fallthrough\n      : @602 (gas: 103)\n 19166: u64 [sp + 40] = 0\n 19169: a4 = ra >> 0x3f\n 19172: a3 = t0 << 0x1\n 19175: s1 = t0\n 19177: t0 = a3 | a4\n 19180: a4 = ra << 0x1\n 19183: ra = u64 [sp + 0x90]\n 19187: a2 = ra >> 0x3f\n 19190: a2 = a2 | a4\n 19193: u64 [sp + 0x60] = a2\n 19196: a0 = u64 [sp + 0x20]\n 19199: t1 = a0 ^ t0\n 19202: a4 = a0 <u t0\n 19205: a0 = u64 [sp + 0x8]\n 19208: a5 = t2\n 19210: t2 = a0 <u a2\n 19213: t2 = a4 if t1 != 0\n 19216: a1 = a1 << 0x1\n 19219: a0 = u64 [sp + 0x68]\n 19222: a2 = a0 >> 0x3f\n 19225: a1 = a1 | a2\n 19228: u64 [sp + 0x58] = a1\n 19231: a2 = s1 >> 0x3f\n 19234: a0 = a0 << 0x1\n 19237: t1 = a0 | a2\n 19240: a0 = ra << 0x1\n 19243: a1 = u64 [sp + 0x98]\n 19247: a2 = a1 >> 0x3f\n 19250: a0 = a0 | a2\n 19253: a2 = a1 << 0x1\n 19256: a1 = u64 [sp + 0x88]\n 19260: a4 = a1 >> 0x3f\n 19263: a2 = a2 | a4\n 19266: a4 = a1 << 0x1\n 19269: s1 = u64 [sp + 0xa0]\n 19273: ra = s1 >> 0x3f\n 19276: a4 = a4 | ra\n 19279: s1 = s1 << 0x1\n 19282: a5 = a5 | s1\n 19285: u64 [sp + 0xa0] = a5\n 19289: a4 = a4 | 0\n 19291: u64 [sp + 0x88] = a4\n 19295: a1 = a2 | 0\n 19297: u64 [sp + 0x98] = a1\n 19301: a0 = a0 | 0\n 19303: u64 [sp + 0x90] = a0\n 19307: a2 = u64 [sp + 0x18]\n 19310: a0 = a2 - t1\n 19313: a0 = a0 <u t2\n 19316: a2 = a2 <u t1\n 19319: a4 = u64 [sp + 0x10]\n 19322: a3 = u64 [sp + 0x58]\n 19325: a4 = a4 - a3\n 19328: a4 = a4 - a2\n 19331: a4 = a4 - a0\n 19334: a4 = a4 >>a 0x3f\n 19337: a0 = u64 [sp + 0x30]\n 19340: a1 = a4 & a0\n 19343: u64 [sp + 0x50] = a1\n 19346: a5 = u64 [sp + 0x38]\n 19349: a5 = a5 & a4\n 19352: a0 = t0 ^ a5\n 19355: s1 = t0 <u a5\n 19358: t2 = u64 [sp + 0x60]\n 19361: ra = t2 <u a1\n 19364: s1 = ra if a0 == 0\n 19367: a2 = u64 [sp + 0x48]\n 19370: a2 = a2 & a4\n 19373: a1 = t1 - a2\n 19376: a0 = a1 - s1\n 19379: u64 [sp + 0x68] = a0\n 19382: a0 = a1 <u s1\n 19385: a2 = t1 <u a2\n 19388: s1 = u64 [sp + 0x40]\n 19391: s1 = s1 & a4\n 19394: a1 = a3 - s1\n 19397: a1 = a1 - a2\n 19400: a1 = a1 - a0\n 19403: a3 = t0 - a5\n 19406: t0 = a3 - ra\n 19409: a0 = u64 [sp + 0x50]\n 19412: ra = t2 - a0\n 19415: a5 = u64 [sp + 0xa8]\n 19419: s1 = u64 [sp + 0x80]\n 19423: a0 = a5 | s1\n 19426: a0 = a0 <u 0x1\n 19429: a3 = u64 [sp + 0x70]\n 19432: a2 = a3 <u a0\n 19435: a0 = a3 - a0\n 19438: a3 = a5 <u 0x1\n 19441: s1 = s1 - a3\n 19444: a3 = u64 [sp + 0x78]\n 19447: a3 = a3 - a2\n 19450: a5 = a5 + 0xffffffffffffffff\n 19453: u64 [sp + 0x80] = s1\n 19457: u64 [sp + 0x78] = a3\n 19460: a2 = s1 | a3\n 19463: u64 [sp + 0xa8] = a5\n 19467: a3 = a5 | a0\n 19470: a2 = a2 | a3\n 19473: t2 = a4 & 0x1\n 19476: u64 [sp + 0x70] = a0\n 19479: jump @602 if a2 != 0\n      : @603 (gas: 1)\n 19483: jump @605\n      : @604 (gas: 3)\n 19485: t2 = 0\n 19487: u64 [sp + 40] = 0\n 19490: fallthrough\n      : @605 (gas: 21)\n 19491: a3 = u64 [sp + 0x98]\n 19495: a0 = a3 >> 0x3f\n 19498: a1 = u64 [sp + 0x90]\n 19502: a1 = a1 << 0x1\n 19505: a0 = a0 | a1\n 19508: a5 = u64 [sp + 0x88]\n 19512: a1 = a5 >> 0x3f\n 19515: a3 = a3 << 0x1\n 19518: a1 = a1 | a3\n 19521: a2 = u64 [sp + 0xa0]\n 19525: a3 = a2 >> 0x3f\n 19528: a5 = a5 << 0x1\n 19531: s1 = a2 << 0x1\n 19534: s1 = t2 | s1\n 19537: a2 = u64 [sp + 0x28]\n 19540: a3 = a3 | a2\n 19543: a5 = a5 | a3\n 19546: a4 = a2 | a1\n 19549: a1 = a2 | a0\n 19552: a0 = u64 [sp]\n 19554: jump @607\n      : @606 (gas: 2)\n 19556: a0 = u64 [sp]\n 19558: fallthrough\n      : @607 (gas: 10)\n 19559: u64 [a0] = s1\n 19561: u64 [a0 + 0x8] = a5\n 19564: u64 [a0 + 0x10] = a4\n 19567: u64 [a0 + 0x18] = a1\n 19570: sp = s0 + 0xfffffffffffffef0\n 19574: ra = u64 [sp + 0x108]\n 19578: s0 = u64 [sp + 0x100]\n 19582: s1 = u64 [sp + 0xf8]\n 19586: sp = sp + 0x110\n 19590: ret\n      : @608 (gas: 8)\n 19592: u64 [sp + 224] = 0\n 19596: u64 [sp + 216] = 0\n 19600: u64 [sp + 208] = 0\n 19604: a0 = 0x4e487b7100000000\n 19614: a1 = sp + 0xd0\n 19618: u64 [sp + 0xe8] = a0\n 19622: a0 = 0\n 19624: ra = 562, jump @4\n      : @609 [@dyn 281] (gas: 7)\n 19630: u64 [sp + 200] = 0\n 19634: u64 [sp + 192] = 0\n 19638: u64 [sp + 176] = 0x12\n 19643: a0 = 0x4\n 19646: a1 = sp + 0xb0\n 19650: u64 [sp + 184] = 0\n 19654: ra = 564, jump @4\n      : @610 [@dyn 282] (gas: 2)\n 19660: a1 = i32 [0x200a4]\n 19665: jump @612 if a1 >u 63\n      : @611 (gas: 2)\n 19669: u32 [0x200a4] = 0x40\n 19675: fallthrough\n      : @612 (gas: 7)\n 19676: a1 = 0x200b0\n 19681: i32 a1 = a1 + 0\n 19683: a0 = 0x1\n 19686: a2 = 0x24\n 19689: ra = 0x236\n 19693: ecalli 12 // 'seal_return'\n 19695: fallthrough\n      : @613 [@dyn 283] (gas: 45)\n 19696: sp = sp + 0xffffffffffffff90\n 19699: u64 [sp + 0x68] = ra\n 19702: u64 [sp + 0x60] = s0\n 19705: u64 [sp + 0x58] = s1\n 19708: s0 = sp + 0x70\n 19711: sp = sp & 0xfffffffffffffff0\n 19714: a3 = u64 [a1 + 0x18]\n 19717: u64 [sp + 0x8] = a3\n 19720: a4 = u64 [a2 + 0x18]\n 19723: t2 = u64 [a1]\n 19725: u64 [sp] = t2\n 19727: a3 = u64 [a1 + 0x8]\n 19730: s1 = u64 [a2 + 0x8]\n 19733: a5 = u64 [a2]\n 19735: t1 = u64 [a1 + 0x10]\n 19738: t0 = u64 [a2 + 0x10]\n 19741: a2 = s1 + a3\n 19744: t2 = t2 + a5\n 19747: a5 = t2 <u a5\n 19750: a2 = a2 + a5\n 19753: ra = a2 ^ s1\n 19756: s1 = a2 <u s1\n 19759: s1 = a5 if ra == 0\n 19762: a1 = t0 + t1\n 19765: a5 = u64 [sp + 0x8]\n 19768: a5 = a5 + a4\n 19771: a4 = a1 <u t0\n 19774: a4 = a4 + a5\n 19777: a5 = a1 + s1\n 19780: a1 = a5 <u a1\n 19783: ra = a4 + a1\n 19786: a4 = a2 ^ a3\n 19789: a3 = a2 <u a3\n 19792: a1 = u64 [sp]\n 19794: s1 = t2 <u a1\n 19797: s1 = a3 if a4 != 0\n 19800: t0 = a5 <u t1\n 19803: a1 = u64 [sp + 0x8]\n 19806: a4 = ra ^ a1\n 19809: a3 = ra <u a1\n 19812: a3 = t0 if a4 == 0\n 19815: a1 = a5 ^ t1\n 19818: a1 = a1 | a4\n 19821: s1 = a3 if a1 != 0\n 19824: jump @615 if s1 != 0\n      : @614 (gas: 10)\n 19827: u64 [a0] = t2\n 19829: u64 [a0 + 0x8] = a2\n 19832: u64 [a0 + 0x10] = a5\n 19835: u64 [a0 + 0x18] = ra\n 19838: sp = s0 + 0xffffffffffffff90\n 19841: ra = u64 [sp + 0x68]\n 19844: s0 = u64 [sp + 0x60]\n 19847: s1 = u64 [sp + 0x58]\n 19850: sp = sp + 0x70\n 19853: ret\n      : @615 (gas: 1)\n 19855: t0 = 568, jump @675\n      : @616 [@dyn 284] (gas: 1)\n 19861: ra = 570, jump @4\n      : @617 [@dyn 285] (gas: 7)\n 19867: u64 [sp + 40] = 0\n 19870: u64 [sp + 32] = 0\n 19873: u64 [sp + 16] = 0x11\n 19877: a0 = 0x4\n 19880: a1 = sp + 0x10\n 19883: u64 [sp + 24] = 0\n 19886: ra = 572, jump @4\n      : @618 [@dyn 286] (gas: 2)\n 19892: a1 = i32 [0x200a4]\n 19897: jump @620 if a1 >u 63\n      : @619 (gas: 2)\n 19901: u32 [0x200a4] = 0x40\n 19907: fallthrough\n      : @620 (gas: 7)\n 19908: a1 = 0x200b0\n 19913: i32 a1 = a1 + 0\n 19915: a0 = 0x1\n 19918: a2 = 0x24\n 19921: ra = 0x23e\n 19925: ecalli 12 // 'seal_return'\n 19927: fallthrough\n      : @621 [@dyn 287] (gas: 14)\n 19928: sp = sp + 0xffffffffffffff20\n 19932: u64 [sp + 0xd8] = ra\n 19936: u64 [sp + 0xd0] = s0\n 19940: u64 [sp + 0xc8] = s1\n 19944: s0 = sp + 0xe0\n 19948: sp = sp & 0xfffffffffffffff0\n 19951: a1 = u64 [a0 + 0x10]\n 19954: a2 = u64 [a0 + 0x18]\n 19957: a3 = u64 [a0 + 0x8]\n 19960: a0 = u64 [a0]\n 19962: a2 = a2 | a3\n 19965: a0 = a0 | a1\n 19968: a0 = a0 | a2\n 19971: jump @623 if a0 == 0\n      : @622 (gas: 6)\n 19974: sp = s0 + 0xffffffffffffff20\n 19978: ra = u64 [sp + 0xd8]\n 19982: s0 = u64 [sp + 0xd0]\n 19986: s1 = u64 [sp + 0xc8]\n 19990: sp = sp + 0xe0\n 19994: ret\n      : @623 (gas: 3)\n 19996: a0 = sp + 0xa0\n 20000: a1 = 0x40\n 20003: ra = 576, jump @2\n      : @624 [@dyn 288] (gas: 15)\n 20009: a2 = u64 [sp + 0xb8]\n 20013: s1 = u64 [sp + 0xb0]\n 20017: a0 = u64 [sp + 0xa8]\n 20021: a1 = u64 [sp + 0xa0]\n 20025: u64 [sp + 0x10] = a0\n 20028: u64 [sp + 0x8] = a2\n 20031: a0 = a0 | a2\n 20034: u64 [sp + 0x18] = a1\n 20037: a1 = a1 | s1\n 20040: a1 = a1 | a0\n 20043: a1 = a1 >> 0x20\n 20046: a0 = a0 | s1\n 20049: a0 = a0 << 0x20\n 20052: a0 = a0 | a1\n 20055: jump @631 if a0 != 0\n      : @625 (gas: 8)\n 20059: u64 [sp + 144] = 0\n 20063: u64 [sp + 136] = 0\n 20067: u64 [sp + 128] = 0\n 20071: a0 = 0x8c379a000000000\n 20081: a1 = sp + 0x80\n 20085: u64 [sp + 0x98] = a0\n 20089: a0 = u64 [sp + 0x18]\n 20092: ra = 578, jump @4\n      : @626 [@dyn 289] (gas: 11)\n 20098: a2 = u64 [sp + 0x8]\n 20101: a2 = a2 | s1\n 20104: s1 = 0x100000000\n 20114: a0 = 0xfffffffc\n 20124: a1 = u64 [sp + 0x18]\n 20127: a0 = a1 <u a0\n 20130: a1 = u64 [sp + 0x10]\n 20133: a0 = 0 if a1 != 0\n 20135: u64 [sp + 0x8] = a2\n 20138: a0 = 0 if a2 != 0\n 20140: jump @631 if a0 == 0\n      : @627 (gas: 8)\n 20143: a0 = u64 [sp + 0x18]\n 20146: i32 a0 = a0 + 0x4\n 20149: u64 [sp + 120] = 0\n 20152: u64 [sp + 112] = 0\n 20155: u64 [sp + 96] = 0x20\n 20159: a1 = sp + 0x60\n 20162: u64 [sp + 104] = 0\n 20165: ra = 580, jump @4\n      : @628 [@dyn 290] (gas: 8)\n 20171: a0 = s1 + 0xffffffffffffffdc\n 20174: a1 = u64 [sp + 0x18]\n 20177: a0 = a1 <u a0\n 20180: a1 = u64 [sp + 0x10]\n 20183: a0 = 0 if a1 != 0\n 20185: a1 = u64 [sp + 0x8]\n 20188: a0 = 0 if a1 != 0\n 20190: jump @631 if a0 == 0\n      : @629 (gas: 8)\n 20193: s1 = u64 [sp + 0x18]\n 20196: i32 a0 = s1 + 0x24\n 20199: u64 [sp + 88] = 0\n 20202: u64 [sp + 80] = 0\n 20205: u64 [sp + 64] = 0x16\n 20209: a1 = sp + 0x40\n 20212: u64 [sp + 72] = 0\n 20215: ra = 582, jump @4\n      : @630 [@dyn 291] (gas: 7)\n 20221: a0 = 0xffffffbc\n 20231: a0 = s1 <u a0\n 20234: a1 = u64 [sp + 0x10]\n 20237: a0 = 0 if a1 != 0\n 20239: a1 = u64 [sp + 0x8]\n 20242: a0 = 0 if a1 != 0\n 20244: jump @632 if a0 != 0\n      : @631 (gas: 1)\n 20247: trap\n      : @632 (gas: 11)\n 20248: s1 = u64 [sp + 0x18]\n 20251: i32 a0 = s1 + 0x44\n 20254: a1 = u64 [0x20088]\n 20259: a2 = u64 [0x20090]\n 20264: a3 = u64 [0x20098]\n 20269: u64 [sp + 0x38] = a1\n 20272: u64 [sp + 0x30] = a2\n 20275: u64 [sp + 0x28] = a3\n 20278: a1 = sp + 0x20\n 20281: u64 [sp + 32] = 0\n 20284: ra = 584, jump @4\n      : @633 [@dyn 292] (gas: 3)\n 20290: a1 = 0x64\n 20293: a0 = s1\n 20295: ra = 586, jump @12\n      : @634 [@dyn 293] (gas: 6)\n 20301: i32 a1 = a0 + 0\n 20303: a0 = 0x1\n 20306: a2 = 0x64\n 20309: ra = 0x24c\n 20313: ecalli 12 // 'seal_return'\n 20315: fallthrough\n      : @635 [@dyn 294] (gas: 22)\n 20316: sp = sp + 0xffffffffffffff50\n 20320: u64 [sp + 0xa8] = ra\n 20324: u64 [sp + 0xa0] = s0\n 20328: u64 [sp + 0x98] = s1\n 20332: s0 = sp + 0xb0\n 20336: sp = sp & 0xfffffffffffffff0\n 20339: a5 = u64 [a1 + 0x10]\n 20342: a4 = u64 [a1 + 0x18]\n 20345: s1 = u64 [a1 + 0x8]\n 20348: t0 = u64 [a1]\n 20350: u64 [sp + 0x40] = a4\n 20353: u64 [sp + 0x38] = s1\n 20356: a1 = s1 | a4\n 20359: a4 = t0 | a5\n 20362: a4 = a4 | a1\n 20365: a4 = a4 >> 0x20\n 20368: u64 [sp + 0x48] = a5\n 20371: a1 = a1 | a5\n 20374: a1 = a1 << 0x20\n 20377: a1 = a1 | a4\n 20380: u64 [sp + 0x30] = a0\n 20383: jump @640 if a1 != 0\n      : @636 (gas: 21)\n 20387: s1 = t0\n 20389: a0 = u64 [a3 + 0x18]\n 20392: u64 [sp + 0x28] = a0\n 20395: a0 = u64 [a3 + 0x10]\n 20398: u64 [sp + 0x20] = a0\n 20401: a0 = u64 [a3 + 0x8]\n 20404: u64 [sp + 0x18] = a0\n 20407: a0 = u64 [a3]\n 20409: u64 [sp + 0x10] = a0\n 20412: a0 = u64 [a2 + 0x10]\n 20415: a1 = u64 [a2 + 0x8]\n 20418: a2 = u64 [a2]\n 20420: a0 = a0 << 0x20\n 20423: a0 = a0 >> 0x20\n 20426: u64 [sp + 136] = 0\n 20430: u64 [sp + 0x70] = a2\n 20433: u64 [sp + 0x78] = a1\n 20436: a1 = sp + 0x70\n 20439: u64 [sp + 0x80] = a0\n 20443: a0 = t0\n 20445: ra = 590, jump @4\n      : @637 [@dyn 295] (gas: 9)\n 20451: a2 = u64 [sp + 0x48]\n 20454: a3 = u64 [sp + 0x40]\n 20457: a0 = a2 | a3\n 20460: a1 = 0xffffffe0\n 20470: a1 = s1 <u a1\n 20473: a4 = u64 [sp + 0x38]\n 20476: a1 = 0 if a4 != 0\n 20478: a1 = 0 if a0 != 0\n 20480: jump @640 if a1 == 0\n      : @638 (gas: 23)\n 20483: a0 = s1 + 0x40\n 20486: u64 [sp + 0x8] = a0\n 20489: a0 = a0 <u s1\n 20492: a1 = a4 + a0\n 20495: u64 [sp] = a1\n 20497: a1 = a1 <u a4\n 20500: a1 = a0 if a0 == 0\n 20503: a1 = a1 + a2\n 20506: u64 [sp + 0x38] = a1\n 20509: a0 = a1 <u a2\n 20512: a0 = a0 + a3\n 20515: u64 [sp + 0x48] = a0\n 20518: i32 a0 = s1 + 0x20\n 20521: a1 = u64 [sp + 0x10]\n 20524: u64 [sp + 0x50] = a1\n 20527: a1 = u64 [sp + 0x18]\n 20530: u64 [sp + 0x58] = a1\n 20533: a1 = u64 [sp + 0x20]\n 20536: u64 [sp + 0x60] = a1\n 20539: a1 = sp + 0x50\n 20542: a2 = u64 [sp + 0x28]\n 20545: u64 [sp + 0x68] = a2\n 20548: ra = 592, jump @4\n      : @639 [@dyn 296] (gas: 15)\n 20554: a0 = u64 [sp + 0x30]\n 20557: a1 = u64 [sp + 0x38]\n 20560: u64 [a0 + 0x10] = a1\n 20563: a1 = u64 [sp]\n 20565: u64 [a0 + 0x8] = a1\n 20568: a1 = u64 [sp + 0x8]\n 20571: u64 [a0] = a1\n 20573: a1 = u64 [sp + 0x48]\n 20576: u64 [a0 + 0x18] = a1\n 20579: sp = s0 + 0xffffffffffffff50\n 20583: ra = u64 [sp + 0xa8]\n 20587: s0 = u64 [sp + 0xa0]\n 20591: s1 = u64 [sp + 0x98]\n 20595: sp = sp + 0xb0\n 20599: ret\n      : @640 (gas: 1)\n 20601: trap\n      : @641 (gas: 9)\n 20602: sp = sp + 0xffffffffffffff20\n 20606: u64 [sp + 0xd8] = ra\n 20610: u64 [sp + 0xd0] = s0\n 20614: u64 [sp + 0xc8] = s1\n 20618: s0 = sp + 0xe0\n 20622: sp = sp & 0xffffffffffffffe0\n 20625: s1 = a0\n 20627: ecalli 11 // 'return_data_size'\n 20629: fallthrough\n      : @642 (gas: 1)\n 20630: jump @654 if a0 == 0\n      : @643 (gas: 6)\n 20634: u64 [sp + 0x18] = s1\n 20637: ecalli 11 // 'return_data_size'\n 20639: s1 = a0\n 20641: a0 = sp + 0xa0\n 20645: a1 = 0x40\n 20648: ra = 594, jump @2\n      : @644 [@dyn 297] (gas: 28)\n 20654: a2 = u64 [sp + 0xb8]\n 20658: a5 = u64 [sp + 0xb0]\n 20662: u64 [sp + 0x38] = a5\n 20665: t0 = u64 [sp + 0xa8]\n 20669: u64 [sp + 0x30] = t0\n 20672: t1 = u64 [sp + 0xa0]\n 20676: u64 [sp + 0x28] = t1\n 20679: a0 = s1 + 0x1f\n 20682: u64 [sp + 0x20] = s1\n 20685: a1 = a0 <u s1\n 20688: s1 = a2\n 20690: a0 = a0 & 0xffffffffffffffe0\n 20693: a2 = a0 + 0x20\n 20696: a0 = a2 <u a0\n 20699: a3 = a1 + a0\n 20702: a4 = a3 <u a1\n 20705: a4 = a0 if a0 == 0\n 20708: u64 [sp + 120] = 0\n 20711: u64 [sp + 0x60] = a2\n 20714: u64 [sp + 0x98] = s1\n 20718: u64 [sp + 0x90] = a5\n 20722: u64 [sp + 0x88] = t0\n 20726: u64 [sp + 0x80] = t1\n 20730: u64 [sp + 0x68] = a3\n 20733: a0 = sp + 0x80\n 20737: a1 = sp + 0x60\n 20740: u64 [sp + 0x70] = a4\n 20743: ra = 596, jump @563\n      : @645 [@dyn 298] (gas: 11)\n 20749: a0 = u64 [sp + 0x28]\n 20752: a2 = u64 [sp + 0x30]\n 20755: a2 = a2 | s1\n 20758: a3 = u64 [sp + 0x38]\n 20761: a1 = a0 | a3\n 20764: a1 = a1 | a2\n 20767: a1 = a1 >> 0x20\n 20770: a2 = a2 | a3\n 20773: a2 = a2 << 0x20\n 20776: a1 = a1 | a2\n 20779: jump @653 if a1 != 0\n      : @646 (gas: 7)\n 20783: u64 [sp + 88] = 0\n 20786: u64 [sp + 80] = 0\n 20789: u64 [sp + 72] = 0\n 20792: a1 = sp + 0x40\n 20795: a2 = u64 [sp + 0x20]\n 20798: u64 [sp + 0x40] = a2\n 20801: ra = 598, jump @4\n      : @647 [@dyn 299] (gas: 2)\n 20807: ecalli 11 // 'return_data_size'\n 20809: fallthrough\n      : @648 (gas: 10)\n 20810: a3 = u64 [sp + 0x28]\n 20813: u64 [sp + 0x20] = s1\n 20816: a1 = u64 [sp + 0x38]\n 20819: a1 = a1 | s1\n 20822: a2 = 0xffffffe0\n 20832: a2 = a3 <u a2\n 20835: a4 = u64 [sp + 0x30]\n 20838: a2 = 0 if a4 != 0\n 20840: a2 = 0 if a1 != 0\n 20842: jump @653 if a2 == 0\n      : @649 (gas: 3)\n 20845: s1 = a0\n 20847: a0 = a0 >> 0x20\n 20850: jump @653 if a0 != 0\n      : @650 (gas: 5)\n 20853: i32 a0 = a3 + 0x20\n 20856: i32 a1 = s1 + 0\n 20858: u64 [sp + 0x10] = a1\n 20861: a1 = s1\n 20863: ra = 600, jump @12\n      : @651 [@dyn 300] (gas: 6)\n 20869: u32 [sp + 0xc0] = s1\n 20873: i32 a0 = a0 + 0\n 20875: i32 a1 = sp + 0xc0\n 20879: a2 = 0\n 20881: ecalli 10 // 'return_data_copy'\n 20883: fallthrough\n      : @652 (gas: 8)\n 20884: a4 = u64 [sp + 0x28]\n 20887: a0 = i32 [sp + 0xc0]\n 20891: s1 = u64 [sp + 0x18]\n 20894: a1 = u64 [sp + 0x20]\n 20897: a2 = u64 [sp + 0x38]\n 20900: a3 = u64 [sp + 0x30]\n 20903: a5 = u64 [sp + 0x10]\n 20906: jump @655 if a0 >=u a5\n      : @653 (gas: 1)\n 20909: trap\n      : @654 (gas: 5)\n 20910: a3 = 0\n 20912: a2 = 0\n 20914: a1 = 0\n 20916: a4 = 0x60\n 20919: fallthrough\n      : @655 (gas: 10)\n 20920: u64 [s1] = a4\n 20922: u64 [s1 + 0x8] = a3\n 20925: u64 [s1 + 0x10] = a2\n 20928: u64 [s1 + 0x18] = a1\n 20931: sp = s0 + 0xffffffffffffff20\n 20935: ra = u64 [sp + 0xd8]\n 20939: s0 = u64 [sp + 0xd0]\n 20943: s1 = u64 [sp + 0xc8]\n 20947: sp = sp + 0xe0\n 20951: ret\n      : @656 [export #0: 'call'] (gas: 2)\n 20953: a0 = 0\n 20955: ra = 602, jump @18\n      : @657 [@dyn 301] [export #1: 'deploy'] (gas: 2)\n 20961: a0 = 0x1\n 20964: ra = 604, jump @18\n      : @658 [@dyn 302] (gas: 9)\n 20970: a1 = a1 <u 0x20\n 20973: a1 = a1 ^ 0x1\n 20976: a1 = a0 if a3 != 0\n 20979: a0 = a3 >u 0\n 20981: a2 = a3 >u 0\n 20983: a2 = a0 if a3 == 0\n 20986: a0 = a3 | a3\n 20989: a2 = a1 if a0 == 0\n 20992: jump [t0]\n      : @659 (gas: 7)\n 20994: a1 = u64 [a2 + 0x38]\n 20997: a0 = a1 <u a0\n 21000: a1 = u64 [a2 + 0x30]\n 21003: a0 = 0 if a1 != 0\n 21005: a1 = u64 [a2 + 0x28]\n 21008: a0 = 0 if a1 != 0\n 21010: jump [t0]\n      : @660 (gas: 14)\n 21012: a3 = s1 + 0x100\n 21016: a0 = u64 [a3 + 0x28]\n 21019: a2 = u64 [a3 + 0x20]\n 21022: a2 = a2 | a0\n 21025: a0 = 0x100000000\n 21035: u64 [a3 + 0x20] = a0\n 21038: a0 = 0xfffffffc\n 21048: a1 = u64 [a3 + 0x38]\n 21051: a0 = a1 <u a0\n 21054: a1 = u64 [a3 + 0x30]\n 21057: a0 = 0 if a1 != 0\n 21059: u64 [a3 + 0x28] = a2\n 21062: a0 = 0 if a2 != 0\n 21064: jump [t0]\n      : @661 (gas: 13)\n 21066: a4 = s1 + 0x100\n 21070: a1 = u64 [a4 + 0x30]\n 21073: a2 = u64 [a4 + 0x20]\n 21076: a1 = a1 | a2\n 21079: a3 = u64 [a4 + 0x28]\n 21082: a2 = u64 [a4 + 0x38]\n 21085: a2 = a2 | a3\n 21088: a2 = a2 | a1\n 21091: a2 = a2 >> 0x20\n 21094: a1 = a1 | a3\n 21097: a1 = a1 << 0x20\n 21100: a1 = a1 | a2\n 21103: jump [t0]\n      : @662 (gas: 14)\n 21105: a0 = i32 [a2 + 0x10]\n 21108: a2 = u64 [a2]\n 21110: a1 = reverse a1\n 21112: a3 = a1 << 0x20\n 21115: a0 = reverse a0\n 21117: a0 = a0 >> 0x20\n 21120: a3 = a3 | a0\n 21123: a1 = a1 >> 0x20\n 21126: a0 = reverse a2\n 21128: a2 = a0 << 0x20\n 21131: a1 = a1 | a2\n 21134: a2 = a0 >> 0x20\n 21137: i32 a0 = a4 + 0x4\n 21140: jump [t0]\n      : @663 (gas: 15)\n 21142: a0 = u64 [a2 + 0x8]\n 21145: a1 = i32 [a2 + 0x10]\n 21148: a2 = u64 [a2]\n 21150: a0 = reverse a0\n 21152: a3 = a0 << 0x20\n 21155: a1 = reverse a1\n 21157: a1 = a1 >> 0x20\n 21160: a3 = a3 | a1\n 21163: a0 = a0 >> 0x20\n 21166: a1 = reverse a2\n 21168: a2 = a1 << 0x20\n 21171: a2 = a2 | a0\n 21174: a1 = a1 >> 0x20\n 21177: i32 a0 = a4 + 0x4\n 21180: jump [t0]\n      : @664 (gas: 12)\n 21182: a5 = s1 + 0x100\n 21186: a1 = u64 [a5 + 0x38]\n 21189: a0 = u64 [a5 + 0x28]\n 21192: a3 = u64 [a5 + 0x20]\n 21195: a3 = a3 | a0\n 21198: a4 = 0x100000000\n 21208: a0 = 0xfffffffc\n 21218: a0 = a1 <u a0\n 21221: a2 = u64 [a5 + 0x30]\n 21224: a0 = 0 if a2 != 0\n 21226: a0 = 0 if a3 != 0\n 21228: jump [t0]\n      : @665 (gas: 11)\n 21230: a2 = reverse a2\n 21232: a3 = a2 << 0x20\n 21235: a0 = a0 >> 0x20\n 21238: a0 = a0 | a3\n 21241: a2 = a2 >> 0x20\n 21244: a3 = u64 [s1 + 0xd8]\n 21248: u64 [a3 + 0x8] = a0\n 21251: u64 [a3] = a1\n 21253: u32 [a3 + 0x10] = a2\n 21256: a0 = s1 + 0x18d8\n 21260: jump [t0]\n      : @666 (gas: 11)\n 21262: a2 = reverse a2\n 21264: a3 = a2 << 0x20\n 21267: a0 = a0 >> 0x20\n 21270: a0 = a0 | a3\n 21273: a2 = a2 >> 0x20\n 21276: a3 = u64 [s1 + 0xf0]\n 21280: u64 [a3 + 0x8] = a0\n 21283: u64 [a3] = a1\n 21285: u32 [a3 + 0x10] = a2\n 21288: a0 = s1 + 0x18d8\n 21292: jump [t0]\n      : @667 (gas: 10)\n 21294: a0 = u64 [sp + 0x10]\n 21297: a1 = u64 [sp + 0x18]\n 21300: a2 = 0x100000000\n 21310: a2 = a2 ^ a0\n 21313: a2 = a2 | a1\n 21316: a3 = a0 >> 0x20\n 21319: a3 = a3 <u 0x1\n 21322: a3 = 0 if a1 != 0\n 21324: a3 = 0 if a2 == 0\n 21326: jump [t0]\n      : @668 (gas: 6)\n 21328: i32 a0 = a2 + 0\n 21330: u64 [s1 + 0x130] = a0\n 21334: a0 = u64 [s1 + 0x138]\n 21338: a1 = a2\n 21340: u64 [s1 + 0x128] = a2\n 21344: jump [t0]\n      : @669 (gas: 13)\n 21346: a5 = s1 + 0x100\n 21350: u64 [a5 + 0x30] = a2\n 21353: u64 [a5 + 0x28] = a3\n 21356: a0 = a2 | a3\n 21359: u64 [a5 + 0x38] = a1\n 21362: a1 = a1 | a4\n 21365: a1 = a1 | a0\n 21368: a1 = a1 >> 0x20\n 21371: u64 [a5 + 0x20] = a4\n 21374: a0 = a0 | a4\n 21377: a0 = a0 << 0x20\n 21380: a0 = a0 | a1\n 21383: jump [t0]\n      : @670 (gas: 10)\n 21385: a0 = u64 [a3 + 0x18]\n 21388: a1 = u64 [a3 + 0x10]\n 21391: a2 = u64 [a3 + 0x8]\n 21394: a3 = u64 [a3]\n 21396: a0 = reverse a0\n 21398: a1 = reverse a1\n 21400: a2 = reverse a2\n 21402: a3 = reverse a3\n 21404: a4 = 0x2000\n 21408: jump [t0]\n      : @671 (gas: 4)\n 21410: a2 = a0\n 21412: a0 = 0x4e487b7100000000\n 21422: a1 = s1 + 0x7ff\n 21426: jump [t0]\n      : @672 (gas: 8)\n 21428: a1 = u64 [a3 + 0x10]\n 21431: a0 = a0 | a1\n 21434: a1 = 0xfffffffc\n 21444: a1 = a4 <u a1\n 21447: a2 = u64 [a3 + 0x8]\n 21450: a1 = 0 if a2 != 0\n 21452: a1 = 0 if a0 != 0\n 21454: jump [t0]\n      : @673 (gas: 12)\n 21456: a2 = u64 [sp]\n 21458: a3 = u64 [sp + 0x8]\n 21461: u64 [s1] = a2\n 21463: u64 [s1 + 0x8] = a3\n 21466: u64 [s1 + 0x10] = a0\n 21469: u64 [s1 + 0x18] = a1\n 21472: sp = s0 + 0xffffffffffffffc0\n 21475: ra = u64 [sp + 0x38]\n 21478: s0 = u64 [sp + 0x30]\n 21481: s1 = u64 [sp + 0x28]\n 21484: sp = sp + 0x40\n 21487: jump [t0]\n      : @674 (gas: 9)\n 21489: a1 = u64 [a2 + 0xc0]\n 21493: u64 [s1 + 0x130] = a1\n 21497: a1 = u64 [a2 + 0xb8]\n 21501: u64 [s1 + 0x128] = a1\n 21505: a1 = u64 [a2 + 0xb0]\n 21509: u64 [s1 + 0x120] = a1\n 21513: a0 = u64 [a2 + 0xa8]\n 21517: u64 [s1 + 0x138] = a0\n 21521: jump [t0]\n      : @675 (gas: 8)\n 21523: u64 [sp + 64] = 0\n 21526: u64 [sp + 56] = 0\n 21529: u64 [sp + 48] = 0\n 21532: a0 = 0x4e487b7100000000\n 21542: a1 = sp + 0x30\n 21545: u64 [sp + 0x48] = a0\n 21548: a0 = 0\n 21550: jump [t0]\n      : @676 (gas: 6)\n 21552: sp = s0 + 0xffffffffffffffa0\n 21555: ra = u64 [sp + 0x58]\n 21558: s0 = u64 [sp + 0x50]\n 21561: s1 = u64 [sp + 0x48]\n 21564: sp = sp + 0x60\n 21567: jump [t0]\n      : @677 (gas: 8)\n 21569: a0 = u64 [a2 + 0x8]\n 21572: a1 = i32 [a2 + 0x10]\n 21575: a2 = u64 [a2]\n 21577: a3 = reverse a0\n 21579: a0 = a3 << 0x20\n 21582: a1 = reverse a1\n 21584: a1 = a1 >> 0x20\n 21587: jump [t0]\n      : @678 (gas: 4)\n 21589: a0 = 0x18d8\n 21593: a3 = s1 + a0\n 21596: a4 = a3 + 0x200\n 21600: jump [t0]\n      : @679 (gas: 2)\n 21602: a3 = a2 & 0x40\n 21605: jump @683 if a3 != 0\n      : @680 (gas: 1)\n 21608: jump @682 if a2 == 0\n      : @681 (gas: 6)\n 21611: i32 a3 = 0x40 - a2\n 21614: a3 = a1 << a3\n 21617: a1 = a1 >> a2\n 21620: a0 = a0 >> a2\n 21623: a0 = a0 | a3\n 21626: ret\n      : @682 (gas: 1)\n 21628: ret\n      : @683 (gas: 4)\n 21630: a0 = a2 + 0xffffffffffffffc0\n 21633: a0 = a1 >> a0\n 21636: a1 = 0\n 21638: ret\n      : @684 (gas: 2)\n 21640: a3 = a2 & 0x40\n 21643: jump @688 if a3 != 0\n      : @685 (gas: 1)\n 21646: jump @687 if a2 == 0\n      : @686 (gas: 6)\n 21649: i32 a3 = 0x40 - a2\n 21652: a3 = a0 >> a3\n 21655: a0 = a0 << a2\n 21658: a1 = a1 << a2\n 21661: a1 = a1 | a3\n 21664: ret\n      : @687 (gas: 1)\n 21666: ret\n      : @688 (gas: 4)\n 21668: a1 = a2 + 0xffffffffffffffc0\n 21671: a1 = a0 << a1\n 21674: a0 = 0\n 21676: ret\n",
            "bytecode": {
              "object": "50564d00008563000000000000010700c1d000c000800380a04349464655534e4954554f5f544e4549554f4d415f545550524546534e4152545f44454c4941465f0000314e454b4f54504e495f544e45494e554f4d415f54554b996ca45fd98ad75f27fc85dad05165d5b87f6537ce13e622d859018430d1e35f44494c41564e497550adc85f9b204c6aa58b08e1e2138fef6f1c0a69ff0d564f1c82034c4f39264349464655534e4951494c5f544e454900005954494449550481091000000000070000000b0000001900000027000000350000003b0000004800000053000000620000006f0000007f0000008f0000009a000000ac000000b70000006164647265737363616c6c63616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a6563616c6c65726465706f7369745f6576656e746765745f73746f72616765686173685f6b656363616b5f3235367265665f74696d655f6c65667472657475726e5f646174615f636f707972657475726e5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051302c0d9510463616c6cc0e151066465706c6f7906c0a661812e02c0ae542b007301b602210382038a0360046504e704f2041f0550058205c305e20523062e06740688069d06dc060107a90838095909c509140a7f0a840abb0a020b800b850bce0bf20b740c790cb20ce00c2d0d5f0dcb0ddf0dee0d0c0e350e3b0e590e750e850e600f6f0f860fd40f06107010791089109610bb10c110df10fb100c11ca11da1100129a123b138e130c1412156815d915df152a1657160c1737175b1794179e17c017f117c018ee182c1985198b19b619f219501a5d1a791ab21ab81acb1ad11a161b561bd31b6b1c3b1d881d961d501edc1e241f2d1f531fb51fc91f0b202d203420532070208120552165217921c021e82146224f227e22a022a722c422e122f222aa23ba23ce233a24d524232566256f2594251226a4268227d127df279c282c294129ac29b229de29ee291a2a2e2a7b2ab02ab62acd2ad32a482b922bff2b492c252d432d8b2d952dcb2d122e402e5e2ec42e162f482f6b2fbd2f043027309430a13008315a316f3179311d322a329b32a932b632bc32d332d9320a337533d733e733133427347634843491349734bc343e35d6353336b5372d38db38fd3837393d3971398139b539c939183a3a3a743a7a3aae3abe3af23a063b763be23bf33b743cea3c473da63dba3dc43db53e0a4017406640ad40d9402c414a41a241b241de411742274253428c429c42c84226432c4335434b437143774380439543c1430d44d644f144f74410453445f04509462d46de47f7471b486c497b499149b549f449324a464a5c4a9b4aae4ccc4cf04c954d9b4db44dd84d294e824ecb4efd4e424f4d4f5c4fe34f4a50ae500d5147518551e151ea513908a8000251087a063307d0000383770a0d286d069511f07b10087b15648964753308206497501002eb037c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511d87b10207b15187b161082897b19088289087b19828510828618330820501004a3026f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511a07b10587b15507b16489515608411e06476828718828910828a0882886f776f996faa6f887b18187b1a107b19087b17491138491130491128491120481140208318831a20831b403309ff33070a07821738821830821928821a206f776f886f996faa7b6a187b69107b68087b675012067f5132009511a07b10587b15509515608411e08272827a08827b108277188283828908828c108288186f746fbb6faa6f276f826fcc6f996f387b17187b1a107b1b087b147b18387b19307b1c287b12208318831a203309ff330b2033070a0e9551a0821058821550951160320082186f888219086f99821a106faa821b186fbb7b1b587b1a507b19487b18408218206f888219286f99821a306faa821b386fbb7b1b787b1a707b19687b18608379836a8317403308020a06955160ff8210980082159000821688009511a00032007b183850100c8c006f687b187882186f887b18708218086f887b18688218106f887b18608218186f887b1898008218206f887b1890008218286f887b1888008218306f887b1880008218406f887b18b8008218486f887b18b0008218506f887b18a8008218586f887b18a0008379811a388317603308030a06955120ff8210d8008215d0008216c8009511e00032008b7910520931c8780883881f8488e05638000001253309a40002390aa40002ae8a093d08a40002013308b000028377c887073200009511f07b10087b158475010a04013d07a0000251050750100e095010103d029511c0fd951700027b70387b75307b7628951540028411e049215801492150014921480149214001831740010a0f01821750018218580182194801821a4001d49808d4a707d487075207a6013906a0000297672098772095771f8477e095788000d87807492138017b1820017b17280194777b173001330740951820015010126dfc33078000646850101424ff8377646833090a020153164064014921f8004921f0004921e0008000951700019518e0004921e800501016cd3d821700017b1720821708017b1718801610014921b8004921b0004921a000a0009517c0009518a0004921a8005010189c3d8217c0007b17388217c8007b17308017d0007b172849217801492170014921680149216001951780009518600150101ac4fc8017940097772082189800d46707492198014921900149218801492180018219187b19a8018219207b19a0017b18b8017b17b001951780019518a00150101cfafc4921d8014921d0014921c8013306017b16c0019517609518c00150101e64fc801774977720821878821928d497074921f8014921f0014921e8017b16e001821930951a00027ba9088219387ba97ba8187ba7109517e001951800025010209afc951740330840501022ecf9821758821850821948821640d49707d48609d47909989920d48707977720d4970751071c003308b00002838833070128383308b000028388330701282c64673308501024a2fd8377330833090a022884f9646733085010268efd8378330733093300280a0c280a33093300280a0c01951110fe7b10e8017b15e0017b16d8019515f001951110e08411e064169569d8184929c0014929b8014929a80180003307409568801a4929b00150102a78fa3307a000027b6738013907a000025517040728a738956700208377a0fa330833002c0a03019569d8188197e4015247a72012d20a283e1151478116fe0d4a045247dd0d16180a28920e51474278626a2c0551470a649a6d0a287d0f4929400549293805492930054929280595670020837700fe0a0f01956ad81895ab000582b73882b84082b93082ba28d49808d4a707d487075107062858378267380181775617630728583795670020837720fe3308040a039568d818958900058297607b6738018297587b6730018297507b6728018297487b67200195670020837740fe3308240a039568d8189589000582978000956800017b87188297787b87108297707b87088297687b8795670020837760fe3308440a03019567d818827898058279a00514070000000001000000d38707d497077b68f8009888208888017b69d0009498937852080628c1368264280182620801d424078260200182680001d4800a8263300195680001828910d49309d49a0c828a38828b18d4ba09d49707d4c70752070628c0101407ffffffff000000007b67d8009562d818822790057b67e800822788057b67f0008267f8009777209877207b67e0001407ffffffffffff00007b67c8009567801850102ef13a956ab81095a800078287d0008289c800828be80082a3f00764a2826cc800d2c70a7b69a80082672001d8970782692801d3a9087b6aa000d8a90ada870ad2c3097b6b9800956c000182c7d8b70782cb08d39b087b699000d89b09da870982c73882c830d48707947a82c71882c810d487079479d2a9094922c0074922b8077b29a807956760184922b007501030a5449567d8184927c0054927b8054927b0054927a805956740189568801e501032edf88262e000826ae8008269f000956bb81082b7900782b8880782bc98077b67b800330bffd2b7077b68c000d2b808d39808d3a707d487077b6cb0008268d800d2c808d38208d487075107649568d8184928e0054928d8054928d0054928c80501956720189568a01e50103481f89569b810959a000782a77082a86882a9788477ff8488ff826ad800d2a909826ae000d3a909826af000d3a808826ae800d3a707d48707d49707510706282b119567ff079577c10333084050103606f69569ff079599b9008292200395980003828c18828b10828708d42b0ad4c708d4a808988820d4ca0a97aa20d4a80851080628d90e4929f8024929f0024929e802140a00000000a079c3089568ff079588a1037b9a00037b6738017b6b30017b6220017b6c2801501038d5f650123a3f4852070628970e8387049569ff079599b9004929e0024929d8024929c802209568ff07958881034929d0027b6a28017b6b200150103c99f6956b000182ba2882b93082b83882b7209577dcd87807949794a75107490e838724956aff0795aab900492ac002492ab802492aa8020a9568ff0795886103492ab00250103e52f6956a000182a9381407bcffffff00000000d8790782a830948782a82894875107fe0d8397443a08600002956aff0795aab900492a90027ba8a00214080000000000004f547ba898029568ff0795884103492a88023300b80028f5f549292002492918024929100249290802956700208377e0fa3300400a0f33024228d848501242d54882b71882b82082b91082ba08d49808d4a707d48707510706285433826738018177561703072854339567d81849274002492738024927300249272802956700029568001b50104478f6956800028287107b6728018287087b67380182877b6730019567e00133084050104628f4956b000182baf80082b8f00082b9e80082b7e000d49a0ad48709d4a909989920d4a808978820d498085208030d956a000182a8289788209889204926d80182a8307ba8c00082a8387ba8c8009568c0017ba9d0007b6738013300d6012801f54929a00249299802492990024929880295670020837760fb3300480a0f33024a28e44750124ae14782b7980082b8a00082b9900082ba8800d49808d4a707d48707510706287632826738018177561723072876329567ff079577210350104c9e369568ff079588b900958900028297787b67d8008297707b67e0008297687b67e8009567ff079577e10250104eba369568ff079588b900958900028297307b67c8008297287b67f8008297507b67d0008297487b6700019567d8184927c0024927b8024927b0024927a8029567ff079577c1029568801b50105019f59568ff079588b90095890002829718956800017b87288297107b87208297087b87309567ff079577a102330840501052bbf29569ff079599b9008292000295980001828cf800828bf0008287e800d42b0ad4c708d4a808988820d4ca0a97aa20d4a80852088e0b4929d8014929d0014929c801140a000000003182a0709568ff07958881027b9ae0017b6738017b6218017b6c10017b6b080150105489f33307b000037b67f00083777b67c0003300560a01956a000182ab3882a718501258cb455108300b8269f000829808140700000000240000007b67b80050125a6a44956cff0795ccb900492cc00195cb00017bb9b8007bb8b0009568ff07958861027bbaa80050105c1ff333005e0a0901826720016f77977820826928016f99989920d4980882693001501260ba444927e0024927d8024927d0024927c80233082482673801501062a1f57b6730013308208267380150106491f59568d8184828e80220492820034928180349281003492808038268f00097882098882014090000000018000000d498029568a01b9788209888209569e01b979920d4890a82683001978820988820826bb800d48b0b9777209877209568c01b978820d4780c3308ff3309ff7b62300164270a010152076f0b0a0b01330c20aec7080a0b647c019569ff079599b900826a3801826218018267100182680801492620017b6c2801959b00017bbc487bba68492950017bb870492958017bb778492960019567ff07957721029568ff07958801027b928001501066b434826a20018ea782682801501268804252090628c1309567ff079577e1018268380150106a94f09568ff079588b900958900018297407b6798008297387b67a0008297307b67b0008297287b67a8009567d81849276003492758034927500349274803019567ff079577c1019568201c50106c72f29568ff079588b90095890001829718956800017b87208297107b87188297087b87289567ff079577a10133084050106e14f09562ff079522b900822a00016428828bf800828cf0008287e800d4ac09d4b708d49808988820d4b909979920d498085208e9084922d8004922d0004922c8007b6a9000140a000000003182a0709568ff07958881017b2ae0007b6738017b6b10017b6c0801501070e4f08267c0003300720a01956a000182ab38826790005012743043510895088269f0005012760542956cff0795ccb900492cc0007bc8b8007bc9b0009568ff07958861017bcaa80050107899f033007a0a0901826718016f77977820826920016f99989920d498088269280150127c3442492780034927780349277003492768033308248267380150107e1bf37b67280133082082673801502080000bf39568d81848288803204928c0034928b8034928b0034928a8039568401c9788209888209569801c979920d4890a82682801978820988820826bb800d48b0b9777209877209568601c978820d4780c3308ff3309ff826730010a01015107062800190a0b01330b20aeb7080a0b647b019569ff079599b900826a38018267100182680801492628017b6b30017b9b487b9a684919507b98704919587b97784919609567ff07957721019568ff0795880101826b90007b9b8000502082004b32826a28018ea78268300150228400164052090628212f1407ffffffffffff00007b67b8009567ff079577e10082683801502086001bee9569ff079599b9008297407b6730018297387b6738018297307b6790008297287b6788008267c8008268b800d2870795680010492898f895680010492890f87b672801956800107b8788f88267f800956800107b8780f8826798007b978267a0007b97f88267b000956800107b87a8f89567ff079577c1009568ff079588a1009569ff0795998100826aa800956b00107bbaa0f850208800a0329568ff079588b9008287207b67c8008287187b67a0008287107b6798008287087b6780008267d0008268b800d2870795680010492838f895680010492830f8956900017b9718956800107b8728f88297956800107b8720f8829730956800107b8758f8829738956800107b8750f882679000956800107b8748f89567ff079577619568ff079588419569ff07959921826a8800956b00107bba40f850208a00ff3195670010827778f87b67d00095670010827770f87b677895670010827768f87b677095670010827760f87b67689568d818492800044928f8034928f0034928e803039567ff079577019568c01c50208c00b9ee95670010827c18f895670010827b10f895670010827a08f895670010827900f8d4ca07d4b908d48707510706283e178267687b672006826780007b6740068267707b672806826798007b6748068267787b6730068267a0007b6750068267d0007b673806956760069568400695692006826ac8007b6a580650208e002732826b78068263700682626006826c6806d4b30788280494c8947851080628dd2c98370197b83fd4870798c80197393fd4980898290197ca3fd4a90998b401959a0188a901c89808956900017b9a307b9828d4a808888801c878087b9838d87807c847077b6200017b6cf8007b6308017b9b1064b901826830016420d8280b826a2801d3ca0864c4d8ca0ada8b0a82683801d8380bd3970c643264737b691801d89707dacb07d3280bd4cb0bdaba0752070628f817826730017b672003826700017b674003826728017b6728038267f8007b674803826738017b673003826708017b6750037b6320017b633803956760039568400395692003826a10017b6a5803502090000f33826a6003826768038268700382697803826b2001956c00027bcbd800826b38017bcbd000826b28017bcbc800826b30017bcbc0007bc9f8007bc8f0007bc7e800956700039568e0029569c0027bcae000502092008e37956b000382b71882b81082b982ba08977b3f988c01d4cb0b97883f98ac01d4c80897aa3f989901d49a0a98770182623001826c280182633801826920017b6a30017b6828017b6b380128d0fe4929600249295802492950024929480295670020837720fb330094000a0f33029600287f3e502296007c3e82b75882b86082b95082ba48d49808d4a707d48707510706282e2982673801817856180307282e299568d8184928800249287802492870024928680203956760029568401b502098001dec82677802956800017b8738826770027b8730826768027b8728826760027b87209567400233084050209a00c4e9956b000282b75882b85082b94882ba40d49707d48a09d47909989920d48707977720d497075207a20295690001829720956b00027bb7208297287bb7288297307bb730956820028297387bb73864a77b6a38013300d60128a1ea51473182a0700a2886289567f82049176049175849175049174895670020837740010a0f01956af82082a75882a86082a95082aa48d49808d4a707d4870751070628ca288267380181775617230728c4289567001a50209c00452c956ad81895ab000182b72882b83080a93801492a20017bb9187bb8109568e0197bb708330750209e001eea9568d818492800014928f8004928e8000464893307209568c0194929f0005020a000fae93908a4000256183f0b2003a4000240019517e08479e07b69380164913307b00002837783993308403300a2000a08826a38013302a40028f83b826a38015022a400f13b83bbf800c86b0b7bba80007bb9787bb8707bb7689567a019956860215020a60087ea9568d8188287e000956900017b97388287d8007b97308287d0007b97288287c8007b9720956780193308405020a8002ae8956ad81882a7c00082a8b80082a9b00082aba800d49707d48b09d47909989920d48707977720d4970752070401956900018297207ba788008297287ba790008297307ba79800956860198297387ba7a00064b77b9b383300d6012804e99567f8204927a00049279800492790004927880095670020837780010a0f01956af82082a7980082a8a00082a9900082aa8800d49808d4a707d48707510706283d27826738018177561703072837279568f8204928c0004928b8004928b0004928a800019567601a9568a0215020aa0087e99568d8189589000182979800956800017b8728829790007b8738829788007b87309567401a3308405020ac002de7956ad81895ac000182cb800082c87882c97082c768d49b0bd48709d4b909989920d4b808978820d4980852080628bd2600956740193308405020ae00efe69569d81882928000829c78829b70829768d42b0ad4c708d4a808988820d4ca0a97aa20d4a8085208cc491958491950491948140a00000000a079c308956820197b9a607b6738017b6b30017b6220017b6c28015020b000d0e75022b20039395107938387049569d818330c49194049193849192820956800194919307b6a28017b6b20015020b4009fe795690001829b28829a308298388297209577dcd8780794a794b751074eff8387249569d8184919204919184919081a9568e0184919105020b60063e795690001829a381407bcffffff00000000d87a078298309487829828948751070eff83a7443a080000023a090800023a0a100002956bd8187bb895bc00ff7bc9f8007bcaf0001409000000000000544e9568c0187bc9e8005020b80005e7330864826738015020ba00bae983783307013309640a0c019567ff07957741023308405020bc00a2e59567ff079577b900957900018298a0007b683001829898007b682801829890007b682001829788007b6738013300be000a0b3302c000289b375022c0009837520866fe647998772052075dfe5022c2008b385020c40046e99568d818826928017a892803837795680020838800fc33090a0a9567d818817728030182683001ac8726fe0a0b01647898772052071afe826738017b6830015020c60001e98378816930013307010a0c956780013300da01286c28956a000182a73082a820d4870782a83882a928d49808d487075107a103956700183308405020c800c5e49564b81082424807824a600782435007824b5807952c20d82c07c87308d83809da7709c8b9097b6b8000d8b9077b6a8800c8a707d49c0ad48707d47a0a98aa20d49707977720d4a70752077ffd492438074924300749242807140700000000bb9c05a99568e0177b4740077b6c7064c77b62d8007b63785020ca0082e58267d8009577248268d800d88708826978c88909826a78d8a90ada880a82688000c88a0ad88a08826b8800c8b808826b3801956cb8107bcbc006826b30017bcbb806826b28017bcbb006826b20017bcba806826bd0007bcbe006826bf8007bcbd806826be8007bcbd0067bc9f0067bc7e8067bcaf8067bc800079567c0179568a01795698017956a6017826bf0007bcbc8065020cc00f732826c78826bd80082698000d49b0782688800d4c808d48707987720d49808978820d4870752078ffc9567b8108274080795790007829a108298207b6868829818d8b400d3ca07d8ca09da700982678000c97803d89302d8780b82678800826868c97807c9b707c927027b6258c99303c9ca07c9070a7b6a608267d800c974087b6868958ce0d88c08c88a099599ffd3a904d8a90bda480b643a7b6350883801c9820395a8ffc88b0bd88b0ac8a302956ab81095a800067b8c88007b8990007b8b9800956840177ba2a0065020ce001ae49567b810826858957900067b98608268507b98588268607b98508268687b9848826888007b988000826880007b98788268787b9870647a95672017956800178269d8007ba968065020d0008d269567e0168268d8005020d20085e29568b810958900068297407b6788008297387b6780008297307b67788297287b67d8000a090164728267b8006f779778208269b0006f99989920d498088269c0006f99979a20330bb00003987720d4a7079899203e07b800033e08b000033d09c000039569d818492900064929f8054929f00582678800826c78d47c0c8268d800648a82678000d47808d4c808988820d4c707977720d487074929e8055207ebfa64a883a77b67b8008267707b62b0007b6bc0005020d400c7e56478956ad818482a08068267b8008e77826bb0008eb9fc08d497079a7995ab00067bb9407bb9387bb9307bb9288269c000979920989920977723d497079569c01e979920989920956a001f97aa20d49a0a9788203309b00002988820826bd80097bb20d48b0b9799209899209568e01e978820d4980c3308ff3309ff0a017b67d8009567c0165020d600a4318267d800510706281a14956a000182a71082a8d4870782a81882a908d49808d48707520745069567d8184927e0064927d8064927d0064927c8069567e0139568a01f5020d80023e33302da009568b81001958900038297387b67c0008297307b67b8008297287b67d0009567c0133308405020dc00c8e09569b8108292200395980003828c18828b10828708d42b0ad4c708d4a808988820d4ca0a97aa20d4a8085208a1f94929f8024929f0024929e802140a000000003182a0709568a0137b9a00037b67f8007b62b0007b6c88007b6b80005020de00a0e13307b000037b67d80083777b67783300e0000a01826bf8008267b00082688800d487071408fcffffff00000000d88b088269800094989478510831f98269d800829808140700000000240000007b67705022e2006c32956cb810492ce00295cb00027bb9d8007bb8d000956880137bbac8005020e40028e13300e6000a09018267b8006f779778208269c0006f99989920d498088269d0005022e800a132492700074927f8064927f0064927e8063308248267f8005020ea00a7e37b67d0003308208267f8005020ec0096e39568d8184828080720492840074928380749283007492828078268d80097882098882014090000000018000000d498029568c01f97882098882095690020979920d4890a8268d000978820988820826b70d48b0b9777209877209568e01f978820d4780c3308ff3309ff7b62d00064270a01015107062897110a0b01330c20aec7080a0b647c019569b810826af8008262b00082678800826880004926b8007b6cc000959b00027bbc687bba8800492970027bb89000492978027bb798004929800295674013956820137b92a0025020ee00c022826ab8008ea78268c0005022f0008b30520906281020956700138268f8005020f200a2de9568b810958900028297607b67b0008297587b6788008297507b67b8008297487b67c0009567d81849278007492778074927700749276807019567e012956840205020f40087e09568b810958900028297387b67688297307b67608297287b6780009567c0123308405020f60033de9562b81095280002828a20828b18828c10828708d4ac09d4b708d49808988820d4b909979920d4980852080df74922f8014922f0014922e8017b6a58140a000000003182a0709568a0127b2a00027b67f8007b6b507b6c485020f8000fdf8267783300fa000a01826bf800826758826850d487071408fcffffff00000000d88b08826948949894785108aef68269d8005022fc001e30956cb810492ce00195cb00017bb8d8007bb9d000956880127bbac8005020fe00b5de330000010a09018267606f779778208269686f99989920d49808826980005022020130304927a0074927980749279007492788073308248267f8005020040136e17b6780003308208267f8005020060125e19568d8184828a807204928e0074928d8074928d0074928c807956860209788209888209569a020979920d4890a82688000978820988820826b70d48b0b97772098772095688020978820d4780c3308ff3309ff8267d0000a0101510706281a110a0b01330820ae87080a0b647801492680007b68d000956ab81095ab00017bb8688267f8007bb78800492a70018267487bb79000492a78018267507bb79800492a800195674012956820128269587bb9a000502008016b20826a80008ea78268d00050220a01362e52090628c31d956700128268f80050200c014ddc9568b810958900018297607b6780008297587b67708297507b67d0008297487b67f800956a000182a7387b9782a7307b87f80082a7287b87f00082a7207b87e80049282001492818018267a0007b9710648b9567e0119568c0119569a011826aa8007bba080150200e010021956ab81095ab000182b73082b82882b93882ba40826cb800d37c0bd8c707826cc000d8c808dbb708826bb000d3ab07d8ba0a826c8800d8c90bdb7a0bd3c909d49707db7b08520806285f10956c000182c7209568b8107b8788004928c0004928b8008267a8007b87a80082c7287b8790008267a0007b87b00082c7307b879800648b95678011956860119569401182ca387bbaa000502010016520956bb81082b7c80082b8d00082b9d80082bae0007bba407bb9387bb8307bb7288267b0007bb760826788007bb7588267b8007bb75095672011956800119569e010826ac0007bba485020120117209568b810828780007b67688287787b67608287707b67588287687b675028b20f9568d8184928600649285806492850064928480601956700169568201f50201401e1dc330216019568b81001958900058297587b6780008297507b67788297487b6788009567e0153308405020180187da9562b81095280005828728828a40828930828b38957c207b67d800d87c07c879087b69c000d89809da7709c8b9097b6bb000d8b9077b6ab800c8a707d49c0ad48707d47a0a98aa20d49707977720d4a707520739f3492218054922100549220805140700000000bb9c05a99568c0157b2720057b6c7064c750201a0143db8268d800958724d88708826ac000c88a09d8a90ada880a8268b000c88a0ad88a08826bb800c8b808826bd000956cb8107bcbc004826bf8007bcbb804826b18017bcba004826b10017bcb9804826b08017bcb9004826b00017bcb8804826be8007bcbb0047bc9d0047bc7c8047bcad8047bc8e0049567a0159568801595696015956a4015826bf0007bcba80450201c01be288267d8008269b000d497078268c000826ab800d4a808d48707987720d49808978820d48707520755f29567b810957900048298e8007b68d000829cf00082740005829bf8008267d800d8780364708262c000d32c08d82c09da83098267b000c97b0ad89a08d87b0b8267b800c97407c9b707c987047b6460c99a0a7b6af800c92c07c9370b7b6b688267d000c907087b68d0009587e0d88708c88b099599ffd3b90ad8b90bdaa80b826af80088a801c9840895aaffc8ab0bd8ab0ac88a0a956cb8107bc768047bc970047bcb7804956820157bca8004640750201e01d3d99567b810826860957900047b98408268f8007b98388268687b98308268d0007b98288268b8007b98608268b0007b98588268c0007b9850647a956700159568e0148269d8007ba9480450202001441c9567c0148268d800502022013cd89568b810958900048297207b67d8008297187b67d0008297107b67c0008297087b67f8000a090164728267786f77977820826980006f99989920d49808826988006f99979a20330bb00003987720d4a7079899203e07b800033e08b000033d09c000039569d8184929800649297806492970068267d800826cc000d47c0c8268f800648a8267d000d47808d4c808988820d4c707977720d4870749296806510706289ef064a883a77b67d0008267707b62c0007b6bd800502024017bdb6478956ad818482a88068267d0008e77826bc0008eb9fc08d497079a7995ab00067bb9c0007bb9b8007bb9b0007bb9a8008269d800979920989920977723d497079569401f979920989920956a801f97aa20d49a0a9788203309b00002988820826bf80097bb20d48b0b9799209899209568601f978820d4980c3308ff3309ff0a017b67f8009567a0145020260154278267f8005107d2f59567801433084050202801dad69569b810959c000382cae00082cbd80082c7d00082c8c8007b673001d4a7077b683801d4b808d47808988820d4b707977720d4870751070628a5ef4929b8034929b0034929a803140700000000a079c308956860147b97c003826738017b6a28017b6b200150202a01a9d750222c0168285207062869ef826738018377049569b8104929a003492998034929880320956840144929900350202e0177d7956900018297209577dc502230011a28520706282def826738018377249569b810492980034929780349296803169568201449297003502032013bd71407bcffffff000000009569000150223401da2752070628edee826738018377443a081800023a092000023a0a280002956bb81095bc00037bc8607bc9587bca5095680014492b48033300b80028e8d69567ff079577410133084050203601a0d59567ff079577b9008278a0007b683001827898007b682801827890007b682001827788007b673801330038010a0b33023a01289d2750223a019a275108062865ee6479987720510706285aee50223c01892850203e0144d99568d818826928017a89c8038377956800208388a0fc33090a0a9567d8188177c80328ffef7b69a007826780007b67c0077b6aa807826798007b67c8077b6bb0078267a0007b67d0077b6cb8079567e0079568c0077b6910019569a0077b6a0801826ac8007b6ad8077b6b607b6c5850204001eb1a826ae0078267e8078268f0078269f8074926580749265007826b28017b6b4807826bf8007b6b40077b6978077b6870077b6768079567800795686007956940077b6a6007502042018f1c826780077b673001826788077b673801826790077b672801826798077b6720018267587b67f8068267607b67f006826708017b67e806826710017b67e0068267d0007b6718078267787b6710078267707b67080795672007956800079569e006826a687b6a000750204401341a956b000782ba2082b72882b83082b9384926980649269006826b18017b6b8806826b00017b6b80067b69b8067b68b0067b67a8069567c0069568a006956980067b6aa00650204601d81b956800068289d8008260c8068287c0007b671801828ad000826b2001d39b0482683801d3080c7b6c1001d8080382623001d8720c82671001db730cd89b0882632801d8a307db480764b8d3a30bd44b0bdbb70c6427dac908daca0382693801dac009826a1801daca07282b016429880be803944b826c1801d49c0c94cb510b06283d146498950718fc956c00017bc730d80707c8740a95abffd34b0a7bcb38d84b09daa7099587ffc879097bc928d879077bc72088870182c818c978087bc818492618064926100649260806956800064926000633075020480130d44926f8054926f0054926e005043307209568e0054926e80550204a0112d43908a4000256183f0b2003a4000240018267200182681801c887077b6720019517e08479e07b69180164913307b000028377839933084033004c010a08826a180133024e01280126826a180150224e01fa2583bbd8f8c86b0b95bc00047bca207bc9187bc8107bc708492b4004492b3804492b3004491c28e8039567e01c9568001d50205001f3d4956a000182a82082a73082a93882632801017b6730017b632801d437077b6938017b682001d49808d487078e774926d8054926d0057b67c0059567c0054926c80550205201cc1f8267d8009777209877204926b8057b67b0058267e0007b67a8059568a0058267e8007b67a00533075020540115d349269805492690054926800504330720956880054926880550205601f7d29517e08477e07b67180164713908a4000256183f0b2003a4000240019517e08479e07b69100164913307b00002837783993308400a08826a100182a71882a81082a90882aa6f776f8b6f996faa826818017b8a187b89107b8b087b87956760055020580183d3826a6005826768058268700582697805826b20017b6b1805826b28017b6b1005826b38017b6b0805826b30017b6b00057b6938057b6830057b6728059567400595682005956900057b6a200550205a01e01d956b000582b75882b85082b94882ba40956bd81895bc00047bc7607bc8587bc9507bca489568201d8267180150205c0176d39567d81849278004492778044927700449276804039567e0049568401d50205e01dcd2826ae0048267e8048268f0048269f804956c000182cb207b6b980482cb287b6b900482cb387b6b880482cb307b6b80047b69b8047b68b0047b67a8049567c0049568a004956980047b6aa00450206001391d8267c0048268c8048269d004826ad804956bd818492ba004492b9804492b9004492b88040395bc00047bcac0007bc9b8007bc8b0007bc7a8009567601d9568801d50206201bad29567d8184927e0044927d8044927d0044927c80402956760049568a01d5020640120d282678800987910826c900097c830d489028268a8008488ff80697c04826ab000826bb800d2ba0a977b30d4ba0a97992097cb1098bb20d4b9099567d8184927e804027b721805957b00057bba107bb8087bb920492700054927f8044927f0049567c01d9568e01d502066012ad295674004330840502068017acf95670004827b58827c50827a48827940d4ba07d4c908d47808988820d4c707977720d487075107062855e8826780007b672004826798007b6728048267a0007b673004956820048267c8007b67380464977b6918017b6a10017b6b08017b6c000150206a014dd0956b000182b91882b70882b8d487071408e0ffffff00000000d8890882ba1094a8947852080628f0e7839720826868956a00047ba88268707ba8088268787ba810956800048269d0007ba91850206c01fbcf8267c00033006e010a058269f0003302700128d5228269f00050227001ce22d4780298aa206f99979820d4a8089899204926d8033a0a6800023a0b7000023a0c7800023a078000027b6af8037b6bf0037b6ce8037b67e0037b69d0037b68c8033308409569e003956ac0037b62c0038267180133007201951160ff7b1098007b1590007b1688009515a0008411e082ab7b1b3882ab087b1b3082ab107b1b2882aa187b1a20829a7b1a18829a087b1a10829a107b1a088299187b19648633000828f7d19567a00333084050207401f1cd956b000382b7b80082b8b00082b9a80082baa000d49707d48a09d47909989920d48707977720d4970751070628c8e695690001829730956b00037bb780008297387bb788008297287bb79000956880038297207bb7980064a77b6a38013300d60128c4ce956760133308405020760180cd9567b81095790002502278014e2133007a010a0b33027c0128971f50227c01941f510806285fe664799877205107062854e650227e018320502080013ed19568d818826928017a89480783779568002083882033090a0a9567d8188177480728fae79567a0163308405020820111cd9569b810829b000695970005827cf800827af0008278e800d4ba077b683801d4c808d47808988820d4c707977720d4870751070628e0e54929d8054929d0054929c805140700000000a079c308956880167b97e005826738017b6a30017b6b28017b6c200150208401e0cd956c000182c93082c72882c820d47808140a00000000010000001407fcffffff0000000082cb38d87b07949794875207062878e5826738018377047b6a2001956ab810492ac005492ab8057b682801492aa8052095686016492ab005502086017ecd956900018297209577dc50228801211e5207062834e5826738018377249569b8104929a005492998054929880516956840164929900550208a0142cd1407bcffffff000000009569000150228c01e11d52070628f4e4826738018377443a081800023a09200002956ab81095ab00057bb880007bb97814080000304e454b4f547bb87095682016492a68053300b80028e9cc9567601233084050208e01a5cb9567b8109579000150229001731f330092010a0b3302940128bc1d50229401b91d5108062884e464789877205107062879e47b68280183877b67300182673801502096015bcf9568d818826928017a89e8078377956800208388c00033090a0a9567d8188177e8072816e64916504916584916604916689568b81001956aff0795aab900956c000182c77ba7c80749084918f8826798007b87e882c7087ba7d007826790007b87f082c7107ba7d8079567c0109568a0109569801082cb187babe00750209801fc0f9569b810829720829808829318829a10826c8000d37c0bd8c707826970d8930cdbb70c8267d000d3a702d87a0a8267f800d87808db2a08d33907d4b707db7c085108cf009568ff079588b900956c000182c7958900077b97684928a00749289807826798007b97880082c7087b9770826790007b97900082c7107b9778648b95676010956840109569201082ca187bba800750209a01640f956bff0795bbb90095bc000782c7a80082c8b00082c9b80082cac0007bca207bc9187bc8107bc708826780007bc7408267707bc7388267d0007bc730956700109568ff079588e1079569ff079599c107826af8007bca2850209c01070f9567ff079577b900957c000782ca6082cb5882c85082c94828093309330b330a018267587b6838d487078268507b6930d498088269607b6b40d4b909d498088269687b6a48d4a909d49707d48707510786033309e8038260c000d69003826cb800ca9c07c873037b6328d87307d69c08c88707826b8800ca9b04c874047b6420d8740ad69b028267b000ca9708c82808d4b00bd47c0cd4cb0bc8a8077b678800510b1f82678800947ad828078268b000d698088e88d48707d4a70752079a0a8260f800d69002826bd00096b7e803c87202d87207d69b08c88707826870968ce803c8c703d8730ad69804826c800096c7e803c84707d48008d4bc0cd4c80bc8a700510b1b940ad8470782688000d698088e88d48707d4a7075207b20a8267c0009677e8038268f8009688e8039569ff079599b900959a00057ba888007ba7a8007b9290058267287ba7b0007b9398058267207ba7b8007b90a005649b9567ff07957781069568ff07958861069569ff0795994106826a88007bbac00550209e017e0e9568ff079588b900958900058297e0007b6788008297d8007b67b0008297d0007b6780008297c8007b67704928400549283805826790007b9730826798007b972849286005492858058267a0007b9750648b9567ff07957721069568ff07958801069569ff079599e105826aa8007bba48055020a001060e9567ff079577b90082728005827b78058270680582787005330a40420fd6a009caa807c87909d87907d6a80cc8c707caab04c87404d8740ccaa207d6ab03c83707d42808d4b00bd4b808c8c70b51081794bcd83707d6a2088e88d48707d4c7075207e509960740420f826870d87807826a8000d39a08d89a09da8709826cb000d84c07826a8800d3ba08d8ba0ada870ad34c07d48707da790a510a8e029567ff07957761043308405020a20140c79567ff079577b900957c000382cac00082cbb80082c9b00082c8a8005022a4016b1a510706281ee09569ff079599b900492998034929900349298803140700000000a079c3089568ff07958841047b97a003826738015020a6011ec85022a801dd1852070628dedf826738018377049569ff079599b900492980034929780349296803209568ff0795882104492970035020aa01e4c7956900018297209577dc5022ac018718520706289adf826738018377249569ff079599b9004929600349295803492950039568ff079588010449294803015020ae01a0c71407bcffffff00000000956900015022b0013f185207062852df826738018377449569ff079599b90049293803492930031408000000000000004b7b9840039568ff079588e103492928033300b800284bc79567ff079577a1073308405020b20103c69567ff079577b900827a0007957c000682cbf80082c9f00082c8e8005022b4012e1951070628e1de9569ff079599b9004929d8064929d0064929c806140700000000a079c3089568ff07958881077b97e006826738015020b601e1c65022b801a01752070628a1de826738018377049569ff079599b9004929c0064929b8064929a806209568ff07958861074929b0065020ba01a7c6956900018297209577dc5022bc014a17520706285dde826738018377249569ff079599b9004929a0064929980649298806199568ff0795884107492990065020be0163c61407bcffffff00000000956900015022c00102175207062815de826738018377443a080000023a093000023a0a380002956bff0795bbb90095bc00067bc880007bc9787bca70140900000000000000549568ff07958821077bc9683300b80028fec59567f82049074917f84917f04917e8029567ff07957781059568e0205020c201d1c68267f800987910826cd00097c830d489028269c0008498ff9569ff079599b9008099e404826ac800826bb800d2ba0a977b30d4ba0a97992097cb1098bb20d4b9099567f820491708027b72387b7a307b78287b794049172049171849171095670021956820215020c401dcc69567ff07957761053308405020c60128c49568ff079588b900958b000482b9c00082bab80082b7b00082b8a8007b67d0007b69c800d497077b68f800d4a808d478089888207b6ac000d4a707977720d4870751070628e7dc9567ff079577b900826850957a00047ba888008268587ba890008268607ba898009568ff07958841058269687ba9a0008267f8005020c801e1c48267c8008269c000d47909140700000000010000007b67c0001407e0ffffff000000008268f800d878078268d00094877b69c80094975207062871dc8267f8008377209569ff079599b900826830959b00047bb8688268387bb8708268407bb8789568ff0795882105826a487bba80005020ca016bc48267c0009577c08268f800d878078268d00094878268c80094875207062817dc8267f8008377409569ff079599b900956b000182b820959c00047bc84882b8287bc85082b8307bc8589568ff079588010582ba387bca605020cc010ec41407a0ffffff000000008268f800d878078268d00094878268c800948752070628b7db8267f800837760956aff0795aab900956b000182b895ac00047bc82882b8087bc83082b8107bc8389568ff079588e10482b9187bc9405020ce01afc38267783300d0010a058269d8003302d201288a168269d8005022d2018316d4780298aa206f99979820d4a808989920826ae0009567ff079577b9007b7ad8033a0a4000024927e003826be8007b7bd003826bf0007b7bc8037b7a20043a0a4800023a0b5000023a0c580002492700047b7a18047b7b10047b7c08047b79f8037b78f003330880009569ff079599c104956aff0795aaa104956bff0795bb81047b72e8038267f8003300d401951120ff7b10d8007b15d0007b16c8009515e0008411e082bc7b1c4082bc087b1c4882bc107b1c5082bb187b1b5833020a82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b19107b183833000c285fc53308b000028388330733090a0c3308b0000228da003308b00002838833070128dd003308b00002838833070128d0003308b00002838833070128c3003308b00002838833070128b6003308b00002838833070128a9003308b000028388330701289c003308b000028388330701288f003308b0000283883307012882003308b00002838833070128759569d8185247acf1020953492900024929f8014929f0014929e801956700208377c0fa0a0f01956ad81895ab000182b7f80082a8000282b9f00082bae800d49808d4a707d4870751079c003308b000028388330701281e3308b0000283883307012812838833070133090a0c3308b0000228f233090a0c3308b0000228e73308b0000228e03308b0000228d93308b0000228d23308b0000228cb956b000182b828978820988920492a600182b83095ac00017bc84882b8387bc8509568201a7bc9587b6738015020d6014bc1330820826738015020d80100c4837833092033070a0c01826738018177561703353308b000022871ff3308b0000283883307010a0c956780013300da01284e0383883307010a0c956780013300da01283c03956780015020da0135038267a0017b6738018267a8017b67300182678801826880011409ffffffffffff00007b692801d29707492678017b6768017b6860013307800095686001492670015020dc01a8c095690001829730829828d28707492658017b97488297387b97403307a00095684001492650015020de017cc03908a400025628bf000d2003a40002c000013307b000028378800033094033070a0c2826ff3308b000022847ff4926b0024926a8024926a002140700000000717b484e9568a0027b67b80233075020e00129c04926980249269002492680021133070495688002492688025020e2010bc03908a4000256183f112003a40002403308b0000228083308b000020183883307013309240a0c3308b0000228d5fe3308b0000228cdfe3308b0000228c5fe9567ff079577b9004927580649275006492748065022e4010612958801077b97600633075020e601a3bf9568ff079588b9004928400649283806492828061164893307049568ff079588e106492930065020e80177bf3908a4000256183f122003a40002403308b000022874ff3308b00002286cff9567ff079577b9004927180649271006492708065022ea0191119588c1067b97200633075020ec012ebf9568ff079588b900492800064928f8054928e8051164893307049568ff079588a1064929f0055020ee0102bf3908a4000256183f122003a40002403308b0000228fffe3308b0000228f7fe9567ff079577b9004927180549271005492708055022f0011c119588c1057b97200533075020f201b9be9568ff079588b900492800054928f8044928e8041164893307049568ff079588a1054929f0045020f4018dbe3908a4000256183f122003a40002403308b00002288afe3308b000022882fe9511c07b10387b15307b16289515408411f0828910828a18828b088288d4ba0ad4980bd4ab0b98bb20d4a909979920d4b90952091e647664175020f601f5bc5022f8010810510a0c5022fa01a1103200003308b00002838833070133093300fc010a0c019511c07b10387b15307b16289515408411e0647683173308043300fe010a033302000228c00f50220002bd0f510a0b50220202561032003308b0000283883307013309330004020a0c019511a07b10587b15507b16489515608411e064764911384911304911284911200264179518205020060286be8212821818821908821a10140bffffffffffff0000d2b90c97a710989930d4970798aa30978810d4a808d2b80833094916304916384916104916187b627b6c087b67207b68285022080229103200951170ff7b1088007b1580007b1678951590008411f064728289827408828c088273959a1fd89a00c80c0984aae07b1308c8a303d8a30bc8490ac8ba0ad39a06d89a07da6b07822b18d8c90c828610822210828818da000cc86c0cd86c06c82c09c89707d8c90cd89709c8b808c86808c8c808c8980c8ec88e79dbc809d4c7088ea6db8906520657821808d88308d34a09d84a06da9806d82708d3bc09d8bc0bda980bd32708d49808da860b520b307b13507b1a587b17603307409518507b1c6850200a027fbc955170ff821088008215800082167895119000320050220c02280f50200e025ebc491128491120491110413307049518104911185020100245bc3908a4000256183f0b2003a4000240013308b000028388330701330924330012020a0c019511807b10787b15707b1668951580008411f0829b828a829608828308829410828c10829918828818d363027b1608d863067b1b187b1a10d8ba0a7b1ada2a06d3980ad89800d84c02daa200d34c0bd4ba0adaa600520046c94c0ac99808c92808d86a09c99808c96a0a821908c99309821bc9b909821b18821c10c9bc0b7b7b7b79087b7a107b7818955180821078821570821668951180003200491150491148491140140700000000717b484e9518407b175833075020140265bb49113849113049112011330704951820491128502016024cbb3908a4000256183f0b2003a4000240013308b000028388330701330924330018020a0c01951140ff7b10b8007b15b0007b16a8009515c0008411f082908282828a087b1758829b08d60207ca0a06c86707d86706d60a0cc86c0ccab206c867077b1750d86707d6b206c86707c8c707d8c70cd6ba06c86c0ccaba06c867077b1748d86706c86c0c7b1c40829310829918828418828710ca3a0c7b1920ca2906c8c6087b1b28ca7b06ca0409c86909ca2306ca070cc8c6067b1330d6230b7b1b10c88b0bd60703c89308d8c6097b18187b1b08c8b80cc8c9097b1438d44a0cd47208d4c808821b40821c48c8c606d8c604c8b909c8490951088f00d3b9087b1948821948d8b909db89047b1640821810821908d889068ea98218208e8cd2c909d6280c8eccd4c909643b821330d63a0a8eaad4a909d469097b1910821918d8b909821b288eba8216388e6cd2ca0ad6060c8eccd4ca0ad67b0c8eccd4ca0ad4a909d4830ad4670c8216408eaa8eccd2ca0ad4a909821810d49808821948d4480784770152072dca02078218587b878217507b87087b86107b8918955140ff8210b8008215b0008216a8009511c0003200492190004921880049218000140700000000717b484e951880007b179800330750201a0277b94911784911704911601133070495186049116850201c025eb93908a4000256183f0b2003a4000240013308b00002838833070133092433001e020a0c019511f0fe7b1008017b1500017b16f800951510018411f0829310829c188296088299d4c60bd4390ad4ba0a7b177b1aa800510a3c0482871882801082820882847b1460683895884068cbdac80b7b1930689895894068687b1638da6908958980007b1c407b1348d4c30adaa90bd8890994a96808958840687cda780c6848958840682ada280a95a88000d47006da680cd8a8089468d38903d88906d8cb0ada3a06c989098864019544ffc9a90a9a63c9cb088e398e4bda490b7b18a000888900018599018eacdbac09db6b09821660d4060bd4720cd4cb0b8218a800888c0188bb01d4cb0bd4b9097b176864789498640b949b7b1258642c949c949652094d038217a0008579ff00d43902d44a09d492098217510939038219a0009598017b18a8007b1050888701c8a7077b178000d48707887701c837077b1770d83707c847077b1778330220029a96ff009a698000017b162882176082185850202202ed0a7b1798007b189000821750821868646950202402fd0a7b17880082179000d487077b1790008218a0009a897f821760821658646850202602d90a821928889a80007b1aa000821b9000dbab08821b68da9b087b18900082189800821b8800d4b808daa708821750da97087b1898008217606468502028029a0a821c70821978821a8000d49a0a8219a800d4c909d4a909821aa00093a87b18880093a77b17a000510902028216a80095698082175082186850202a02360a7b17287b1818821760821858646950202c02220a7b17107b18209a69800082175082186850202e02320a821920d49808886980007b1920821a18da9a08821a58db680a7b1a58821810d48707821828da9807821860db67087b1860821750821868646950203002cd098212583304821920939893977b1768821a3088a701821938c979077b1720d49a07887701821948c9790b7b1b18d87907821940c979097b191095aaff7b1a0882106001491128980b3f972a016426d4ba02970b018210900098093fd4b9097b1960821720d32703d8270b821708644cd89704db3b0497880182176898793fd498087b185898693f977701d497039707018218980098893fd4970797890182188800988b3fd4b909978b018216a00098603fd40b0b976601d46c0c7b1ca00086bb7b1b880086987b18980086777b179000821918c93907d84707d83909821b10821a58c9ab0bc99b0bc97b0b99bb3f821730d27b087b1850821c38d2bc0cd3c207d8c206821460d88400da7006821948d2b909c99308c968077b1768d86807d89309821640d2b606c96a08c99808c97808c9c20ac90a02821750c97400821ca80082168000d46c07887701821a70d87a09c97a0788ca01c9a606821a78c99a0a95ccff7b1680007b1a78d4a6097b1ca800d47c0ad4a90984b4017b17705209c7fe2808330449112801821a980098a73f82189000978801d48707821c880098c83f97aa01d4a8088219a000989a3f97cc01979601d46406821928d49a0ad4ac0cd4890bd47908821728058217017b767b7c087b7b107b78189551f0fe82100801821500018216f8009511100132004921e0004921d8004921d000140700000000717b484e9518d0007b17e800330750203202a7b44921c8004921c0004921b000123307049518b0004921b8005020340289b43908a4000256183f0b2003a4000240013308b000028388330701330924330036020a0c019511907b10687b15607b16589515708411f0828a187b1a08829b1882847b14828a08829608829c828310829210c8a609c8c404d8c40cc8c909d36900d86906da0c06c83208821c08c8bc0cd8280bc8cb0bc8680cd88c08c88b00d3a90bd8a90a8218d88406dbba06d83c02821808d3800bd8800adab20ad33c08d4b808db8a0652061f7b747b79087b7c107b7018955190821068821560821658951170320050223802840650203a02bab34911284911204911101133070495181049111850203c02a1b33908a4000256183f0b2003a4000240013308b00002838833070133092433003e020a0c01951120ff7b10d8007b15d0007b16c8009515e0008411f0827810827918827a088277d4a909d48707d49707510719955120ff8210d8008215d0008216c8009511e00032009517a00033084050204002f2b18219b8008216b0008217a8008218a0007b17107b1908d497077b1818d46808d47808988820d46707977720d487075207c000492190004921880049218000140700000000a079c308951880007b17980082171850204202d3b2821908d46909140600000000010000001407fcffffff00000000821818d8780782181094877b1908949751076b82171883770449117849117049116020951860491168502044028ab29567dc821818d8780782181094878218089487510739821618836724491158491150491140169518404911485020460258b21407bcffffff00000000d8760782181094878218089487520704008216188367443a088800023a099000023a0a9800027b18387b19307b1a289518204911205020480213b2330864646750204a02cab4837833070133096433004c020a0c01951150ff7b10a8007b15a0007b1698009515b0008411f0828c10828b1882860882827b1b407b1638d4b608d4c20bd48b0b98bb207b1c48d4c808978820d4b8087b17305208da00642682a7187b172882a7107b172082a7087b171882a77b17108297108298088299977720987720492188007b19707b18789518707b178000642750204e0272b1821948821a40d4a9071408e0ffffff00000000d88608821b3894b894785108799567407b1708d86707c87b087b18d8b808da7708c898087b1838d89807c8a7077b17488367208218107b18508218187b18588218207b18609518508219287b1968502050020bb18217308218387b781082187b78088218087b788218487b7818955150ff8210a8008215a000821698009511b000320000951120ff7b10d8007b15d0007b16c8009515e0008411e064760a0b01510718017b16180a0b64769517a000330840502052026daf8219b800821cb0007b1c388212a8007b12308213a0007b132895671f7b1620d8670864968477e0957920d87907c8780ad88a0bda770b4911787b19607b1698007b1c90007b1288007b1380007b1a68951780009518607b1b705020540208f3821728821930d46909821a38d4a708d49808988820d4a909979920d49808520882004911584911504911489518408219207b1940502056020eb00a0b01821a287b1620821838d468081409e0ffffff00000000d89a09821b3094b99489510943647698772052073b83a72083687b181064685020580292b27a16c00083778318c00033090a0a01821b288117c000821618821820821938821a30821c10aec70e00330a33093308330b60017b6b7b6a087b69107b6818955120ff8210d8008215d0008216c8009511e0003200330750205a026bb233070150205c0262b2888820858801dba7088ea78ea9daa709d4aa07da78093202829838d87807829830948782982894873202956a000182a72882a920d47909140700000000010000007ba7201407fcffffff0000000082a838d8780782a83094877ba92894973202956b000182b83082b920d4980882ba2882b938d4a909d48909989920d4a808978820d49808320281971082996f88978a206f77987720d47a0a9888206f97977920d4980898792083b704320282970881981082996f77977a206f88988820d48a0a9877206f98978920d4790998882083b7043202956c000182c83882c72882ca20d47a0a140b00000000010000001407fcffffff00000000d8780782c930949794a732026f99979a20987720d4a707989920826ad8007ba7087ba87aa9109567d81832026f99979a20987720d4a707989920826af0007ba7087ba87aa9109567d818320282171082181814090000000001000000d37909d48909987a2088aa01948a939a320283977b6730018267380164987b6928013202956c00017bc9307bca28d4a9077bc838d4b808d478089888207bcb20d4b707977720d48707320282a71882a81082a90882aa6f776f886f996faa330b002032026479140700000000717b484e9568ff07320282a810d487071408fcffffff00000000d88b0882a9089498947832028219821a087b697b6a087b67107b68189551c082103882153082162895114032028298c0007b6830018298b8007b6828018298b0007b6820018297a8007b6738013202491140491138491130140700000000717b484e9518307b1748330732029551a0821058821550821648951160320282970881981082996f7a97a7206f8898882032023307d818c8760a95ab00023202849a40520a195109148d9a40cfa80ad09808d09707d4a707320032009597c0d0780733083200849a40520a195109148d9a40d0a70acf9707cf9808d4a808320032009598c0cf870833073200214225a952484992244992244992244992244992244992244992244992244992244992244992542529a524292949a84a494a922449922449922449922449922449922449922449929224294955494a922849254955924249929294a4aa2a494952924a922aa5942429a594249514111125944a4a4a8a142952a448912245498a888892244108094369521a122122492422221a11912442924422a2488428540d1141448448242282880891482422222244221111894444448888442224492222124949444842922449920ca550aa50950a55aa3422222245449088102244224a2302090824209088888846244992248a44a488442291884811114992149146440049245149442212912449920410111111490410112222228a44241249224a12499292948888081111111122222222924892882489880811212249128944224912911011912449922411114044444484902422224444448824492a12111122224402484a911011114044442422222225214992245124222222422412452444444492248948128944444422222252122222922451242244442291880811914824121111111121221249928884888888489224111101444444440851e448424402881011111111218d1225112222122112214244442401249248228924912451a3498d888888882412898888085184242242442412894444448888101189244944424414114992242222028888880891231122424444444448a344498488884488441021222292482289249124d1a4498d888888244912111111441124014444041189442211918888888888281211111111111144241289444422222211452422111111894422228888884424221111211241444444449224119188484444444444101191549224499224892449928848a3444a22a948922411111111111111111111444444444444444444440491942449922422222212111111458224499244918888101144241289448248922449129148924452440289248968244992248a441091442491828808252208114ca250892212412492440411914824120922222249924424128948944844444434222292245124222244041111894422414424499224c94810912449922449009188882048a224221141244952914822124402484a911042141101440489a0a411092222222222228a0451220822a2888a18d11211419122124992242241444424491289244992888800225224884492249144222222222222222222222222224844224992888824499248124992248924499294244922222222884492248988244544041141442291245a9428891292841022222289224992888a440445441129922492249248121249124952441049a4244944444444103112894424888824499224222280888888204489232201242a22012488888888201a254a2288884804910822444444124022892492248924899a34a9111111118988888888208a2089082212894422222244041149928804114992244922221240442441e248124052114144444404d194944410119108221144888888249248922492249a34a91111898844242222114411241141442249242225128988481111114424492491441249922412111191884814118920222292241289444424884892248988081141c4482489481091248924924422499224222280881444124922894444444444444444444444444410918824492222222222459248124992481289244912499244444414442291241289448a88082282884422916829511225240921444444248a244922a9484450441491222222922492481212491249524410110922222222912449121101444444102491880811412441128988101104104112092144248988442488888888888822415292208888222a221111111111111111910411111111111111111144444444241211111189444424824892888888888888082222222291482492484a521289a4285252449224499224492222a22022242208118c482451a844118920124912112122882431221149111111441211111105112111411285082651a81449aa8a244510111111111111111111412449449244041111212288888844229188888888202222222244444444101111228248249188489224112292444444100922499224491211111111454404919400924a92284922124414910892924408214444442422222222222549929224a9241244444492244922118944248a48248808a2489094240822a248452412444444249224492222808888882092248000924a221111112282488224121121220820822412424424804444224144104582a42451441011455444922446445122894822221241244924492289244944449188882422292212414444442449248944444424888824a99a2449922449222291244924492249924894484944229224912422499212298988888888884424a28888888820222222222211914844a48888888820222222244992244992a4a42442124922912449442488888888208988880022228220894444848808220992484444448420800892484444001111918804111111112411111140444410249188881011412441128988081111041041120921444424014424122511114124924844442449928824491211442488888888884492489244242291884844109100228048142591884492242211442251944422229124894882002251944422a24892442441a288449094242222444444841022222222222222222222222549929424494a4992245485849250124a4249280925a124948452042222221a111191244229944a852a140a8542912412492211248252a30809a58894221241444444009188888820924492880842080c914a4844041051101112118408426149212121111111441444448412114188202424222282888288885022220811848444444410511011114a440421829090244992942449524190a0a1144d92a41245820485523449929244094a1240922449495292a08848a49292244992244992244992a49292244992244992244144240a822492042182a1249a24914a922449929224499224495292942449a22401240549240942044349342222524992244992244992244992244992244992244992244992489224492929252549524a4a4a92549224495292444444111140444112498210c150128d888824294911494a2929259124a994522249499224a51291922489244955aa88485244224924499288982488480a221291a4201191242292245290442289a28848122449411249904492244992242948a9244992244992649292489224254992248924912492248aa248922449922449922449922449928824499224924892a88c44124922499224d59244444411114044414448441022184aa2499224a9a42449922449922425499224294992a4204822491022184aa211119124254944441409222292244992888800221224010490a4942489244892529224922080a4944908214912a4a0241a11114952922449922849929294449228481240524992922449922449122429298988884644446aa422414422912425499244442492204992248924498226490049a524a5208a9a48926495258988880a1224a92425291549024800494a45922449925229494952522949495224490001245549122951491229511240925445144592244992925415154094049054a5244992222222224a1240524992924a29122549925452499224951400"
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "balanceOf(address)": "70a08231",
              "getReserves()": "0902f1ac",
              "mint(address)": "6a627842",
              "swap(uint256,uint256,address)": "6d9a640a",
              "token0()": "0dfe1681",
              "token1()": "d21220a7",
              "totalSupply()": "18160ddd"
            }
          },
          "irOptimized": "/// @use-src 1:\"contracts/UniswapV2Pair.sol\"\nobject \"UniswapV2Pair_718\" {\n    code {\n        {\n            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"UniswapV2Pair_718\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n            let value0 := abi_decode_address_fromMemory(_1)\n            let value1 := abi_decode_address_fromMemory(add(_1, 32))\n            sstore(/** @src -1:-1:-1 */ 0, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ or(and(sload(/** @src -1:-1:-1 */ 0), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ not(sub(shl(160, 1), 1))), and(value0, sub(shl(160, 1), 1))))\n            sstore(/** @src 1:792:808  \"token1 = _token1\" */ 0x01, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ or(and(sload(/** @src 1:792:808  \"token1 = _token1\" */ 0x01), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ not(sub(shl(160, 1), 1))), and(value1, sub(shl(160, 1), 1))))\n            let _2 := mload(64)\n            let _3 := datasize(\"UniswapV2Pair_718_deployed\")\n            codecopy(_2, dataoffset(\"UniswapV2Pair_718_deployed\"), _3)\n            return(_2, _3)\n        }\n        function abi_decode_address_fromMemory(offset) -> value\n        {\n            value := mload(offset)\n            if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        }\n    }\n    /// @use-src 1:\"contracts/UniswapV2Pair.sol\"\n    object \"UniswapV2Pair_718_deployed\" {\n        code {\n            {\n                /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x0902f1ac {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let ret, ret_1 := fun_getReserves()\n                        mstore(_1, and(ret, 0xffffffffffffffffffffffffffff))\n                        mstore(add(_1, 32), and(ret_1, 0xffffffffffffffffffffffffffff))\n                        return(_1, 64)\n                    }\n                    case 0x0dfe1681 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value := and(sload(0), sub(shl(160, 1), 1))\n                        let memPos := mload(64)\n                        mstore(memPos, value)\n                        return(memPos, 32)\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _2 := sload(/** @src 1:496:522  \"uint256 public totalSupply\" */ 3)\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, _2)\n                        return(memPos_1, 32)\n                    }\n                    case 0x6a627842 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let var_liquidity := 0\n                        /// @src 1:1018:1035  \"uint256 liquidity\"\n                        var_liquidity := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                        /// @src 1:1088:1101  \"getReserves()\"\n                        let expr_component, expr_component_1 := fun_getReserves()\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        let cleaned := and(sload(0), sub(shl(160, 1), 1))\n                        /// @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\"\n                        let _3 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ mload(64)\n                        /// @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\"\n                        mstore(_3, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\" */ add(_3, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 4), /** @src 1:1163:1167  \"this\" */ address())\n                        /// @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\"\n                        let _4 := staticcall(gas(), cleaned, _3, 36, _3, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32)\n                        /// @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\"\n                        if iszero(_4)\n                        {\n                            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                            let pos := mload(64)\n                            returndatacopy(pos, 0, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        /// @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\"\n                        let expr := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                        /// @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\"\n                        if _4\n                        {\n                            let _5 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32\n                            /// @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\"\n                            if gt(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32, /** @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\" */ returndatasize()) { _5 := returndatasize() }\n                            finalize_allocation(_3, _5)\n                            let value0_1 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                            if slt(sub(/** @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\" */ add(_3, _5), _3), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32) { revert(0, 0) }\n                            value0_1 := mload(/** @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\" */ _3)\n                            expr := value0_1\n                        }\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        let cleaned_1 := and(sload(/** @src 1:1205:1211  \"token1\" */ 0x01), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ sub(shl(160, 1), 1))\n                        /// @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\"\n                        let _6 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ mload(64)\n                        /// @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\"\n                        mstore(_6, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\" */ add(_6, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 4), /** @src 1:1163:1167  \"this\" */ address())\n                        /// @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\"\n                        let _7 := staticcall(gas(), cleaned_1, _6, /** @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\" */ 36, /** @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\" */ _6, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32)\n                        /// @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\"\n                        if iszero(_7)\n                        {\n                            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                            let pos_1 := mload(64)\n                            returndatacopy(pos_1, 0, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\"\n                        let expr_1 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                        /// @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\"\n                        if _7\n                        {\n                            let _8 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32\n                            /// @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\"\n                            if gt(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32, /** @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\" */ returndatasize()) { _8 := returndatasize() }\n                            finalize_allocation(_6, _8)\n                            let value0_2 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                            if slt(sub(/** @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\" */ add(_6, _8), _6), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32) { revert(0, 0) }\n                            value0_2 := mload(/** @src 1:1198:1237  \"IERC20(token1).balanceOf(address(this))\" */ _6)\n                            expr_1 := value0_2\n                        }\n                        /// @src 1:1265:1285  \"balance0 - _reserve0\"\n                        let _9 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ and(/** @src 1:1265:1285  \"balance0 - _reserve0\" */ expr_component, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0xffffffffffffffffffffffffffff)\n                        /// @src 1:1265:1285  \"balance0 - _reserve0\"\n                        let expr_2 := checked_sub_uint256(expr, _9)\n                        /// @src 1:1313:1333  \"balance1 - _reserve1\"\n                        let _10 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ and(/** @src 1:1313:1333  \"balance1 - _reserve1\" */ expr_component_1, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0xffffffffffffffffffffffffffff)\n                        /// @src 1:1313:1333  \"balance1 - _reserve1\"\n                        let expr_3 := checked_sub_uint256(expr_1, _10)\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        let _11 := sload(/** @src 1:1348:1359  \"totalSupply\" */ 0x03)\n                        /// @src 1:1344:2069  \"if (totalSupply == 0) {...\"\n                        switch /** @src 1:1348:1364  \"totalSupply == 0\" */ iszero(_11)\n                        case /** @src 1:1344:2069  \"if (totalSupply == 0) {...\" */ 0 {\n                            /// @src 1:1878:1913  \"(amount0 * totalSupply) / _reserve0\"\n                            let expr_4 := checked_div_uint256(/** @src 1:1879:1900  \"amount0 * totalSupply\" */ checked_mul_uint256(expr_2, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ _11), /** @src 1:1878:1913  \"(amount0 * totalSupply) / _reserve0\" */ _9)\n                            /// @src 1:1948:1983  \"(amount1 * totalSupply) / _reserve1\"\n                            let expr_5 := checked_div_uint256(/** @src 1:1949:1970  \"amount1 * totalSupply\" */ checked_mul_uint256(expr_3, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ _11), /** @src 1:1948:1983  \"(amount1 * totalSupply) / _reserve1\" */ _10)\n                            /// @src 1:2009:2058  \"liquidity0 < liquidity1 ? liquidity0 : liquidity1\"\n                            let expr_6 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                            /// @src 1:2009:2058  \"liquidity0 < liquidity1 ? liquidity0 : liquidity1\"\n                            switch /** @src 1:2009:2032  \"liquidity0 < liquidity1\" */ lt(expr_4, expr_5)\n                            case /** @src 1:2009:2058  \"liquidity0 < liquidity1 ? liquidity0 : liquidity1\" */ 0 { expr_6 := expr_5 }\n                            default { expr_6 := expr_4 }\n                            /// @src 1:1997:2058  \"liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1\"\n                            var_liquidity := expr_6\n                        }\n                        default /// @src 1:1344:2069  \"if (totalSupply == 0) {...\"\n                        {\n                            /// @src 1:1429:1448  \"uint256 z = product\"\n                            let var_z := /** @src 1:1398:1415  \"amount0 * amount1\" */ checked_mul_uint256(expr_2, expr_3)\n                            let expr_7 := /** @src 1:1429:1448  \"uint256 z = product\" */ var_z\n                            /// @src 1:1462:1725  \"if (product > 3) {...\"\n                            switch /** @src 1:1466:1477  \"product > 3\" */ gt(var_z, /** @src 1:1348:1359  \"totalSupply\" */ 0x03)\n                            case /** @src 1:1462:1725  \"if (product > 3) {...\" */ 0 {\n                                /// @src 1:1669:1725  \"if (product != 0) {...\"\n                                if /** @src 1:1673:1685  \"product != 0\" */ iszero(iszero(var_z))\n                                /// @src 1:1669:1725  \"if (product != 0) {...\"\n                                {\n                                    /// @src 1:1705:1710  \"z = 1\"\n                                    var_z := /** @src 1:1205:1211  \"token1\" */ 0x01\n                                }\n                            }\n                            default /// @src 1:1462:1725  \"if (product > 3) {...\"\n                            {\n                                /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                                let r := shr(/** @src 1:1205:1211  \"token1\" */ 0x01, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ expr_7)\n                                let sum := add(r, /** @src 1:1205:1211  \"token1\" */ 0x01)\n                                /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                                if gt(r, sum)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x11)\n                                    revert(0, /** @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\" */ 36)\n                                }\n                                /// @src 1:1497:1524  \"uint256 x = product / 2 + 1\"\n                                let var_x := sum\n                                /// @src 1:1542:1649  \"while (x < z) {...\"\n                                for { }\n                                /** @src 1:1549:1554  \"x < z\" */ lt(var_x, var_z)\n                                /// @src 1:1542:1649  \"while (x < z) {...\"\n                                { }\n                                {\n                                    /// @src 1:1578:1583  \"z = x\"\n                                    var_z := var_x\n                                    /// @src 1:1605:1630  \"x = (product / x + x) / 2\"\n                                    var_x := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ shr(/** @src 1:1205:1211  \"token1\" */ 0x01, /** @src 1:1610:1625  \"product / x + x\" */ checked_add_uint256(/** @src 1:1610:1621  \"product / x\" */ checked_div_uint256(expr_7, var_x), /** @src 1:1610:1625  \"product / x + x\" */ var_x))\n                                }\n                            }\n                            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                            let diff := add(var_z, not(999))\n                            if gt(diff, var_z)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x11)\n                                revert(0, /** @src 1:1130:1169  \"IERC20(token0).balanceOf(address(this))\" */ 36)\n                            }\n                            /// @src 1:1738:1771  \"liquidity = z - MINIMUM_LIQUIDITY\"\n                            var_liquidity := diff\n                            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                            mstore(0, 0)\n                            mstore(32, 4)\n                            /// @src 1:623:628  \"10**3\"\n                            sstore(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ keccak256(0, 64), /** @src 1:623:628  \"10**3\" */ 0x03e8)\n                        }\n                        /// @src 1:2078:2126  \"require(liquidity > 0, \\\"INSUFFICIENT_LIQUIDITY\\\")\"\n                        require_helper_stringliteral_e8d3(/** @src 1:2086:2099  \"liquidity > 0\" */ iszero(iszero(var_liquidity)))\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        mstore(0, and(value0, sub(shl(160, 1), 1)))\n                        mstore(32, 4)\n                        let dataSlot := keccak256(0, 64)\n                        /// @src 1:623:628  \"10**3\"\n                        sstore(dataSlot, /** @src 1:2136:2162  \"balanceOf[to] += liquidity\" */ checked_add_uint256(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ sload(/** @src 1:2136:2162  \"balanceOf[to] += liquidity\" */ dataSlot), var_liquidity))\n                        /// @src 1:623:628  \"10**3\"\n                        sstore(/** @src 1:1348:1359  \"totalSupply\" */ 0x03, /** @src 1:2172:2196  \"totalSupply += liquidity\" */ checked_add_uint256(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ sload(/** @src 1:1348:1359  \"totalSupply\" */ 0x03), /** @src 1:2172:2196  \"totalSupply += liquidity\" */ var_liquidity))\n                        /// @src 1:623:628  \"10**3\"\n                        let _12 := sload(/** @src 1:2207:2235  \"reserve0 = uint112(balance0)\" */ 0x02)\n                        /// @src 1:623:628  \"10**3\"\n                        sstore(/** @src 1:2207:2235  \"reserve0 = uint112(balance0)\" */ 0x02, /** @src 1:623:628  \"10**3\" */ or(or(and(_12, shl(224, 0xffffffff)), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ and(/** @src 1:2218:2235  \"uint112(balance0)\" */ expr, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0xffffffffffffffffffffffffffff)), /** @src 1:623:628  \"10**3\" */ and(shl(112, /** @src 1:2256:2273  \"uint112(balance1)\" */ expr_1), /** @src 1:623:628  \"10**3\" */ shl(112, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0xffffffffffffffffffffffffffff))))\n                        /// @src 1:2288:2322  \"Mint(msg.sender, amount0, amount1)\"\n                        let _13 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ mload(64)\n                        mstore(_13, expr_2)\n                        mstore(/** @src 1:623:628  \"10**3\" */ add(_13, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32), expr_3)\n                        /// @src 1:2288:2322  \"Mint(msg.sender, amount0, amount1)\"\n                        log2(_13, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 64, /** @src 1:2288:2322  \"Mint(msg.sender, amount0, amount1)\" */ 0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f, /** @src 1:2293:2303  \"msg.sender\" */ caller())\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, var_liquidity)\n                        return(memPos_2, 32)\n                    }\n                    case 0x6d9a640a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value_1 := calldataload(4)\n                        let value_2 := calldataload(36)\n                        let value_3 := 0\n                        value_3 := calldataload(68)\n                        let _14 := and(value_3, sub(shl(160, 1), 1))\n                        if iszero(eq(value_3, _14)) { revert(0, 0) }\n                        /// @src 1:2582:2596  \"amount0Out > 0\"\n                        let _15 := iszero(value_1)\n                        /// @src 1:2582:2614  \"amount0Out > 0 || amount1Out > 0\"\n                        let expr_8 := /** @src 1:2582:2596  \"amount0Out > 0\" */ iszero(_15)\n                        let expr_9 := /** @src 1:2582:2614  \"amount0Out > 0 || amount1Out > 0\" */ expr_8\n                        if _15\n                        {\n                            expr_8 := /** @src 1:2600:2614  \"amount1Out > 0\" */ iszero(iszero(value_2))\n                        }\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        if iszero(expr_8)\n                        {\n                            let memPtr := mload(64)\n                            mstore(memPtr, shl(229, 4594637))\n                            mstore(add(memPtr, 4), 32)\n                            /// @src 1:623:628  \"10**3\"\n                            mstore(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ add(memPtr, 36), 26)\n                            mstore(/** @src 1:623:628  \"10**3\" */ add(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ memPtr, 68), \"INSUFFICIENT_OUTPUT_AMOUNT\")\n                            revert(memPtr, 100)\n                        }\n                        /// @src 1:2692:2705  \"getReserves()\"\n                        let expr_component_2, expr_component_3 := fun_getReserves()\n                        /// @src 1:2719:2741  \"amount0Out < _reserve0\"\n                        let _16 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ and(/** @src 1:2719:2741  \"amount0Out < _reserve0\" */ expr_component_2, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0xffffffffffffffffffffffffffff)\n                        /// @src 1:2719:2767  \"amount0Out < _reserve0 && amount1Out < _reserve1\"\n                        let expr_10 := /** @src 1:2719:2741  \"amount0Out < _reserve0\" */ lt(value_1, _16)\n                        /// @src 1:2719:2767  \"amount0Out < _reserve0 && amount1Out < _reserve1\"\n                        if expr_10\n                        {\n                            expr_10 := /** @src 1:2745:2767  \"amount1Out < _reserve1\" */ lt(value_2, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ and(/** @src 1:2745:2767  \"amount1Out < _reserve1\" */ expr_component_3, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0xffffffffffffffffffffffffffff))\n                        }\n                        /// @src 1:2711:2794  \"require(amount0Out < _reserve0 && amount1Out < _reserve1, \\\"INSUFFICIENT_LIQUIDITY\\\")\"\n                        require_helper_stringliteral_e8d3(expr_10)\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        let cleaned_2 := and(sload(0), sub(shl(160, 1), 1))\n                        /// @src 1:2809:2837  \"to != token0 && to != token1\"\n                        let expr_11 := /** @src 1:2809:2821  \"to != token0\" */ iszero(eq(_14, cleaned_2))\n                        /// @src 1:2809:2837  \"to != token0 && to != token1\"\n                        if expr_11\n                        {\n                            expr_11 := /** @src 1:2825:2837  \"to != token1\" */ iszero(eq(_14, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ and(sload(1), sub(shl(160, 1), 1))))\n                        }\n                        if iszero(expr_11)\n                        {\n                            let memPtr_1 := mload(64)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, 4), 32)\n                            /// @src 1:623:628  \"10**3\"\n                            mstore(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ add(memPtr_1, 36), 10)\n                            mstore(/** @src 1:623:628  \"10**3\" */ add(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ memPtr_1, 68), \"INVALID_TO\")\n                            revert(memPtr_1, 100)\n                        }\n                        /// @src 1:2858:3042  \"if (amount0Out > 0) {...\"\n                        if expr_9\n                        {\n                            /// @src 1:2918:2982  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out)\"\n                            let expr_mpos := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ mload(64)\n                            /// @src 1:2918:2982  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out)\"\n                            let _17 := add(expr_mpos, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32)\n                            /// @src 1:2918:2982  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out)\"\n                            mstore(_17, /** @src 1:2941:2965  \"IERC20.transfer.selector\" */ shl(224, 0xa9059cbb))\n                            /// @src 1:2918:2982  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out)\"\n                            let _18 := sub(abi_encode_address_uint256(add(expr_mpos, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 36), /** @src 1:2918:2982  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out)\" */ value_3, value_1), expr_mpos)\n                            mstore(expr_mpos, add(_18, not(31)))\n                            finalize_allocation(expr_mpos, _18)\n                            /// @src 1:2906:2983  \"token0.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out))\"\n                            let expr_component_4 := call(gas(), cleaned_2, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0, /** @src 1:2906:2983  \"token0.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out))\" */ _17, mload(expr_mpos), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0, 0)\n                            /// @src 1:2906:2983  \"token0.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out))\"\n                            pop(extract_returndata())\n                            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                            if iszero(expr_component_4)\n                            {\n                                let memPtr_2 := mload(64)\n                                mstore(memPtr_2, shl(229, 4594637))\n                                mstore(add(memPtr_2, 4), 32)\n                                /// @src 1:623:628  \"10**3\"\n                                mstore(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ add(memPtr_2, 36), 22)\n                                mstore(/** @src 1:623:628  \"10**3\" */ add(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ memPtr_2, 68), \"TRANSFER_FAILED_TOKEN0\")\n                                revert(memPtr_2, 100)\n                            }\n                        }\n                        /// @src 1:3047:3231  \"if (amount1Out > 0) {...\"\n                        if /** @src 1:3051:3065  \"amount1Out > 0\" */ iszero(iszero(value_2))\n                        /// @src 1:3047:3231  \"if (amount1Out > 0) {...\"\n                        {\n                            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                            let cleaned_3 := and(sload(1), sub(shl(160, 1), 1))\n                            /// @src 1:3107:3171  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount1Out)\"\n                            let expr_mpos_1 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ mload(64)\n                            /// @src 1:3107:3171  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount1Out)\"\n                            let _19 := add(expr_mpos_1, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32)\n                            /// @src 1:3107:3171  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount1Out)\"\n                            mstore(_19, /** @src 1:2941:2965  \"IERC20.transfer.selector\" */ shl(224, 0xa9059cbb))\n                            /// @src 1:3107:3171  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount1Out)\"\n                            let _20 := sub(abi_encode_address_uint256(add(expr_mpos_1, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 36), /** @src 1:3107:3171  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount1Out)\" */ value_3, value_2), expr_mpos_1)\n                            mstore(expr_mpos_1, add(_20, /** @src 1:2918:2982  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out)\" */ not(31)))\n                            /// @src 1:3107:3171  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount1Out)\"\n                            finalize_allocation(expr_mpos_1, _20)\n                            /// @src 1:3095:3172  \"token1.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount1Out))\"\n                            let expr_component_5 := call(gas(), cleaned_3, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0, /** @src 1:3095:3172  \"token1.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount1Out))\" */ _19, mload(expr_mpos_1), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0, 0)\n                            /// @src 1:3095:3172  \"token1.call(abi.encodeWithSelector(IERC20.transfer.selector, to, amount1Out))\"\n                            pop(extract_returndata())\n                            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                            if iszero(expr_component_5)\n                            {\n                                let memPtr_3 := mload(64)\n                                mstore(memPtr_3, shl(229, 4594637))\n                                mstore(add(memPtr_3, 4), 32)\n                                /// @src 1:623:628  \"10**3\"\n                                mstore(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ add(memPtr_3, 36), 22)\n                                mstore(/** @src 1:623:628  \"10**3\" */ add(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ memPtr_3, 68), \"TRANSFER_FAILED_TOKEN1\")\n                                revert(memPtr_3, 100)\n                            }\n                        }\n                        let cleaned_4 := and(sload(0), sub(shl(160, 1), 1))\n                        /// @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\"\n                        let _21 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ mload(64)\n                        /// @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\"\n                        mstore(_21, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\" */ add(_21, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 4), /** @src 1:3289:3293  \"this\" */ address())\n                        /// @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\"\n                        let _22 := staticcall(gas(), cleaned_4, _21, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 36, /** @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\" */ _21, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32)\n                        /// @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\"\n                        if iszero(_22)\n                        {\n                            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                            let pos_2 := mload(64)\n                            returndatacopy(pos_2, 0, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\"\n                        let expr_12 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                        /// @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\"\n                        if _22\n                        {\n                            let _23 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32\n                            /// @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\"\n                            if gt(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32, /** @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\" */ returndatasize()) { _23 := returndatasize() }\n                            finalize_allocation(_21, _23)\n                            let value0_3 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                            if slt(sub(/** @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\" */ add(_21, _23), _21), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32) { revert(0, 0) }\n                            value0_3 := mload(/** @src 1:3256:3295  \"IERC20(token0).balanceOf(address(this))\" */ _21)\n                            expr_12 := value0_3\n                        }\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        let cleaned_5 := and(sload(1), sub(shl(160, 1), 1))\n                        /// @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\"\n                        let _24 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ mload(64)\n                        /// @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\"\n                        mstore(_24, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\" */ add(_24, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 4), /** @src 1:3289:3293  \"this\" */ address())\n                        /// @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\"\n                        let _25 := staticcall(gas(), cleaned_5, _24, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 36, /** @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\" */ _24, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32)\n                        /// @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\"\n                        if iszero(_25)\n                        {\n                            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                            let pos_3 := mload(64)\n                            returndatacopy(pos_3, 0, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        /// @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\"\n                        let expr_13 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                        /// @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\"\n                        if _25\n                        {\n                            let _26 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32\n                            /// @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\"\n                            if gt(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32, /** @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\" */ returndatasize()) { _26 := returndatasize() }\n                            finalize_allocation(_24, _26)\n                            let value0_4 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                            if slt(sub(/** @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\" */ add(_24, _26), _24), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 32) { revert(0, 0) }\n                            value0_4 := mload(/** @src 1:3320:3359  \"IERC20(token1).balanceOf(address(this))\" */ _24)\n                            expr_13 := value0_4\n                        }\n                        /// @src 1:3385:3418  \"balance0 > _reserve0 - amount0Out\"\n                        let expr_14 := gt(expr_12, /** @src 1:3396:3418  \"_reserve0 - amount0Out\" */ checked_sub_uint256(_16, value_1))\n                        /// @src 1:3385:3460  \"balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0\"\n                        let expr_15 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                        /// @src 1:3385:3460  \"balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0\"\n                        switch expr_14\n                        case 0 {\n                            expr_15 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                        }\n                        default /// @src 1:3385:3460  \"balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0\"\n                        {\n                            expr_15 := /** @src 1:3421:3456  \"balance0 - (_reserve0 - amount0Out)\" */ checked_sub_uint256(expr_12, /** @src 1:3433:3455  \"_reserve0 - amount0Out\" */ checked_sub_uint256(_16, value_1))\n                        }\n                        /// @src 1:3497:3519  \"_reserve1 - amount1Out\"\n                        let _27 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ and(/** @src 1:3497:3519  \"_reserve1 - amount1Out\" */ expr_component_3, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0xffffffffffffffffffffffffffff)\n                        /// @src 1:3486:3519  \"balance1 > _reserve1 - amount1Out\"\n                        let expr_16 := gt(expr_13, /** @src 1:3497:3519  \"_reserve1 - amount1Out\" */ checked_sub_uint256(_27, value_2))\n                        /// @src 1:3486:3561  \"balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0\"\n                        let expr_17 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                        /// @src 1:3486:3561  \"balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0\"\n                        switch expr_16\n                        case 0 {\n                            expr_17 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0\n                        }\n                        default /// @src 1:3486:3561  \"balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0\"\n                        {\n                            expr_17 := /** @src 1:3522:3557  \"balance1 - (_reserve1 - amount1Out)\" */ checked_sub_uint256(expr_13, /** @src 1:3534:3556  \"_reserve1 - amount1Out\" */ checked_sub_uint256(_27, value_2))\n                        }\n                        /// @src 1:3575:3588  \"amount0In > 0\"\n                        let _28 := iszero(expr_15)\n                        /// @src 1:3575:3605  \"amount0In > 0 || amount1In > 0\"\n                        let expr_18 := /** @src 1:3575:3588  \"amount0In > 0\" */ iszero(_28)\n                        /// @src 1:3575:3605  \"amount0In > 0 || amount1In > 0\"\n                        if _28\n                        {\n                            expr_18 := /** @src 1:3592:3605  \"amount1In > 0\" */ iszero(iszero(expr_17))\n                        }\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        if iszero(expr_18)\n                        {\n                            let memPtr_4 := mload(64)\n                            mstore(memPtr_4, shl(229, 4594637))\n                            mstore(add(memPtr_4, 4), 32)\n                            /// @src 1:623:628  \"10**3\"\n                            mstore(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ add(memPtr_4, 36), 25)\n                            mstore(/** @src 1:623:628  \"10**3\" */ add(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ memPtr_4, 68), \"INSUFFICIENT_INPUT_AMOUNT\")\n                            revert(memPtr_4, 100)\n                        }\n                        let product := mul(expr_12, /** @src 1:3671:3675  \"1000\" */ 0x03e8)\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        if iszero(or(iszero(expr_12), eq(/** @src 1:3671:3675  \"1000\" */ 0x03e8, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ div(product, expr_12))))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 36)\n                        }\n                        let product_1 := mul(expr_13, /** @src 1:3671:3675  \"1000\" */ 0x03e8)\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        if iszero(or(iszero(expr_13), eq(/** @src 1:3671:3675  \"1000\" */ 0x03e8, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ div(product_1, expr_13))))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 36)\n                        }\n                        /// @src 1:3659:3696  \"(balance0 * 1000) * (balance1 * 1000)\"\n                        let expr_19 := checked_mul_uint256(product, /** @src 1:3680:3695  \"balance1 * 1000\" */ product_1)\n                        /// @src 1:3700:3739  \"uint256(_reserve0) * uint256(_reserve1)\"\n                        let expr_20 := checked_mul_uint256(_16, _27)\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        let product_2 := mul(expr_20, /** @src 1:3743:3750  \"1000**2\" */ 0x0f4240)\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        if iszero(or(iszero(expr_20), eq(/** @src 1:3743:3750  \"1000**2\" */ 0x0f4240, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ div(product_2, expr_20))))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 36)\n                        }\n                        if /** @src 1:3659:3751  \"(balance0 * 1000) * (balance1 * 1000) >= uint256(_reserve0) * uint256(_reserve1) * (1000**2)\" */ lt(expr_19, product_2)\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        {\n                            let memPtr_5 := mload(64)\n                            mstore(memPtr_5, shl(229, 4594637))\n                            mstore(add(memPtr_5, 4), 32)\n                            /// @src 1:623:628  \"10**3\"\n                            mstore(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ add(memPtr_5, 36), 1)\n                            mstore(/** @src 1:623:628  \"10**3\" */ add(/** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ memPtr_5, 68), \"K\")\n                            revert(memPtr_5, 100)\n                        }\n                        /// @src 1:623:628  \"10**3\"\n                        let _29 := sload(/** @src 1:3777:3805  \"reserve0 = uint112(balance0)\" */ 0x02)\n                        /// @src 1:623:628  \"10**3\"\n                        sstore(/** @src 1:3777:3805  \"reserve0 = uint112(balance0)\" */ 0x02, /** @src 1:623:628  \"10**3\" */ or(or(and(_29, shl(224, 0xffffffff)), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ and(/** @src 1:3788:3805  \"uint112(balance0)\" */ expr_12, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0xffffffffffffffffffffffffffff)), /** @src 1:623:628  \"10**3\" */ and(shl(112, /** @src 1:3822:3839  \"uint112(balance1)\" */ expr_13), /** @src 1:623:628  \"10**3\" */ shl(112, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0xffffffffffffffffffffffffffff))))\n                        /// @src 1:3850:3916  \"Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to)\"\n                        let _30 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ mload(64)\n                        mstore(_30, expr_15)\n                        mstore(add(_30, 32), expr_17)\n                        mstore(add(_30, 64), value_1)\n                        mstore(add(_30, 96), value_2)\n                        /// @src 1:3850:3916  \"Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to)\"\n                        log3(_30, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 128, /** @src 1:3850:3916  \"Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to)\" */ 0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822, /** @src 1:3855:3865  \"msg.sender\" */ caller(), /** @src 1:3850:3916  \"Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to)\" */ _14)\n                        /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                        return(0, 0)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 4)\n                        let _31 := sload(keccak256(0, 64))\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, _31)\n                        return(memPos_3, 32)\n                    }\n                    case 0xd21220a7 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_4 := and(sload(/** @src 1:400:421  \"address public token1\" */ 1), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ sub(shl(160, 1), 1))\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, value_4)\n                        return(memPos_4, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            /// @ast-id 297 @src 1:821:970  \"function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1) {...\"\n            function fun_getReserves() -> var_reserve0, var_reserve1\n            {\n                /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                let _1 := sload(/** @src 1:925:933  \"reserve0\" */ 0x02)\n                /// @src 1:913:933  \"_reserve0 = reserve0\"\n                var_reserve0 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ and(_1, 0xffffffffffffffffffffffffffff)\n                /// @src 1:943:963  \"_reserve1 = reserve1\"\n                var_reserve1 := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ and(shr(112, _1), 0xffffffffffffffffffffffffffff)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), /** @src 1:2918:2982  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out)\" */ not(31)))\n                /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                diff := sub(x, y)\n                if gt(diff, x)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_mul_uint256(x, y) -> product\n            {\n                product := mul(x, y)\n                if iszero(or(iszero(x), eq(y, div(product, x))))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_div_uint256(x, y) -> r\n            {\n                if iszero(y)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x12)\n                    revert(0, 0x24)\n                }\n                r := div(x, y)\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            /// @src 1:623:628  \"10**3\"\n            function require_helper_stringliteral_e8d3(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ mload(64)\n                    /// @src 1:623:628  \"10**3\"\n                    mstore(memPtr, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ shl(229, 4594637))\n                    /// @src 1:623:628  \"10**3\"\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 22)\n                    mstore(add(memPtr, 68), \"INSUFFICIENT_LIQUIDITY\")\n                    revert(memPtr, 100)\n                }\n            }\n            /// @src 1:337:3921  \"contract UniswapV2Pair {...\"\n            function abi_encode_address_uint256(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                mstore(add(headStart, 32), value1)\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 { data := 96 }\n                default {\n                    let _1 := returndatasize()\n                    if gt(_1, 0xffffffffffffffff)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0x24)\n                    }\n                    let memPtr := mload(64)\n                    finalize_allocation(memPtr, add(and(add(_1, 31), /** @src 1:2918:2982  \"abi.encodeWithSelector(IERC20.transfer.selector, to, amount0Out)\" */ not(31)), /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ 0x20))\n                    mstore(memPtr, _1)\n                    data := memPtr\n                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 1:337:3921  \"contract UniswapV2Pair {...\" */ returndatasize())\n                }\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122050336fcb145e36fba5a5e384d616399adb2c5e1084da555e0e24e6ca30d0a6ec64736f6c634300081c0033\"\n    }\n}\n",
          "hash": "05f401dd21092269f96d3e55763cb19e477098d1892da186e6fcf10aeaa49895",
          "factoryDependencies": {}
        }
      }
    }
  }
}